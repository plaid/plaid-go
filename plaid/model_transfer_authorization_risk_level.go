/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.525.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// TransferAuthorizationRiskLevel Comprises five risk categories (high risk, medium-high risk, medium risk, medium-low risk, low risk) based on the probability of return
type TransferAuthorizationRiskLevel string

var _ = fmt.Printf

// List of TransferAuthorizationRiskLevel
const (
	TRANSFERAUTHORIZATIONRISKLEVEL_HIGH_RISK TransferAuthorizationRiskLevel = "HIGH_RISK"
	TRANSFERAUTHORIZATIONRISKLEVEL_MEDIUM_HIGH_RISK TransferAuthorizationRiskLevel = "MEDIUM_HIGH_RISK"
	TRANSFERAUTHORIZATIONRISKLEVEL_MEDIUM_RISK TransferAuthorizationRiskLevel = "MEDIUM_RISK"
	TRANSFERAUTHORIZATIONRISKLEVEL_MEDIUM_LOW_RISK TransferAuthorizationRiskLevel = "MEDIUM_LOW_RISK"
	TRANSFERAUTHORIZATIONRISKLEVEL_LOW_RISK TransferAuthorizationRiskLevel = "LOW_RISK"
)

var allowedTransferAuthorizationRiskLevelEnumValues = []TransferAuthorizationRiskLevel{
	"HIGH_RISK",
	"MEDIUM_HIGH_RISK",
	"MEDIUM_RISK",
	"MEDIUM_LOW_RISK",
	"LOW_RISK",
}

func (v *TransferAuthorizationRiskLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := TransferAuthorizationRiskLevel(value)


	*v = enumTypeValue
	return nil
}

// NewTransferAuthorizationRiskLevelFromValue returns a pointer to a valid TransferAuthorizationRiskLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferAuthorizationRiskLevelFromValue(v string) (*TransferAuthorizationRiskLevel, error) {
	ev := TransferAuthorizationRiskLevel(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferAuthorizationRiskLevel) IsValid() bool {
	for _, existing := range allowedTransferAuthorizationRiskLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferAuthorizationRiskLevel value
func (v TransferAuthorizationRiskLevel) Ptr() *TransferAuthorizationRiskLevel {
	return &v
}

type NullableTransferAuthorizationRiskLevel struct {
	value *TransferAuthorizationRiskLevel
	isSet bool
}

func (v NullableTransferAuthorizationRiskLevel) Get() *TransferAuthorizationRiskLevel {
	return v.value
}

func (v *NullableTransferAuthorizationRiskLevel) Set(val *TransferAuthorizationRiskLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferAuthorizationRiskLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferAuthorizationRiskLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferAuthorizationRiskLevel(val *TransferAuthorizationRiskLevel) *NullableTransferAuthorizationRiskLevel {
	return &NullableTransferAuthorizationRiskLevel{value: val, isSet: true}
}

func (v NullableTransferAuthorizationRiskLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferAuthorizationRiskLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

