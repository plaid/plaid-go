/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.496.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BaseReportWarning It is possible for an Base Report to be returned with missing account owner information. In such cases, the Base Report will contain warning data in the response, indicating why obtaining the owner information failed.
type BaseReportWarning struct {
	// The warning type, which will always be `BASE_REPORT_WARNING`
	WarningType string `json:"warning_type"`
	WarningCode BaseReportWarningCode `json:"warning_code"`
	Cause Cause `json:"cause"`
	AdditionalProperties map[string]interface{}
}

type _BaseReportWarning BaseReportWarning

// NewBaseReportWarning instantiates a new BaseReportWarning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseReportWarning(warningType string, warningCode BaseReportWarningCode, cause Cause) *BaseReportWarning {
	this := BaseReportWarning{}
	this.WarningType = warningType
	this.WarningCode = warningCode
	this.Cause = cause
	return &this
}

// NewBaseReportWarningWithDefaults instantiates a new BaseReportWarning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseReportWarningWithDefaults() *BaseReportWarning {
	this := BaseReportWarning{}
	return &this
}

// GetWarningType returns the WarningType field value
func (o *BaseReportWarning) GetWarningType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WarningType
}

// GetWarningTypeOk returns a tuple with the WarningType field value
// and a boolean to check if the value has been set.
func (o *BaseReportWarning) GetWarningTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WarningType, true
}

// SetWarningType sets field value
func (o *BaseReportWarning) SetWarningType(v string) {
	o.WarningType = v
}

// GetWarningCode returns the WarningCode field value
func (o *BaseReportWarning) GetWarningCode() BaseReportWarningCode {
	if o == nil {
		var ret BaseReportWarningCode
		return ret
	}

	return o.WarningCode
}

// GetWarningCodeOk returns a tuple with the WarningCode field value
// and a boolean to check if the value has been set.
func (o *BaseReportWarning) GetWarningCodeOk() (*BaseReportWarningCode, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WarningCode, true
}

// SetWarningCode sets field value
func (o *BaseReportWarning) SetWarningCode(v BaseReportWarningCode) {
	o.WarningCode = v
}

// GetCause returns the Cause field value
func (o *BaseReportWarning) GetCause() Cause {
	if o == nil {
		var ret Cause
		return ret
	}

	return o.Cause
}

// GetCauseOk returns a tuple with the Cause field value
// and a boolean to check if the value has been set.
func (o *BaseReportWarning) GetCauseOk() (*Cause, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cause, true
}

// SetCause sets field value
func (o *BaseReportWarning) SetCause(v Cause) {
	o.Cause = v
}

func (o BaseReportWarning) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["warning_type"] = o.WarningType
	}
	if true {
		toSerialize["warning_code"] = o.WarningCode
	}
	if true {
		toSerialize["cause"] = o.Cause
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BaseReportWarning) UnmarshalJSON(bytes []byte) (err error) {
	varBaseReportWarning := _BaseReportWarning{}

	if err = json.Unmarshal(bytes, &varBaseReportWarning); err == nil {
		*o = BaseReportWarning(varBaseReportWarning)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "warning_type")
		delete(additionalProperties, "warning_code")
		delete(additionalProperties, "cause")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBaseReportWarning struct {
	value *BaseReportWarning
	isSet bool
}

func (v NullableBaseReportWarning) Get() *BaseReportWarning {
	return v.value
}

func (v *NullableBaseReportWarning) Set(val *BaseReportWarning) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseReportWarning) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseReportWarning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseReportWarning(val *BaseReportWarning) *NullableBaseReportWarning {
	return &NullableBaseReportWarning{value: val, isSet: true}
}

func (v NullableBaseReportWarning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseReportWarning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


