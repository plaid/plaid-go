/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.565.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// CraBankIncomeBonusType The type of bonus that this transaction represents, if it is a bonus. `BONUS_INCLUDED`: Bonus is included in this transaction along with the normal pay `BONUS_ONLY`: This transaction is a standalone bonus
type CraBankIncomeBonusType string

var _ = fmt.Printf

// List of CraBankIncomeBonusType
const (
	CRABANKINCOMEBONUSTYPE_BONUS_INCLUDED CraBankIncomeBonusType = "BONUS_INCLUDED"
	CRABANKINCOMEBONUSTYPE_BONUS_ONLY CraBankIncomeBonusType = "BONUS_ONLY"
	CRABANKINCOMEBONUSTYPE_NULL CraBankIncomeBonusType = "null"
)

var allowedCraBankIncomeBonusTypeEnumValues = []CraBankIncomeBonusType{
	"BONUS_INCLUDED",
	"BONUS_ONLY",
	"null",
}

func (v *CraBankIncomeBonusType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := CraBankIncomeBonusType(value)


	*v = enumTypeValue
	return nil
}

// NewCraBankIncomeBonusTypeFromValue returns a pointer to a valid CraBankIncomeBonusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCraBankIncomeBonusTypeFromValue(v string) (*CraBankIncomeBonusType, error) {
	ev := CraBankIncomeBonusType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CraBankIncomeBonusType) IsValid() bool {
	for _, existing := range allowedCraBankIncomeBonusTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CraBankIncomeBonusType value
func (v CraBankIncomeBonusType) Ptr() *CraBankIncomeBonusType {
	return &v
}

type NullableCraBankIncomeBonusType struct {
	value *CraBankIncomeBonusType
	isSet bool
}

func (v NullableCraBankIncomeBonusType) Get() *CraBankIncomeBonusType {
	return v.value
}

func (v *NullableCraBankIncomeBonusType) Set(val *CraBankIncomeBonusType) {
	v.value = val
	v.isSet = true
}

func (v NullableCraBankIncomeBonusType) IsSet() bool {
	return v.isSet
}

func (v *NullableCraBankIncomeBonusType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraBankIncomeBonusType(val *CraBankIncomeBonusType) *NullableCraBankIncomeBonusType {
	return &NullableCraBankIncomeBonusType{value: val, isSet: true}
}

func (v NullableCraBankIncomeBonusType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraBankIncomeBonusType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

