/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.385.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// LinkEvent An event that occurred while the user was going through Link
type LinkEvent struct {
	// Event name
	EventName string `json:"event_name"`
	// Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
	Timestamp string `json:"timestamp"`
	// UUID that can be used to deduplicate events
	EventId string `json:"event_id"`
	AdditionalProperties map[string]interface{}
}

type _LinkEvent LinkEvent

// NewLinkEvent instantiates a new LinkEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkEvent(eventName string, timestamp string, eventId string) *LinkEvent {
	this := LinkEvent{}
	this.EventName = eventName
	this.Timestamp = timestamp
	this.EventId = eventId
	return &this
}

// NewLinkEventWithDefaults instantiates a new LinkEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkEventWithDefaults() *LinkEvent {
	this := LinkEvent{}
	return &this
}

// GetEventName returns the EventName field value
func (o *LinkEvent) GetEventName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventName
}

// GetEventNameOk returns a tuple with the EventName field value
// and a boolean to check if the value has been set.
func (o *LinkEvent) GetEventNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventName, true
}

// SetEventName sets field value
func (o *LinkEvent) SetEventName(v string) {
	o.EventName = v
}

// GetTimestamp returns the Timestamp field value
func (o *LinkEvent) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *LinkEvent) GetTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *LinkEvent) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetEventId returns the EventId field value
func (o *LinkEvent) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *LinkEvent) GetEventIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *LinkEvent) SetEventId(v string) {
	o.EventId = v
}

func (o LinkEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event_name"] = o.EventName
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if true {
		toSerialize["event_id"] = o.EventId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LinkEvent) UnmarshalJSON(bytes []byte) (err error) {
	varLinkEvent := _LinkEvent{}

	if err = json.Unmarshal(bytes, &varLinkEvent); err == nil {
		*o = LinkEvent(varLinkEvent)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "event_name")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "event_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkEvent struct {
	value *LinkEvent
	isSet bool
}

func (v NullableLinkEvent) Get() *LinkEvent {
	return v.value
}

func (v *NullableLinkEvent) Set(val *LinkEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkEvent(val *LinkEvent) *NullableLinkEvent {
	return &NullableLinkEvent{value: val, isSet: true}
}

func (v NullableLinkEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


