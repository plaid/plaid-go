/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.413.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BeaconUserRequestData A Beacon User's data which is used to check against duplicate records and the Beacon Fraud Network.
type BeaconUserRequestData struct {
	// A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
	DateOfBirth string `json:"date_of_birth"`
	Name BeaconUserName `json:"name"`
	Address BeaconUserRequestAddress `json:"address"`
	// A valid email address.
	EmailAddress *string `json:"email_address,omitempty"`
	// A phone number in E.164 format.
	PhoneNumber NullableString `json:"phone_number,omitempty"`
	IdNumber *BeaconUserIDNumber `json:"id_number,omitempty"`
	// An IPv4 or IPV6 address.
	IpAddress NullableString `json:"ip_address,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BeaconUserRequestData BeaconUserRequestData

// NewBeaconUserRequestData instantiates a new BeaconUserRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconUserRequestData(dateOfBirth string, name BeaconUserName, address BeaconUserRequestAddress) *BeaconUserRequestData {
	this := BeaconUserRequestData{}
	this.DateOfBirth = dateOfBirth
	this.Name = name
	this.Address = address
	return &this
}

// NewBeaconUserRequestDataWithDefaults instantiates a new BeaconUserRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconUserRequestDataWithDefaults() *BeaconUserRequestData {
	this := BeaconUserRequestData{}
	return &this
}

// GetDateOfBirth returns the DateOfBirth field value
func (o *BeaconUserRequestData) GetDateOfBirth() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateOfBirth
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value
// and a boolean to check if the value has been set.
func (o *BeaconUserRequestData) GetDateOfBirthOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateOfBirth, true
}

// SetDateOfBirth sets field value
func (o *BeaconUserRequestData) SetDateOfBirth(v string) {
	o.DateOfBirth = v
}

// GetName returns the Name field value
func (o *BeaconUserRequestData) GetName() BeaconUserName {
	if o == nil {
		var ret BeaconUserName
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BeaconUserRequestData) GetNameOk() (*BeaconUserName, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BeaconUserRequestData) SetName(v BeaconUserName) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *BeaconUserRequestData) GetAddress() BeaconUserRequestAddress {
	if o == nil {
		var ret BeaconUserRequestAddress
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *BeaconUserRequestData) GetAddressOk() (*BeaconUserRequestAddress, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *BeaconUserRequestData) SetAddress(v BeaconUserRequestAddress) {
	o.Address = v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *BeaconUserRequestData) GetEmailAddress() string {
	if o == nil || o.EmailAddress == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeaconUserRequestData) GetEmailAddressOk() (*string, bool) {
	if o == nil || o.EmailAddress == nil {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *BeaconUserRequestData) HasEmailAddress() bool {
	if o != nil && o.EmailAddress != nil {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *BeaconUserRequestData) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BeaconUserRequestData) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber.Get()
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BeaconUserRequestData) GetPhoneNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhoneNumber.Get(), o.PhoneNumber.IsSet()
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *BeaconUserRequestData) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given NullableString and assigns it to the PhoneNumber field.
func (o *BeaconUserRequestData) SetPhoneNumber(v string) {
	o.PhoneNumber.Set(&v)
}
// SetPhoneNumberNil sets the value for PhoneNumber to be an explicit nil
func (o *BeaconUserRequestData) SetPhoneNumberNil() {
	o.PhoneNumber.Set(nil)
}

// UnsetPhoneNumber ensures that no value is present for PhoneNumber, not even an explicit nil
func (o *BeaconUserRequestData) UnsetPhoneNumber() {
	o.PhoneNumber.Unset()
}

// GetIdNumber returns the IdNumber field value if set, zero value otherwise.
func (o *BeaconUserRequestData) GetIdNumber() BeaconUserIDNumber {
	if o == nil || o.IdNumber == nil {
		var ret BeaconUserIDNumber
		return ret
	}
	return *o.IdNumber
}

// GetIdNumberOk returns a tuple with the IdNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeaconUserRequestData) GetIdNumberOk() (*BeaconUserIDNumber, bool) {
	if o == nil || o.IdNumber == nil {
		return nil, false
	}
	return o.IdNumber, true
}

// HasIdNumber returns a boolean if a field has been set.
func (o *BeaconUserRequestData) HasIdNumber() bool {
	if o != nil && o.IdNumber != nil {
		return true
	}

	return false
}

// SetIdNumber gets a reference to the given BeaconUserIDNumber and assigns it to the IdNumber field.
func (o *BeaconUserRequestData) SetIdNumber(v BeaconUserIDNumber) {
	o.IdNumber = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BeaconUserRequestData) GetIpAddress() string {
	if o == nil || o.IpAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BeaconUserRequestData) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *BeaconUserRequestData) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *BeaconUserRequestData) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}
// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *BeaconUserRequestData) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *BeaconUserRequestData) UnsetIpAddress() {
	o.IpAddress.Unset()
}

func (o BeaconUserRequestData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["date_of_birth"] = o.DateOfBirth
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["address"] = o.Address
	}
	if o.EmailAddress != nil {
		toSerialize["email_address"] = o.EmailAddress
	}
	if o.PhoneNumber.IsSet() {
		toSerialize["phone_number"] = o.PhoneNumber.Get()
	}
	if o.IdNumber != nil {
		toSerialize["id_number"] = o.IdNumber
	}
	if o.IpAddress.IsSet() {
		toSerialize["ip_address"] = o.IpAddress.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BeaconUserRequestData) UnmarshalJSON(bytes []byte) (err error) {
	varBeaconUserRequestData := _BeaconUserRequestData{}

	if err = json.Unmarshal(bytes, &varBeaconUserRequestData); err == nil {
		*o = BeaconUserRequestData(varBeaconUserRequestData)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "date_of_birth")
		delete(additionalProperties, "name")
		delete(additionalProperties, "address")
		delete(additionalProperties, "email_address")
		delete(additionalProperties, "phone_number")
		delete(additionalProperties, "id_number")
		delete(additionalProperties, "ip_address")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBeaconUserRequestData struct {
	value *BeaconUserRequestData
	isSet bool
}

func (v NullableBeaconUserRequestData) Get() *BeaconUserRequestData {
	return v.value
}

func (v *NullableBeaconUserRequestData) Set(val *BeaconUserRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconUserRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconUserRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconUserRequestData(val *BeaconUserRequestData) *NullableBeaconUserRequestData {
	return &NullableBeaconUserRequestData{value: val, isSet: true}
}

func (v NullableBeaconUserRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconUserRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


