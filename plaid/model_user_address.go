/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.128.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// UserAddress Home address for user supplied to `/identity_verification/create`
type UserAddress struct {
	// The primary street portion of an address. If the user has submitted their address, this field will always be filled.
	Street string `json:"street"`
	// Extra street information, like an apartment or suite number.
	Street2 NullableString `json:"street2,omitempty"`
	// City from the end user's address
	City string `json:"city"`
	// An ISO 3166-2 subdivision code. Related terms would be \"state\", \"province\", \"prefecture\", \"zone\", \"subdivision\", etc.
	Region string `json:"region"`
	// The postal code for the associated address. Between 2 and 10 alphanumeric characters.
	PostalCode string `json:"postal_code"`
	// Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
	Country string `json:"country"`
}

// NewUserAddress instantiates a new UserAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAddress(street string, city string, region string, postalCode string, country string) *UserAddress {
	this := UserAddress{}
	this.Street = street
	this.City = city
	this.Region = region
	this.PostalCode = postalCode
	this.Country = country
	return &this
}

// NewUserAddressWithDefaults instantiates a new UserAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAddressWithDefaults() *UserAddress {
	this := UserAddress{}
	return &this
}

// GetStreet returns the Street field value
func (o *UserAddress) GetStreet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Street
}

// GetStreetOk returns a tuple with the Street field value
// and a boolean to check if the value has been set.
func (o *UserAddress) GetStreetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Street, true
}

// SetStreet sets field value
func (o *UserAddress) SetStreet(v string) {
	o.Street = v
}

// GetStreet2 returns the Street2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAddress) GetStreet2() string {
	if o == nil || o.Street2.Get() == nil {
		var ret string
		return ret
	}
	return *o.Street2.Get()
}

// GetStreet2Ok returns a tuple with the Street2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAddress) GetStreet2Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Street2.Get(), o.Street2.IsSet()
}

// HasStreet2 returns a boolean if a field has been set.
func (o *UserAddress) HasStreet2() bool {
	if o != nil && o.Street2.IsSet() {
		return true
	}

	return false
}

// SetStreet2 gets a reference to the given NullableString and assigns it to the Street2 field.
func (o *UserAddress) SetStreet2(v string) {
	o.Street2.Set(&v)
}
// SetStreet2Nil sets the value for Street2 to be an explicit nil
func (o *UserAddress) SetStreet2Nil() {
	o.Street2.Set(nil)
}

// UnsetStreet2 ensures that no value is present for Street2, not even an explicit nil
func (o *UserAddress) UnsetStreet2() {
	o.Street2.Unset()
}

// GetCity returns the City field value
func (o *UserAddress) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *UserAddress) GetCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *UserAddress) SetCity(v string) {
	o.City = v
}

// GetRegion returns the Region field value
func (o *UserAddress) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *UserAddress) GetRegionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *UserAddress) SetRegion(v string) {
	o.Region = v
}

// GetPostalCode returns the PostalCode field value
func (o *UserAddress) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *UserAddress) GetPostalCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *UserAddress) SetPostalCode(v string) {
	o.PostalCode = v
}

// GetCountry returns the Country field value
func (o *UserAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *UserAddress) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *UserAddress) SetCountry(v string) {
	o.Country = v
}

func (o UserAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["street"] = o.Street
	}
	if o.Street2.IsSet() {
		toSerialize["street2"] = o.Street2.Get()
	}
	if true {
		toSerialize["city"] = o.City
	}
	if true {
		toSerialize["region"] = o.Region
	}
	if true {
		toSerialize["postal_code"] = o.PostalCode
	}
	if true {
		toSerialize["country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableUserAddress struct {
	value *UserAddress
	isSet bool
}

func (v NullableUserAddress) Get() *UserAddress {
	return v.value
}

func (v *NullableUserAddress) Set(val *UserAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAddress(val *UserAddress) *NullableUserAddress {
	return &NullableUserAddress{value: val, isSet: true}
}

func (v NullableUserAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


