/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.470.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// AssetReportInvestmentSecurity Investment security associated with the account.
type AssetReportInvestmentSecurity struct {
	// A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive. The `security_id` may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change.
	SecurityId string `json:"security_id"`
	// A descriptive name for the security, suitable for display.
	Name NullableString `json:"name"`
	// The securityâ€™s trading symbol for publicly traded securities, and otherwise a short identifier if available.
	TickerSymbol NullableString `json:"ticker_symbol"`
	// The security type of the holding. Valid security types are:  `cash`: Cash, currency, and money market funds  `cryptocurrency`: Digital or virtual currencies  `derivative`: Options, warrants, and other derivative instruments  `equity`: Domestic and foreign equities  `etf`: Multi-asset exchange-traded investment funds  `fixed income`: Bonds and certificates of deposit (CDs)  `loan`: Loans and loan receivables  `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors  `other`: Unknown or other investment types
	Type NullableString `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _AssetReportInvestmentSecurity AssetReportInvestmentSecurity

// NewAssetReportInvestmentSecurity instantiates a new AssetReportInvestmentSecurity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetReportInvestmentSecurity(securityId string, name NullableString, tickerSymbol NullableString, type_ NullableString) *AssetReportInvestmentSecurity {
	this := AssetReportInvestmentSecurity{}
	this.SecurityId = securityId
	this.Name = name
	this.TickerSymbol = tickerSymbol
	this.Type = type_
	return &this
}

// NewAssetReportInvestmentSecurityWithDefaults instantiates a new AssetReportInvestmentSecurity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetReportInvestmentSecurityWithDefaults() *AssetReportInvestmentSecurity {
	this := AssetReportInvestmentSecurity{}
	return &this
}

// GetSecurityId returns the SecurityId field value
func (o *AssetReportInvestmentSecurity) GetSecurityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecurityId
}

// GetSecurityIdOk returns a tuple with the SecurityId field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestmentSecurity) GetSecurityIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SecurityId, true
}

// SetSecurityId sets field value
func (o *AssetReportInvestmentSecurity) SetSecurityId(v string) {
	o.SecurityId = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportInvestmentSecurity) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportInvestmentSecurity) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *AssetReportInvestmentSecurity) SetName(v string) {
	o.Name.Set(&v)
}

// GetTickerSymbol returns the TickerSymbol field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportInvestmentSecurity) GetTickerSymbol() string {
	if o == nil || o.TickerSymbol.Get() == nil {
		var ret string
		return ret
	}

	return *o.TickerSymbol.Get()
}

// GetTickerSymbolOk returns a tuple with the TickerSymbol field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportInvestmentSecurity) GetTickerSymbolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TickerSymbol.Get(), o.TickerSymbol.IsSet()
}

// SetTickerSymbol sets field value
func (o *AssetReportInvestmentSecurity) SetTickerSymbol(v string) {
	o.TickerSymbol.Set(&v)
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportInvestmentSecurity) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportInvestmentSecurity) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *AssetReportInvestmentSecurity) SetType(v string) {
	o.Type.Set(&v)
}

func (o AssetReportInvestmentSecurity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["security_id"] = o.SecurityId
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["ticker_symbol"] = o.TickerSymbol.Get()
	}
	if true {
		toSerialize["type"] = o.Type.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AssetReportInvestmentSecurity) UnmarshalJSON(bytes []byte) (err error) {
	varAssetReportInvestmentSecurity := _AssetReportInvestmentSecurity{}

	if err = json.Unmarshal(bytes, &varAssetReportInvestmentSecurity); err == nil {
		*o = AssetReportInvestmentSecurity(varAssetReportInvestmentSecurity)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "security_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "ticker_symbol")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetReportInvestmentSecurity struct {
	value *AssetReportInvestmentSecurity
	isSet bool
}

func (v NullableAssetReportInvestmentSecurity) Get() *AssetReportInvestmentSecurity {
	return v.value
}

func (v *NullableAssetReportInvestmentSecurity) Set(val *AssetReportInvestmentSecurity) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetReportInvestmentSecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetReportInvestmentSecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetReportInvestmentSecurity(val *AssetReportInvestmentSecurity) *NullableAssetReportInvestmentSecurity {
	return &NullableAssetReportInvestmentSecurity{value: val, isSet: true}
}

func (v NullableAssetReportInvestmentSecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetReportInvestmentSecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


