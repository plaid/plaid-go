/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.652.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// ProtectEvent Event data for Protect events.
type ProtectEvent struct {
	// The timestamp of the event, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2017-09-14T14:42:19.350Z\"`
	Timestamp time.Time `json:"timestamp"`
	// If present, contains the current Protect Session ID from the Plaid Pixel SDK.
	ProtectSessionId *string `json:"protect_session_id,omitempty"`
	// This event type represents a user visiting the client application.
	AppVisit map[string]map[string]interface{} `json:"app_visit,omitempty"`
	// This event type represents a user signing in to the application.
	UserSignIn map[string]map[string]interface{} `json:"user_sign_in,omitempty"`
	// This event type represents a user signing up for the application.
	UserSignUp map[string]map[string]interface{} `json:"user_sign_up,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProtectEvent ProtectEvent

// NewProtectEvent instantiates a new ProtectEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectEvent(timestamp time.Time) *ProtectEvent {
	this := ProtectEvent{}
	this.Timestamp = timestamp
	return &this
}

// NewProtectEventWithDefaults instantiates a new ProtectEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectEventWithDefaults() *ProtectEvent {
	this := ProtectEvent{}
	return &this
}

// GetTimestamp returns the Timestamp field value
func (o *ProtectEvent) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ProtectEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ProtectEvent) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetProtectSessionId returns the ProtectSessionId field value if set, zero value otherwise.
func (o *ProtectEvent) GetProtectSessionId() string {
	if o == nil || o.ProtectSessionId == nil {
		var ret string
		return ret
	}
	return *o.ProtectSessionId
}

// GetProtectSessionIdOk returns a tuple with the ProtectSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectEvent) GetProtectSessionIdOk() (*string, bool) {
	if o == nil || o.ProtectSessionId == nil {
		return nil, false
	}
	return o.ProtectSessionId, true
}

// HasProtectSessionId returns a boolean if a field has been set.
func (o *ProtectEvent) HasProtectSessionId() bool {
	if o != nil && o.ProtectSessionId != nil {
		return true
	}

	return false
}

// SetProtectSessionId gets a reference to the given string and assigns it to the ProtectSessionId field.
func (o *ProtectEvent) SetProtectSessionId(v string) {
	o.ProtectSessionId = &v
}

// GetAppVisit returns the AppVisit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectEvent) GetAppVisit() map[string]map[string]interface{} {
	if o == nil  {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.AppVisit
}

// GetAppVisitOk returns a tuple with the AppVisit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectEvent) GetAppVisitOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.AppVisit == nil {
		return nil, false
	}
	return &o.AppVisit, true
}

// HasAppVisit returns a boolean if a field has been set.
func (o *ProtectEvent) HasAppVisit() bool {
	if o != nil && o.AppVisit != nil {
		return true
	}

	return false
}

// SetAppVisit gets a reference to the given map[string]map[string]interface{} and assigns it to the AppVisit field.
func (o *ProtectEvent) SetAppVisit(v map[string]map[string]interface{}) {
	o.AppVisit = v
}

// GetUserSignIn returns the UserSignIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectEvent) GetUserSignIn() map[string]map[string]interface{} {
	if o == nil  {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.UserSignIn
}

// GetUserSignInOk returns a tuple with the UserSignIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectEvent) GetUserSignInOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.UserSignIn == nil {
		return nil, false
	}
	return &o.UserSignIn, true
}

// HasUserSignIn returns a boolean if a field has been set.
func (o *ProtectEvent) HasUserSignIn() bool {
	if o != nil && o.UserSignIn != nil {
		return true
	}

	return false
}

// SetUserSignIn gets a reference to the given map[string]map[string]interface{} and assigns it to the UserSignIn field.
func (o *ProtectEvent) SetUserSignIn(v map[string]map[string]interface{}) {
	o.UserSignIn = v
}

// GetUserSignUp returns the UserSignUp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectEvent) GetUserSignUp() map[string]map[string]interface{} {
	if o == nil  {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.UserSignUp
}

// GetUserSignUpOk returns a tuple with the UserSignUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectEvent) GetUserSignUpOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.UserSignUp == nil {
		return nil, false
	}
	return &o.UserSignUp, true
}

// HasUserSignUp returns a boolean if a field has been set.
func (o *ProtectEvent) HasUserSignUp() bool {
	if o != nil && o.UserSignUp != nil {
		return true
	}

	return false
}

// SetUserSignUp gets a reference to the given map[string]map[string]interface{} and assigns it to the UserSignUp field.
func (o *ProtectEvent) SetUserSignUp(v map[string]map[string]interface{}) {
	o.UserSignUp = v
}

func (o ProtectEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.ProtectSessionId != nil {
		toSerialize["protect_session_id"] = o.ProtectSessionId
	}
	if o.AppVisit != nil {
		toSerialize["app_visit"] = o.AppVisit
	}
	if o.UserSignIn != nil {
		toSerialize["user_sign_in"] = o.UserSignIn
	}
	if o.UserSignUp != nil {
		toSerialize["user_sign_up"] = o.UserSignUp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ProtectEvent) UnmarshalJSON(bytes []byte) (err error) {
	varProtectEvent := _ProtectEvent{}

	if err = json.Unmarshal(bytes, &varProtectEvent); err == nil {
		*o = ProtectEvent(varProtectEvent)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "protect_session_id")
		delete(additionalProperties, "app_visit")
		delete(additionalProperties, "user_sign_in")
		delete(additionalProperties, "user_sign_up")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProtectEvent struct {
	value *ProtectEvent
	isSet bool
}

func (v NullableProtectEvent) Get() *ProtectEvent {
	return v.value
}

func (v *NullableProtectEvent) Set(val *ProtectEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectEvent(val *ProtectEvent) *NullableProtectEvent {
	return &NullableProtectEvent{value: val, isSet: true}
}

func (v NullableProtectEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


