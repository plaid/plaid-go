/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CraPredictionInterval The object containing prediction interval data.
type CraPredictionInterval struct {
	// The lower bound of the predicted attribute for the given probability.
	LowerBound NullableFloat32 `json:"lower_bound,omitempty"`
	// The upper bound of the predicted attribute for the given probability.
	UpperBound NullableFloat32 `json:"upper_bound,omitempty"`
	// The probability of the actual value of the attribute falling within the upper and lower bound. This is a percentage represented as a value between 0 and 1.
	Probability NullableFloat32 `json:"probability,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CraPredictionInterval CraPredictionInterval

// NewCraPredictionInterval instantiates a new CraPredictionInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCraPredictionInterval() *CraPredictionInterval {
	this := CraPredictionInterval{}
	return &this
}

// NewCraPredictionIntervalWithDefaults instantiates a new CraPredictionInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCraPredictionIntervalWithDefaults() *CraPredictionInterval {
	this := CraPredictionInterval{}
	return &this
}

// GetLowerBound returns the LowerBound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CraPredictionInterval) GetLowerBound() float32 {
	if o == nil || o.LowerBound.Get() == nil {
		var ret float32
		return ret
	}
	return *o.LowerBound.Get()
}

// GetLowerBoundOk returns a tuple with the LowerBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraPredictionInterval) GetLowerBoundOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LowerBound.Get(), o.LowerBound.IsSet()
}

// HasLowerBound returns a boolean if a field has been set.
func (o *CraPredictionInterval) HasLowerBound() bool {
	if o != nil && o.LowerBound.IsSet() {
		return true
	}

	return false
}

// SetLowerBound gets a reference to the given NullableFloat32 and assigns it to the LowerBound field.
func (o *CraPredictionInterval) SetLowerBound(v float32) {
	o.LowerBound.Set(&v)
}
// SetLowerBoundNil sets the value for LowerBound to be an explicit nil
func (o *CraPredictionInterval) SetLowerBoundNil() {
	o.LowerBound.Set(nil)
}

// UnsetLowerBound ensures that no value is present for LowerBound, not even an explicit nil
func (o *CraPredictionInterval) UnsetLowerBound() {
	o.LowerBound.Unset()
}

// GetUpperBound returns the UpperBound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CraPredictionInterval) GetUpperBound() float32 {
	if o == nil || o.UpperBound.Get() == nil {
		var ret float32
		return ret
	}
	return *o.UpperBound.Get()
}

// GetUpperBoundOk returns a tuple with the UpperBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraPredictionInterval) GetUpperBoundOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpperBound.Get(), o.UpperBound.IsSet()
}

// HasUpperBound returns a boolean if a field has been set.
func (o *CraPredictionInterval) HasUpperBound() bool {
	if o != nil && o.UpperBound.IsSet() {
		return true
	}

	return false
}

// SetUpperBound gets a reference to the given NullableFloat32 and assigns it to the UpperBound field.
func (o *CraPredictionInterval) SetUpperBound(v float32) {
	o.UpperBound.Set(&v)
}
// SetUpperBoundNil sets the value for UpperBound to be an explicit nil
func (o *CraPredictionInterval) SetUpperBoundNil() {
	o.UpperBound.Set(nil)
}

// UnsetUpperBound ensures that no value is present for UpperBound, not even an explicit nil
func (o *CraPredictionInterval) UnsetUpperBound() {
	o.UpperBound.Unset()
}

// GetProbability returns the Probability field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CraPredictionInterval) GetProbability() float32 {
	if o == nil || o.Probability.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Probability.Get()
}

// GetProbabilityOk returns a tuple with the Probability field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraPredictionInterval) GetProbabilityOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Probability.Get(), o.Probability.IsSet()
}

// HasProbability returns a boolean if a field has been set.
func (o *CraPredictionInterval) HasProbability() bool {
	if o != nil && o.Probability.IsSet() {
		return true
	}

	return false
}

// SetProbability gets a reference to the given NullableFloat32 and assigns it to the Probability field.
func (o *CraPredictionInterval) SetProbability(v float32) {
	o.Probability.Set(&v)
}
// SetProbabilityNil sets the value for Probability to be an explicit nil
func (o *CraPredictionInterval) SetProbabilityNil() {
	o.Probability.Set(nil)
}

// UnsetProbability ensures that no value is present for Probability, not even an explicit nil
func (o *CraPredictionInterval) UnsetProbability() {
	o.Probability.Unset()
}

func (o CraPredictionInterval) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LowerBound.IsSet() {
		toSerialize["lower_bound"] = o.LowerBound.Get()
	}
	if o.UpperBound.IsSet() {
		toSerialize["upper_bound"] = o.UpperBound.Get()
	}
	if o.Probability.IsSet() {
		toSerialize["probability"] = o.Probability.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CraPredictionInterval) UnmarshalJSON(bytes []byte) (err error) {
	varCraPredictionInterval := _CraPredictionInterval{}

	if err = json.Unmarshal(bytes, &varCraPredictionInterval); err == nil {
		*o = CraPredictionInterval(varCraPredictionInterval)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "lower_bound")
		delete(additionalProperties, "upper_bound")
		delete(additionalProperties, "probability")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCraPredictionInterval struct {
	value *CraPredictionInterval
	isSet bool
}

func (v NullableCraPredictionInterval) Get() *CraPredictionInterval {
	return v.value
}

func (v *NullableCraPredictionInterval) Set(val *CraPredictionInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableCraPredictionInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableCraPredictionInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraPredictionInterval(val *CraPredictionInterval) *NullableCraPredictionInterval {
	return &NullableCraPredictionInterval{value: val, isSet: true}
}

func (v NullableCraPredictionInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraPredictionInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


