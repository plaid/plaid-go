/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// AuthVerifyResponse AuthVerifyResponse defines the response schema for `/auth/verify`
type AuthVerifyResponse struct {
	// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
	RequestId string `json:"request_id"`
	// The `item_id` value of the Item created for verification. If numbers data provided is invalid, an item may not be created.
	ItemId NullableString `json:"item_id,omitempty"`
	// Indicates the Item's database verification status. Possible values are:  `database_insights_fail`: The Item's numbers have been verified using Plaid's data sources and have signal for being invalid and/or have no signal for being valid. Typically this indicates that the routing number is invalid, the account number does not match the account number format associated with the routing number, or the account has been reported as closed or frozen. Only returned for Auth Items created via Database Auth.  `database_insights_pass`: The Item's numbers have been verified using Plaid's data sources: the routing and account number match a routing and account number of an account recognized on the Plaid network, and the account is not known by Plaid to be frozen or closed. Only returned for Auth Items created via Database Auth.  `database_insights_pass_with_caution`: The Item's numbers have been verified using Plaid's data sources and have some signal for being valid: the routing and account number were not recognized on the Plaid network, but the routing number is valid and the account number is a potential valid account number for that routing number. Only returned for Auth Items created via Database Auth. 
	VerificationStatus string `json:"verification_status"`
	VerificationInsights AccountVerificationInsights `json:"verification_insights"`
	AdditionalProperties map[string]interface{}
}

type _AuthVerifyResponse AuthVerifyResponse

// NewAuthVerifyResponse instantiates a new AuthVerifyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthVerifyResponse(requestId string, verificationStatus string, verificationInsights AccountVerificationInsights) *AuthVerifyResponse {
	this := AuthVerifyResponse{}
	this.RequestId = requestId
	this.VerificationStatus = verificationStatus
	this.VerificationInsights = verificationInsights
	return &this
}

// NewAuthVerifyResponseWithDefaults instantiates a new AuthVerifyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthVerifyResponseWithDefaults() *AuthVerifyResponse {
	this := AuthVerifyResponse{}
	return &this
}

// GetRequestId returns the RequestId field value
func (o *AuthVerifyResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *AuthVerifyResponse) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *AuthVerifyResponse) SetRequestId(v string) {
	o.RequestId = v
}

// GetItemId returns the ItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuthVerifyResponse) GetItemId() string {
	if o == nil || o.ItemId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemId.Get()
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuthVerifyResponse) GetItemIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemId.Get(), o.ItemId.IsSet()
}

// HasItemId returns a boolean if a field has been set.
func (o *AuthVerifyResponse) HasItemId() bool {
	if o != nil && o.ItemId.IsSet() {
		return true
	}

	return false
}

// SetItemId gets a reference to the given NullableString and assigns it to the ItemId field.
func (o *AuthVerifyResponse) SetItemId(v string) {
	o.ItemId.Set(&v)
}
// SetItemIdNil sets the value for ItemId to be an explicit nil
func (o *AuthVerifyResponse) SetItemIdNil() {
	o.ItemId.Set(nil)
}

// UnsetItemId ensures that no value is present for ItemId, not even an explicit nil
func (o *AuthVerifyResponse) UnsetItemId() {
	o.ItemId.Unset()
}

// GetVerificationStatus returns the VerificationStatus field value
func (o *AuthVerifyResponse) GetVerificationStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VerificationStatus
}

// GetVerificationStatusOk returns a tuple with the VerificationStatus field value
// and a boolean to check if the value has been set.
func (o *AuthVerifyResponse) GetVerificationStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VerificationStatus, true
}

// SetVerificationStatus sets field value
func (o *AuthVerifyResponse) SetVerificationStatus(v string) {
	o.VerificationStatus = v
}

// GetVerificationInsights returns the VerificationInsights field value
func (o *AuthVerifyResponse) GetVerificationInsights() AccountVerificationInsights {
	if o == nil {
		var ret AccountVerificationInsights
		return ret
	}

	return o.VerificationInsights
}

// GetVerificationInsightsOk returns a tuple with the VerificationInsights field value
// and a boolean to check if the value has been set.
func (o *AuthVerifyResponse) GetVerificationInsightsOk() (*AccountVerificationInsights, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VerificationInsights, true
}

// SetVerificationInsights sets field value
func (o *AuthVerifyResponse) SetVerificationInsights(v AccountVerificationInsights) {
	o.VerificationInsights = v
}

func (o AuthVerifyResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["request_id"] = o.RequestId
	}
	if o.ItemId.IsSet() {
		toSerialize["item_id"] = o.ItemId.Get()
	}
	if true {
		toSerialize["verification_status"] = o.VerificationStatus
	}
	if true {
		toSerialize["verification_insights"] = o.VerificationInsights
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AuthVerifyResponse) UnmarshalJSON(bytes []byte) (err error) {
	varAuthVerifyResponse := _AuthVerifyResponse{}

	if err = json.Unmarshal(bytes, &varAuthVerifyResponse); err == nil {
		*o = AuthVerifyResponse(varAuthVerifyResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "request_id")
		delete(additionalProperties, "item_id")
		delete(additionalProperties, "verification_status")
		delete(additionalProperties, "verification_insights")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthVerifyResponse struct {
	value *AuthVerifyResponse
	isSet bool
}

func (v NullableAuthVerifyResponse) Get() *AuthVerifyResponse {
	return v.value
}

func (v *NullableAuthVerifyResponse) Set(val *AuthVerifyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthVerifyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthVerifyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthVerifyResponse(val *AuthVerifyResponse) *NullableAuthVerifyResponse {
	return &NullableAuthVerifyResponse{value: val, isSet: true}
}

func (v NullableAuthVerifyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthVerifyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


