/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.658.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CraCheckReportGSEOptions Specifies options for creating reports that can be shared with GSEs for mortgage verification.
type CraCheckReportGSEOptions struct {
	// Specifies which types of reports should be made available to GSEs.
	ReportTypes []GSEReportType `json:"report_types"`
}

// NewCraCheckReportGSEOptions instantiates a new CraCheckReportGSEOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCraCheckReportGSEOptions(reportTypes []GSEReportType) *CraCheckReportGSEOptions {
	this := CraCheckReportGSEOptions{}
	this.ReportTypes = reportTypes
	return &this
}

// NewCraCheckReportGSEOptionsWithDefaults instantiates a new CraCheckReportGSEOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCraCheckReportGSEOptionsWithDefaults() *CraCheckReportGSEOptions {
	this := CraCheckReportGSEOptions{}
	return &this
}

// GetReportTypes returns the ReportTypes field value
func (o *CraCheckReportGSEOptions) GetReportTypes() []GSEReportType {
	if o == nil {
		var ret []GSEReportType
		return ret
	}

	return o.ReportTypes
}

// GetReportTypesOk returns a tuple with the ReportTypes field value
// and a boolean to check if the value has been set.
func (o *CraCheckReportGSEOptions) GetReportTypesOk() (*[]GSEReportType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ReportTypes, true
}

// SetReportTypes sets field value
func (o *CraCheckReportGSEOptions) SetReportTypes(v []GSEReportType) {
	o.ReportTypes = v
}

func (o CraCheckReportGSEOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["report_types"] = o.ReportTypes
	}
	return json.Marshal(toSerialize)
}

type NullableCraCheckReportGSEOptions struct {
	value *CraCheckReportGSEOptions
	isSet bool
}

func (v NullableCraCheckReportGSEOptions) Get() *CraCheckReportGSEOptions {
	return v.value
}

func (v *NullableCraCheckReportGSEOptions) Set(val *CraCheckReportGSEOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableCraCheckReportGSEOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableCraCheckReportGSEOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraCheckReportGSEOptions(val *CraCheckReportGSEOptions) *NullableCraCheckReportGSEOptions {
	return &NullableCraCheckReportGSEOptions{value: val, isSet: true}
}

func (v NullableCraCheckReportGSEOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraCheckReportGSEOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


