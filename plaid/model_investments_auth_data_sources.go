/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// InvestmentsAuthDataSources Object with metadata pertaining to the source of data for the account numbers, owners, and holdings that are returned.
type InvestmentsAuthDataSources struct {
	Numbers *DataSources `json:"numbers,omitempty"`
	Owners *DataSources `json:"owners,omitempty"`
	Holdings *DataSources `json:"holdings,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InvestmentsAuthDataSources InvestmentsAuthDataSources

// NewInvestmentsAuthDataSources instantiates a new InvestmentsAuthDataSources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvestmentsAuthDataSources() *InvestmentsAuthDataSources {
	this := InvestmentsAuthDataSources{}
	return &this
}

// NewInvestmentsAuthDataSourcesWithDefaults instantiates a new InvestmentsAuthDataSources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvestmentsAuthDataSourcesWithDefaults() *InvestmentsAuthDataSources {
	this := InvestmentsAuthDataSources{}
	return &this
}

// GetNumbers returns the Numbers field value if set, zero value otherwise.
func (o *InvestmentsAuthDataSources) GetNumbers() DataSources {
	if o == nil || o.Numbers == nil {
		var ret DataSources
		return ret
	}
	return *o.Numbers
}

// GetNumbersOk returns a tuple with the Numbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentsAuthDataSources) GetNumbersOk() (*DataSources, bool) {
	if o == nil || o.Numbers == nil {
		return nil, false
	}
	return o.Numbers, true
}

// HasNumbers returns a boolean if a field has been set.
func (o *InvestmentsAuthDataSources) HasNumbers() bool {
	if o != nil && o.Numbers != nil {
		return true
	}

	return false
}

// SetNumbers gets a reference to the given DataSources and assigns it to the Numbers field.
func (o *InvestmentsAuthDataSources) SetNumbers(v DataSources) {
	o.Numbers = &v
}

// GetOwners returns the Owners field value if set, zero value otherwise.
func (o *InvestmentsAuthDataSources) GetOwners() DataSources {
	if o == nil || o.Owners == nil {
		var ret DataSources
		return ret
	}
	return *o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentsAuthDataSources) GetOwnersOk() (*DataSources, bool) {
	if o == nil || o.Owners == nil {
		return nil, false
	}
	return o.Owners, true
}

// HasOwners returns a boolean if a field has been set.
func (o *InvestmentsAuthDataSources) HasOwners() bool {
	if o != nil && o.Owners != nil {
		return true
	}

	return false
}

// SetOwners gets a reference to the given DataSources and assigns it to the Owners field.
func (o *InvestmentsAuthDataSources) SetOwners(v DataSources) {
	o.Owners = &v
}

// GetHoldings returns the Holdings field value if set, zero value otherwise.
func (o *InvestmentsAuthDataSources) GetHoldings() DataSources {
	if o == nil || o.Holdings == nil {
		var ret DataSources
		return ret
	}
	return *o.Holdings
}

// GetHoldingsOk returns a tuple with the Holdings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentsAuthDataSources) GetHoldingsOk() (*DataSources, bool) {
	if o == nil || o.Holdings == nil {
		return nil, false
	}
	return o.Holdings, true
}

// HasHoldings returns a boolean if a field has been set.
func (o *InvestmentsAuthDataSources) HasHoldings() bool {
	if o != nil && o.Holdings != nil {
		return true
	}

	return false
}

// SetHoldings gets a reference to the given DataSources and assigns it to the Holdings field.
func (o *InvestmentsAuthDataSources) SetHoldings(v DataSources) {
	o.Holdings = &v
}

func (o InvestmentsAuthDataSources) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Numbers != nil {
		toSerialize["numbers"] = o.Numbers
	}
	if o.Owners != nil {
		toSerialize["owners"] = o.Owners
	}
	if o.Holdings != nil {
		toSerialize["holdings"] = o.Holdings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *InvestmentsAuthDataSources) UnmarshalJSON(bytes []byte) (err error) {
	varInvestmentsAuthDataSources := _InvestmentsAuthDataSources{}

	if err = json.Unmarshal(bytes, &varInvestmentsAuthDataSources); err == nil {
		*o = InvestmentsAuthDataSources(varInvestmentsAuthDataSources)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "numbers")
		delete(additionalProperties, "owners")
		delete(additionalProperties, "holdings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInvestmentsAuthDataSources struct {
	value *InvestmentsAuthDataSources
	isSet bool
}

func (v NullableInvestmentsAuthDataSources) Get() *InvestmentsAuthDataSources {
	return v.value
}

func (v *NullableInvestmentsAuthDataSources) Set(val *InvestmentsAuthDataSources) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestmentsAuthDataSources) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestmentsAuthDataSources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestmentsAuthDataSources(val *InvestmentsAuthDataSources) *NullableInvestmentsAuthDataSources {
	return &NullableInvestmentsAuthDataSources{value: val, isSet: true}
}

func (v NullableInvestmentsAuthDataSources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestmentsAuthDataSources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


