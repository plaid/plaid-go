/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.385.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// TransferDocumentPurpose Specifies the purpose of the uploaded file.  `\"DUE_DILIGENCE\"` - The transfer due diligence document of the originator. The size of the document should be less than 20MB. Supported file extension: .pdf, .docx, .doc.
type TransferDocumentPurpose string

var _ = fmt.Printf

// List of TransferDocumentPurpose
const (
	TRANSFERDOCUMENTPURPOSE_DUE_DILIGENCE TransferDocumentPurpose = "DUE_DILIGENCE"
)

var allowedTransferDocumentPurposeEnumValues = []TransferDocumentPurpose{
	"DUE_DILIGENCE",
}

func (v *TransferDocumentPurpose) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := TransferDocumentPurpose(value)


	*v = enumTypeValue
	return nil
}

// NewTransferDocumentPurposeFromValue returns a pointer to a valid TransferDocumentPurpose
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferDocumentPurposeFromValue(v string) (*TransferDocumentPurpose, error) {
	ev := TransferDocumentPurpose(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferDocumentPurpose) IsValid() bool {
	for _, existing := range allowedTransferDocumentPurposeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferDocumentPurpose value
func (v TransferDocumentPurpose) Ptr() *TransferDocumentPurpose {
	return &v
}

type NullableTransferDocumentPurpose struct {
	value *TransferDocumentPurpose
	isSet bool
}

func (v NullableTransferDocumentPurpose) Get() *TransferDocumentPurpose {
	return v.value
}

func (v *NullableTransferDocumentPurpose) Set(val *TransferDocumentPurpose) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferDocumentPurpose) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferDocumentPurpose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferDocumentPurpose(val *TransferDocumentPurpose) *NullableTransferDocumentPurpose {
	return &NullableTransferDocumentPurpose{value: val, isSet: true}
}

func (v NullableTransferDocumentPurpose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferDocumentPurpose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

