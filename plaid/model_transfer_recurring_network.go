/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.508.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// TransferRecurringNetwork Networks eligible for recurring transfers.
type TransferRecurringNetwork string

var _ = fmt.Printf

// List of TransferRecurringNetwork
const (
	TRANSFERRECURRINGNETWORK_ACH TransferRecurringNetwork = "ach"
	TRANSFERRECURRINGNETWORK_SAME_DAY_ACH TransferRecurringNetwork = "same-day-ach"
	TRANSFERRECURRINGNETWORK_RTP TransferRecurringNetwork = "rtp"
)

var allowedTransferRecurringNetworkEnumValues = []TransferRecurringNetwork{
	"ach",
	"same-day-ach",
	"rtp",
}

func (v *TransferRecurringNetwork) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := TransferRecurringNetwork(value)


	*v = enumTypeValue
	return nil
}

// NewTransferRecurringNetworkFromValue returns a pointer to a valid TransferRecurringNetwork
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferRecurringNetworkFromValue(v string) (*TransferRecurringNetwork, error) {
	ev := TransferRecurringNetwork(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferRecurringNetwork) IsValid() bool {
	for _, existing := range allowedTransferRecurringNetworkEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferRecurringNetwork value
func (v TransferRecurringNetwork) Ptr() *TransferRecurringNetwork {
	return &v
}

type NullableTransferRecurringNetwork struct {
	value *TransferRecurringNetwork
	isSet bool
}

func (v NullableTransferRecurringNetwork) Get() *TransferRecurringNetwork {
	return v.value
}

func (v *NullableTransferRecurringNetwork) Set(val *TransferRecurringNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferRecurringNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferRecurringNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferRecurringNetwork(val *TransferRecurringNetwork) *NullableTransferRecurringNetwork {
	return &NullableTransferRecurringNetwork{value: val, isSet: true}
}

func (v NullableTransferRecurringNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferRecurringNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

