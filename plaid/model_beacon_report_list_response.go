/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BeaconReportListResponse The response schema for `/beacon/report/list`
type BeaconReportListResponse struct {
	BeaconReports []BeaconReport `json:"beacon_reports"`
	// An identifier that determines which page of results you receive.
	NextCursor NullableString `json:"next_cursor"`
	// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
	RequestId string `json:"request_id"`
	AdditionalProperties map[string]interface{}
}

type _BeaconReportListResponse BeaconReportListResponse

// NewBeaconReportListResponse instantiates a new BeaconReportListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconReportListResponse(beaconReports []BeaconReport, nextCursor NullableString, requestId string) *BeaconReportListResponse {
	this := BeaconReportListResponse{}
	this.BeaconReports = beaconReports
	this.NextCursor = nextCursor
	this.RequestId = requestId
	return &this
}

// NewBeaconReportListResponseWithDefaults instantiates a new BeaconReportListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconReportListResponseWithDefaults() *BeaconReportListResponse {
	this := BeaconReportListResponse{}
	return &this
}

// GetBeaconReports returns the BeaconReports field value
func (o *BeaconReportListResponse) GetBeaconReports() []BeaconReport {
	if o == nil {
		var ret []BeaconReport
		return ret
	}

	return o.BeaconReports
}

// GetBeaconReportsOk returns a tuple with the BeaconReports field value
// and a boolean to check if the value has been set.
func (o *BeaconReportListResponse) GetBeaconReportsOk() (*[]BeaconReport, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BeaconReports, true
}

// SetBeaconReports sets field value
func (o *BeaconReportListResponse) SetBeaconReports(v []BeaconReport) {
	o.BeaconReports = v
}

// GetNextCursor returns the NextCursor field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BeaconReportListResponse) GetNextCursor() string {
	if o == nil || o.NextCursor.Get() == nil {
		var ret string
		return ret
	}

	return *o.NextCursor.Get()
}

// GetNextCursorOk returns a tuple with the NextCursor field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BeaconReportListResponse) GetNextCursorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NextCursor.Get(), o.NextCursor.IsSet()
}

// SetNextCursor sets field value
func (o *BeaconReportListResponse) SetNextCursor(v string) {
	o.NextCursor.Set(&v)
}

// GetRequestId returns the RequestId field value
func (o *BeaconReportListResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *BeaconReportListResponse) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *BeaconReportListResponse) SetRequestId(v string) {
	o.RequestId = v
}

func (o BeaconReportListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["beacon_reports"] = o.BeaconReports
	}
	if true {
		toSerialize["next_cursor"] = o.NextCursor.Get()
	}
	if true {
		toSerialize["request_id"] = o.RequestId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BeaconReportListResponse) UnmarshalJSON(bytes []byte) (err error) {
	varBeaconReportListResponse := _BeaconReportListResponse{}

	if err = json.Unmarshal(bytes, &varBeaconReportListResponse); err == nil {
		*o = BeaconReportListResponse(varBeaconReportListResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "beacon_reports")
		delete(additionalProperties, "next_cursor")
		delete(additionalProperties, "request_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBeaconReportListResponse struct {
	value *BeaconReportListResponse
	isSet bool
}

func (v NullableBeaconReportListResponse) Get() *BeaconReportListResponse {
	return v.value
}

func (v *NullableBeaconReportListResponse) Set(val *BeaconReportListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconReportListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconReportListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconReportListResponse(val *BeaconReportListResponse) *NullableBeaconReportListResponse {
	return &NullableBeaconReportListResponse{value: val, isSet: true}
}

func (v NullableBeaconReportListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconReportListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


