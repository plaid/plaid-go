/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.128.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// IdentityVerificationStatus The status of this Identity Verification attempt.   `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.  `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template  `failed` - The user failed one or more steps in the session and was told to contact support.  `expired` - The Identity Verification attempt was active for more than 48 hours without being completed and was automatically marked as expired.  `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.  `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
type IdentityVerificationStatus string

// List of IdentityVerificationStatus
const (
	IDENTITYVERIFICATIONSTATUS_ACTIVE IdentityVerificationStatus = "active"
	IDENTITYVERIFICATIONSTATUS_SUCCESS IdentityVerificationStatus = "success"
	IDENTITYVERIFICATIONSTATUS_FAILED IdentityVerificationStatus = "failed"
	IDENTITYVERIFICATIONSTATUS_EXPIRED IdentityVerificationStatus = "expired"
	IDENTITYVERIFICATIONSTATUS_CANCELED IdentityVerificationStatus = "canceled"
	IDENTITYVERIFICATIONSTATUS_PENDING_REVIEW IdentityVerificationStatus = "pending_review"
)

var allowedIdentityVerificationStatusEnumValues = []IdentityVerificationStatus{
	"active",
	"success",
	"failed",
	"expired",
	"canceled",
	"pending_review",
}

func (v *IdentityVerificationStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentityVerificationStatus(value)
	for _, existing := range allowedIdentityVerificationStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentityVerificationStatus", value)
}

// NewIdentityVerificationStatusFromValue returns a pointer to a valid IdentityVerificationStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentityVerificationStatusFromValue(v string) (*IdentityVerificationStatus, error) {
	ev := IdentityVerificationStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentityVerificationStatus: valid values are %v", v, allowedIdentityVerificationStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentityVerificationStatus) IsValid() bool {
	for _, existing := range allowedIdentityVerificationStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentityVerificationStatus value
func (v IdentityVerificationStatus) Ptr() *IdentityVerificationStatus {
	return &v
}

type NullableIdentityVerificationStatus struct {
	value *IdentityVerificationStatus
	isSet bool
}

func (v NullableIdentityVerificationStatus) Get() *IdentityVerificationStatus {
	return v.value
}

func (v *NullableIdentityVerificationStatus) Set(val *IdentityVerificationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityVerificationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityVerificationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityVerificationStatus(val *IdentityVerificationStatus) *NullableIdentityVerificationStatus {
	return &NullableIdentityVerificationStatus{value: val, isSet: true}
}

func (v NullableIdentityVerificationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityVerificationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

