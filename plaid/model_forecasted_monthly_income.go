/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.565.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// ForecastedMonthlyIncome An object representing the predicted average monthly net income amount. This amount reflects the funds deposited into the account and may not include any withheld income such as taxes or other payroll deductions
type ForecastedMonthlyIncome struct {
	// The forecasted monthly income at the time of subscription
	BaselineAmount float32 `json:"baseline_amount"`
	// The current forecasted monthly income
	CurrentAmount float32 `json:"current_amount"`
	AdditionalProperties map[string]interface{}
}

type _ForecastedMonthlyIncome ForecastedMonthlyIncome

// NewForecastedMonthlyIncome instantiates a new ForecastedMonthlyIncome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForecastedMonthlyIncome(baselineAmount float32, currentAmount float32) *ForecastedMonthlyIncome {
	this := ForecastedMonthlyIncome{}
	this.BaselineAmount = baselineAmount
	this.CurrentAmount = currentAmount
	return &this
}

// NewForecastedMonthlyIncomeWithDefaults instantiates a new ForecastedMonthlyIncome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForecastedMonthlyIncomeWithDefaults() *ForecastedMonthlyIncome {
	this := ForecastedMonthlyIncome{}
	return &this
}

// GetBaselineAmount returns the BaselineAmount field value
func (o *ForecastedMonthlyIncome) GetBaselineAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaselineAmount
}

// GetBaselineAmountOk returns a tuple with the BaselineAmount field value
// and a boolean to check if the value has been set.
func (o *ForecastedMonthlyIncome) GetBaselineAmountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BaselineAmount, true
}

// SetBaselineAmount sets field value
func (o *ForecastedMonthlyIncome) SetBaselineAmount(v float32) {
	o.BaselineAmount = v
}

// GetCurrentAmount returns the CurrentAmount field value
func (o *ForecastedMonthlyIncome) GetCurrentAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CurrentAmount
}

// GetCurrentAmountOk returns a tuple with the CurrentAmount field value
// and a boolean to check if the value has been set.
func (o *ForecastedMonthlyIncome) GetCurrentAmountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CurrentAmount, true
}

// SetCurrentAmount sets field value
func (o *ForecastedMonthlyIncome) SetCurrentAmount(v float32) {
	o.CurrentAmount = v
}

func (o ForecastedMonthlyIncome) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["baseline_amount"] = o.BaselineAmount
	}
	if true {
		toSerialize["current_amount"] = o.CurrentAmount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ForecastedMonthlyIncome) UnmarshalJSON(bytes []byte) (err error) {
	varForecastedMonthlyIncome := _ForecastedMonthlyIncome{}

	if err = json.Unmarshal(bytes, &varForecastedMonthlyIncome); err == nil {
		*o = ForecastedMonthlyIncome(varForecastedMonthlyIncome)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "baseline_amount")
		delete(additionalProperties, "current_amount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableForecastedMonthlyIncome struct {
	value *ForecastedMonthlyIncome
	isSet bool
}

func (v NullableForecastedMonthlyIncome) Get() *ForecastedMonthlyIncome {
	return v.value
}

func (v *NullableForecastedMonthlyIncome) Set(val *ForecastedMonthlyIncome) {
	v.value = val
	v.isSet = true
}

func (v NullableForecastedMonthlyIncome) IsSet() bool {
	return v.isSet
}

func (v *NullableForecastedMonthlyIncome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForecastedMonthlyIncome(val *ForecastedMonthlyIncome) *NullableForecastedMonthlyIncome {
	return &NullableForecastedMonthlyIncome{value: val, isSet: true}
}

func (v NullableForecastedMonthlyIncome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForecastedMonthlyIncome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


