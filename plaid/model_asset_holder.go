/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.379.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// AssetHolder Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
type AssetHolder struct {
	NAME AssetHolderName `json:"NAME"`
	AdditionalProperties map[string]interface{}
}

type _AssetHolder AssetHolder

// NewAssetHolder instantiates a new AssetHolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetHolder(nAME AssetHolderName) *AssetHolder {
	this := AssetHolder{}
	this.NAME = nAME
	return &this
}

// NewAssetHolderWithDefaults instantiates a new AssetHolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetHolderWithDefaults() *AssetHolder {
	this := AssetHolder{}
	return &this
}

// GetNAME returns the NAME field value
func (o *AssetHolder) GetNAME() AssetHolderName {
	if o == nil {
		var ret AssetHolderName
		return ret
	}

	return o.NAME
}

// GetNAMEOk returns a tuple with the NAME field value
// and a boolean to check if the value has been set.
func (o *AssetHolder) GetNAMEOk() (*AssetHolderName, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NAME, true
}

// SetNAME sets field value
func (o *AssetHolder) SetNAME(v AssetHolderName) {
	o.NAME = v
}

func (o AssetHolder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["NAME"] = o.NAME
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AssetHolder) UnmarshalJSON(bytes []byte) (err error) {
	varAssetHolder := _AssetHolder{}

	if err = json.Unmarshal(bytes, &varAssetHolder); err == nil {
		*o = AssetHolder(varAssetHolder)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "NAME")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetHolder struct {
	value *AssetHolder
	isSet bool
}

func (v NullableAssetHolder) Get() *AssetHolder {
	return v.value
}

func (v *NullableAssetHolder) Set(val *AssetHolder) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetHolder) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetHolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetHolder(val *AssetHolder) *NullableAssetHolder {
	return &NullableAssetHolder{value: val, isSet: true}
}

func (v NullableAssetHolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetHolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


