/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// LedgerEventSourceType Source of the ledger event.  `\"TRANSFER\"` - The source of the ledger event is a transfer `\"SWEEP\"` - The source of the ledger event is a sweep `\"REFUND\"` - The source of the ledger event is a refund
type LedgerEventSourceType string

var _ = fmt.Printf

// List of LedgerEventSourceType
const (
	LEDGEREVENTSOURCETYPE_TRANSFER LedgerEventSourceType = "TRANSFER"
	LEDGEREVENTSOURCETYPE_SWEEP LedgerEventSourceType = "SWEEP"
	LEDGEREVENTSOURCETYPE_REFUND LedgerEventSourceType = "REFUND"
)

var allowedLedgerEventSourceTypeEnumValues = []LedgerEventSourceType{
	"TRANSFER",
	"SWEEP",
	"REFUND",
}

func (v *LedgerEventSourceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := LedgerEventSourceType(value)


	*v = enumTypeValue
	return nil
}

// NewLedgerEventSourceTypeFromValue returns a pointer to a valid LedgerEventSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLedgerEventSourceTypeFromValue(v string) (*LedgerEventSourceType, error) {
	ev := LedgerEventSourceType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LedgerEventSourceType) IsValid() bool {
	for _, existing := range allowedLedgerEventSourceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LedgerEventSourceType value
func (v LedgerEventSourceType) Ptr() *LedgerEventSourceType {
	return &v
}

type NullableLedgerEventSourceType struct {
	value *LedgerEventSourceType
	isSet bool
}

func (v NullableLedgerEventSourceType) Get() *LedgerEventSourceType {
	return v.value
}

func (v *NullableLedgerEventSourceType) Set(val *LedgerEventSourceType) {
	v.value = val
	v.isSet = true
}

func (v NullableLedgerEventSourceType) IsSet() bool {
	return v.isSet
}

func (v *NullableLedgerEventSourceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLedgerEventSourceType(val *LedgerEventSourceType) *NullableLedgerEventSourceType {
	return &NullableLedgerEventSourceType{value: val, isSet: true}
}

func (v NullableLedgerEventSourceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLedgerEventSourceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

