/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.205.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// TransactionFrequency Best guess frequency of transactions of the end customer.
type TransactionFrequency string

var _ = fmt.Printf

// List of TransactionFrequency
const (
	TRANSACTIONFREQUENCY_ONCE_PER_MONTH TransactionFrequency = "once_per_month"
	TRANSACTIONFREQUENCY_TWICE_PER_MONTH TransactionFrequency = "twice_per_month"
	TRANSACTIONFREQUENCY_FOUR_TIMES_PER_MONTH TransactionFrequency = "four_times_per_month"
	TRANSACTIONFREQUENCY_DAILY TransactionFrequency = "daily"
)

var allowedTransactionFrequencyEnumValues = []TransactionFrequency{
	"once_per_month",
	"twice_per_month",
	"four_times_per_month",
	"daily",
}

func (v *TransactionFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := TransactionFrequency(value)


	*v = enumTypeValue
	return nil
}

// NewTransactionFrequencyFromValue returns a pointer to a valid TransactionFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionFrequencyFromValue(v string) (*TransactionFrequency, error) {
	ev := TransactionFrequency(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionFrequency) IsValid() bool {
	for _, existing := range allowedTransactionFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionFrequency value
func (v TransactionFrequency) Ptr() *TransactionFrequency {
	return &v
}

type NullableTransactionFrequency struct {
	value *TransactionFrequency
	isSet bool
}

func (v NullableTransactionFrequency) Get() *TransactionFrequency {
	return v.value
}

func (v *NullableTransactionFrequency) Set(val *TransactionFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionFrequency(val *TransactionFrequency) *NullableTransactionFrequency {
	return &NullableTransactionFrequency{value: val, isSet: true}
}

func (v NullableTransactionFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

