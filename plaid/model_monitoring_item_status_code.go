/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// MonitoringItemStatusCode Enum for the status of the Item's insights
type MonitoringItemStatusCode string

var _ = fmt.Printf

// List of MonitoringItemStatusCode
const (
	MONITORINGITEMSTATUSCODE_AVAILABLE MonitoringItemStatusCode = "AVAILABLE"
	MONITORINGITEMSTATUSCODE_FAILED MonitoringItemStatusCode = "FAILED"
	MONITORINGITEMSTATUSCODE_PENDING MonitoringItemStatusCode = "PENDING"
	MONITORINGITEMSTATUSCODE_ITEM_NOT_SUPPORTED MonitoringItemStatusCode = "ITEM_NOT_SUPPORTED"
	MONITORINGITEMSTATUSCODE_ITEM_LOGIN_REQUIRED MonitoringItemStatusCode = "ITEM_LOGIN_REQUIRED"
)

var allowedMonitoringItemStatusCodeEnumValues = []MonitoringItemStatusCode{
	"AVAILABLE",
	"FAILED",
	"PENDING",
	"ITEM_NOT_SUPPORTED",
	"ITEM_LOGIN_REQUIRED",
}

func (v *MonitoringItemStatusCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := MonitoringItemStatusCode(value)


	*v = enumTypeValue
	return nil
}

// NewMonitoringItemStatusCodeFromValue returns a pointer to a valid MonitoringItemStatusCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMonitoringItemStatusCodeFromValue(v string) (*MonitoringItemStatusCode, error) {
	ev := MonitoringItemStatusCode(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MonitoringItemStatusCode) IsValid() bool {
	for _, existing := range allowedMonitoringItemStatusCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MonitoringItemStatusCode value
func (v MonitoringItemStatusCode) Ptr() *MonitoringItemStatusCode {
	return &v
}

type NullableMonitoringItemStatusCode struct {
	value *MonitoringItemStatusCode
	isSet bool
}

func (v NullableMonitoringItemStatusCode) Get() *MonitoringItemStatusCode {
	return v.value
}

func (v *NullableMonitoringItemStatusCode) Set(val *MonitoringItemStatusCode) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringItemStatusCode) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringItemStatusCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringItemStatusCode(val *MonitoringItemStatusCode) *NullableMonitoringItemStatusCode {
	return &NullableMonitoringItemStatusCode{value: val, isSet: true}
}

func (v NullableMonitoringItemStatusCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringItemStatusCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

