/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.633.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// RuleResult The result of the rule that was triggered for this transaction.  `ACCEPT`: Accept the transaction for processing. `REROUTE`: Reroute the transaction to a different payment method. `REVIEW`: Review the transaction before proceeding.
type RuleResult string

var _ = fmt.Printf

// List of RuleResult
const (
	RULERESULT_ACCEPT RuleResult = "ACCEPT"
	RULERESULT_REROUTE RuleResult = "REROUTE"
	RULERESULT_REVIEW RuleResult = "REVIEW"
)

var allowedRuleResultEnumValues = []RuleResult{
	"ACCEPT",
	"REROUTE",
	"REVIEW",
}

func (v *RuleResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := RuleResult(value)


	*v = enumTypeValue
	return nil
}

// NewRuleResultFromValue returns a pointer to a valid RuleResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRuleResultFromValue(v string) (*RuleResult, error) {
	ev := RuleResult(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RuleResult) IsValid() bool {
	for _, existing := range allowedRuleResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RuleResult value
func (v RuleResult) Ptr() *RuleResult {
	return &v
}

type NullableRuleResult struct {
	value *RuleResult
	isSet bool
}

func (v NullableRuleResult) Get() *RuleResult {
	return v.value
}

func (v *NullableRuleResult) Set(val *RuleResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleResult(val *RuleResult) *NullableRuleResult {
	return &NullableRuleResult{value: val, isSet: true}
}

func (v NullableRuleResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

