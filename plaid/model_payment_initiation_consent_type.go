/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// PaymentInitiationConsentType Payment consent type. Defines possible use case for payments made with the given consent.  `SWEEPING`: Allows moving money between accounts owned by the same user.  `COMMERCIAL`: Allows initiating payments from the user's account to third parties.
type PaymentInitiationConsentType string

var _ = fmt.Printf

// List of PaymentInitiationConsentType
const (
	PAYMENTINITIATIONCONSENTTYPE_SWEEPING PaymentInitiationConsentType = "SWEEPING"
	PAYMENTINITIATIONCONSENTTYPE_COMMERCIAL PaymentInitiationConsentType = "COMMERCIAL"
)

var allowedPaymentInitiationConsentTypeEnumValues = []PaymentInitiationConsentType{
	"SWEEPING",
	"COMMERCIAL",
}

func (v *PaymentInitiationConsentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := PaymentInitiationConsentType(value)


	*v = enumTypeValue
	return nil
}

// NewPaymentInitiationConsentTypeFromValue returns a pointer to a valid PaymentInitiationConsentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentInitiationConsentTypeFromValue(v string) (*PaymentInitiationConsentType, error) {
	ev := PaymentInitiationConsentType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentInitiationConsentType) IsValid() bool {
	for _, existing := range allowedPaymentInitiationConsentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentInitiationConsentType value
func (v PaymentInitiationConsentType) Ptr() *PaymentInitiationConsentType {
	return &v
}

type NullablePaymentInitiationConsentType struct {
	value *PaymentInitiationConsentType
	isSet bool
}

func (v NullablePaymentInitiationConsentType) Get() *PaymentInitiationConsentType {
	return v.value
}

func (v *NullablePaymentInitiationConsentType) Set(val *PaymentInitiationConsentType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInitiationConsentType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInitiationConsentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInitiationConsentType(val *PaymentInitiationConsentType) *NullablePaymentInitiationConsentType {
	return &NullablePaymentInitiationConsentType{value: val, isSet: true}
}

func (v NullablePaymentInitiationConsentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInitiationConsentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

