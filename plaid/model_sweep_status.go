/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.410.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// SweepStatus The status of a sweep transfer  `\"pending\"` - The sweep is currently pending `\"posted\"` - The sweep has been posted `\"settled\"` - The sweep has settled `\"returned\"` - The sweep has been returned `\"failed\"` - The sweep has failed
type SweepStatus string

var _ = fmt.Printf

// List of SweepStatus
const (
	SWEEPSTATUS_PENDING SweepStatus = "pending"
	SWEEPSTATUS_POSTED SweepStatus = "posted"
	SWEEPSTATUS_SETTLED SweepStatus = "settled"
	SWEEPSTATUS_RETURNED SweepStatus = "returned"
	SWEEPSTATUS_FAILED SweepStatus = "failed"
	SWEEPSTATUS_NULL SweepStatus = "null"
)

var allowedSweepStatusEnumValues = []SweepStatus{
	"pending",
	"posted",
	"settled",
	"returned",
	"failed",
	"null",
}

func (v *SweepStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := SweepStatus(value)


	*v = enumTypeValue
	return nil
}

// NewSweepStatusFromValue returns a pointer to a valid SweepStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSweepStatusFromValue(v string) (*SweepStatus, error) {
	ev := SweepStatus(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SweepStatus) IsValid() bool {
	for _, existing := range allowedSweepStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SweepStatus value
func (v SweepStatus) Ptr() *SweepStatus {
	return &v
}

type NullableSweepStatus struct {
	value *SweepStatus
	isSet bool
}

func (v NullableSweepStatus) Get() *SweepStatus {
	return v.value
}

func (v *NullableSweepStatus) Set(val *SweepStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSweepStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSweepStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSweepStatus(val *SweepStatus) *NullableSweepStatus {
	return &NullableSweepStatus{value: val, isSet: true}
}

func (v NullableSweepStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSweepStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

