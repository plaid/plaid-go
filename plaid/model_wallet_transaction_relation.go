/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// WalletTransactionRelation Transactions are related when they have a logical connection.  For example, a `PAYOUT` transaction can be returned by the sender, creating a `RETURN` transaction. Each `PAYOUT` transaction can have at most one corresponding `RETURN` transaction in case of reversal.  These relationships are bi-directional, meaning that both entities have references to each other. For instance, when a transaction of type RETURN occurs, it is linked to the original transaction being returned. Likewise, the original transaction has a reference back to the RETURN transaction that represents the return.   This field is only populated for transactions of type `RETURN`, `FUNDS_SWEEP`, `REFUND` and `PAYOUT`.  The relationship between a `PIS_PAY_IN` payment and its corresponding `REFUND` transactions is only available through `refund_ids` property in the payment object. See[`/payment_initiation/payment/get`](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-get-response-refund-ids).
type WalletTransactionRelation struct {
	// The ID of the related transaction.
	Id *string `json:"id,omitempty"`
	// The type of the transaction.
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WalletTransactionRelation WalletTransactionRelation

// NewWalletTransactionRelation instantiates a new WalletTransactionRelation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletTransactionRelation() *WalletTransactionRelation {
	this := WalletTransactionRelation{}
	return &this
}

// NewWalletTransactionRelationWithDefaults instantiates a new WalletTransactionRelation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletTransactionRelationWithDefaults() *WalletTransactionRelation {
	this := WalletTransactionRelation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WalletTransactionRelation) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletTransactionRelation) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WalletTransactionRelation) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WalletTransactionRelation) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WalletTransactionRelation) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletTransactionRelation) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WalletTransactionRelation) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WalletTransactionRelation) SetType(v string) {
	o.Type = &v
}

func (o WalletTransactionRelation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *WalletTransactionRelation) UnmarshalJSON(bytes []byte) (err error) {
	varWalletTransactionRelation := _WalletTransactionRelation{}

	if err = json.Unmarshal(bytes, &varWalletTransactionRelation); err == nil {
		*o = WalletTransactionRelation(varWalletTransactionRelation)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWalletTransactionRelation struct {
	value *WalletTransactionRelation
	isSet bool
}

func (v NullableWalletTransactionRelation) Get() *WalletTransactionRelation {
	return v.value
}

func (v *NullableWalletTransactionRelation) Set(val *WalletTransactionRelation) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletTransactionRelation) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletTransactionRelation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletTransactionRelation(val *WalletTransactionRelation) *NullableWalletTransactionRelation {
	return &NullableWalletTransactionRelation{value: val, isSet: true}
}

func (v NullableWalletTransactionRelation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletTransactionRelation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


