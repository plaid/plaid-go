/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.413.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// SignalInsights Signal insights including scores and attributes. This response is offered as an add-on to `/transfer/authorization/create`. To request access to these fields please contact your Plaid account manager.
type SignalInsights struct {
	Scores *SignalScores `json:"scores,omitempty"`
	// If bank information was not available to be used in the Signal model, this array contains warnings describing why bank data is missing. If you want to receive an API error instead of Signal scores in the case of missing bank data, file a support ticket or contact your Plaid account manager.
	Warnings *[]SignalWarning `json:"warnings,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SignalInsights SignalInsights

// NewSignalInsights instantiates a new SignalInsights object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalInsights() *SignalInsights {
	this := SignalInsights{}
	return &this
}

// NewSignalInsightsWithDefaults instantiates a new SignalInsights object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalInsightsWithDefaults() *SignalInsights {
	this := SignalInsights{}
	return &this
}

// GetScores returns the Scores field value if set, zero value otherwise.
func (o *SignalInsights) GetScores() SignalScores {
	if o == nil || o.Scores == nil {
		var ret SignalScores
		return ret
	}
	return *o.Scores
}

// GetScoresOk returns a tuple with the Scores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalInsights) GetScoresOk() (*SignalScores, bool) {
	if o == nil || o.Scores == nil {
		return nil, false
	}
	return o.Scores, true
}

// HasScores returns a boolean if a field has been set.
func (o *SignalInsights) HasScores() bool {
	if o != nil && o.Scores != nil {
		return true
	}

	return false
}

// SetScores gets a reference to the given SignalScores and assigns it to the Scores field.
func (o *SignalInsights) SetScores(v SignalScores) {
	o.Scores = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *SignalInsights) GetWarnings() []SignalWarning {
	if o == nil || o.Warnings == nil {
		var ret []SignalWarning
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalInsights) GetWarningsOk() (*[]SignalWarning, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *SignalInsights) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []SignalWarning and assigns it to the Warnings field.
func (o *SignalInsights) SetWarnings(v []SignalWarning) {
	o.Warnings = &v
}

func (o SignalInsights) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Scores != nil {
		toSerialize["scores"] = o.Scores
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SignalInsights) UnmarshalJSON(bytes []byte) (err error) {
	varSignalInsights := _SignalInsights{}

	if err = json.Unmarshal(bytes, &varSignalInsights); err == nil {
		*o = SignalInsights(varSignalInsights)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "scores")
		delete(additionalProperties, "warnings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSignalInsights struct {
	value *SignalInsights
	isSet bool
}

func (v NullableSignalInsights) Get() *SignalInsights {
	return v.value
}

func (v *NullableSignalInsights) Set(val *SignalInsights) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalInsights) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalInsights) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalInsights(val *SignalInsights) *NullableSignalInsights {
	return &NullableSignalInsights{value: val, isSet: true}
}

func (v NullableSignalInsights) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalInsights) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


