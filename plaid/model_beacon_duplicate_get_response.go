/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.565.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BeaconDuplicateGetResponse A Beacon Duplicate represents a pair of matching Beacon Users and an analysis of the fields they matched on.
type BeaconDuplicateGetResponse struct {
	// ID of the associated Beacon Duplicate.
	Id string `json:"id"`
	BeaconUser1 BeaconUserRevision `json:"beacon_user1"`
	BeaconUser2 BeaconUserRevision `json:"beacon_user2"`
	Analysis BeaconMatchSummaryAnalysis `json:"analysis"`
	// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
	RequestId string `json:"request_id"`
	AdditionalProperties map[string]interface{}
}

type _BeaconDuplicateGetResponse BeaconDuplicateGetResponse

// NewBeaconDuplicateGetResponse instantiates a new BeaconDuplicateGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconDuplicateGetResponse(id string, beaconUser1 BeaconUserRevision, beaconUser2 BeaconUserRevision, analysis BeaconMatchSummaryAnalysis, requestId string) *BeaconDuplicateGetResponse {
	this := BeaconDuplicateGetResponse{}
	this.Id = id
	this.BeaconUser1 = beaconUser1
	this.BeaconUser2 = beaconUser2
	this.Analysis = analysis
	this.RequestId = requestId
	return &this
}

// NewBeaconDuplicateGetResponseWithDefaults instantiates a new BeaconDuplicateGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconDuplicateGetResponseWithDefaults() *BeaconDuplicateGetResponse {
	this := BeaconDuplicateGetResponse{}
	return &this
}

// GetId returns the Id field value
func (o *BeaconDuplicateGetResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BeaconDuplicateGetResponse) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BeaconDuplicateGetResponse) SetId(v string) {
	o.Id = v
}

// GetBeaconUser1 returns the BeaconUser1 field value
func (o *BeaconDuplicateGetResponse) GetBeaconUser1() BeaconUserRevision {
	if o == nil {
		var ret BeaconUserRevision
		return ret
	}

	return o.BeaconUser1
}

// GetBeaconUser1Ok returns a tuple with the BeaconUser1 field value
// and a boolean to check if the value has been set.
func (o *BeaconDuplicateGetResponse) GetBeaconUser1Ok() (*BeaconUserRevision, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BeaconUser1, true
}

// SetBeaconUser1 sets field value
func (o *BeaconDuplicateGetResponse) SetBeaconUser1(v BeaconUserRevision) {
	o.BeaconUser1 = v
}

// GetBeaconUser2 returns the BeaconUser2 field value
func (o *BeaconDuplicateGetResponse) GetBeaconUser2() BeaconUserRevision {
	if o == nil {
		var ret BeaconUserRevision
		return ret
	}

	return o.BeaconUser2
}

// GetBeaconUser2Ok returns a tuple with the BeaconUser2 field value
// and a boolean to check if the value has been set.
func (o *BeaconDuplicateGetResponse) GetBeaconUser2Ok() (*BeaconUserRevision, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BeaconUser2, true
}

// SetBeaconUser2 sets field value
func (o *BeaconDuplicateGetResponse) SetBeaconUser2(v BeaconUserRevision) {
	o.BeaconUser2 = v
}

// GetAnalysis returns the Analysis field value
func (o *BeaconDuplicateGetResponse) GetAnalysis() BeaconMatchSummaryAnalysis {
	if o == nil {
		var ret BeaconMatchSummaryAnalysis
		return ret
	}

	return o.Analysis
}

// GetAnalysisOk returns a tuple with the Analysis field value
// and a boolean to check if the value has been set.
func (o *BeaconDuplicateGetResponse) GetAnalysisOk() (*BeaconMatchSummaryAnalysis, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Analysis, true
}

// SetAnalysis sets field value
func (o *BeaconDuplicateGetResponse) SetAnalysis(v BeaconMatchSummaryAnalysis) {
	o.Analysis = v
}

// GetRequestId returns the RequestId field value
func (o *BeaconDuplicateGetResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *BeaconDuplicateGetResponse) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *BeaconDuplicateGetResponse) SetRequestId(v string) {
	o.RequestId = v
}

func (o BeaconDuplicateGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["beacon_user1"] = o.BeaconUser1
	}
	if true {
		toSerialize["beacon_user2"] = o.BeaconUser2
	}
	if true {
		toSerialize["analysis"] = o.Analysis
	}
	if true {
		toSerialize["request_id"] = o.RequestId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BeaconDuplicateGetResponse) UnmarshalJSON(bytes []byte) (err error) {
	varBeaconDuplicateGetResponse := _BeaconDuplicateGetResponse{}

	if err = json.Unmarshal(bytes, &varBeaconDuplicateGetResponse); err == nil {
		*o = BeaconDuplicateGetResponse(varBeaconDuplicateGetResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "beacon_user1")
		delete(additionalProperties, "beacon_user2")
		delete(additionalProperties, "analysis")
		delete(additionalProperties, "request_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBeaconDuplicateGetResponse struct {
	value *BeaconDuplicateGetResponse
	isSet bool
}

func (v NullableBeaconDuplicateGetResponse) Get() *BeaconDuplicateGetResponse {
	return v.value
}

func (v *NullableBeaconDuplicateGetResponse) Set(val *BeaconDuplicateGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconDuplicateGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconDuplicateGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconDuplicateGetResponse(val *BeaconDuplicateGetResponse) *NullableBeaconDuplicateGetResponse {
	return &NullableBeaconDuplicateGetResponse{value: val, isSet: true}
}

func (v NullableBeaconDuplicateGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconDuplicateGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


