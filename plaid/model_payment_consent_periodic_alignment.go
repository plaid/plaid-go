/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.128.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// PaymentConsentPeriodicAlignment Where the payment consent period should start.  `CALENDAR`: line up with a calendar.  `CONSENT`: on the date of consent creation.
type PaymentConsentPeriodicAlignment string

// List of PaymentConsentPeriodicAlignment
const (
	PAYMENTCONSENTPERIODICALIGNMENT_CALENDAR PaymentConsentPeriodicAlignment = "CALENDAR"
	PAYMENTCONSENTPERIODICALIGNMENT_CONSENT PaymentConsentPeriodicAlignment = "CONSENT"
)

var allowedPaymentConsentPeriodicAlignmentEnumValues = []PaymentConsentPeriodicAlignment{
	"CALENDAR",
	"CONSENT",
}

func (v *PaymentConsentPeriodicAlignment) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentConsentPeriodicAlignment(value)
	for _, existing := range allowedPaymentConsentPeriodicAlignmentEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentConsentPeriodicAlignment", value)
}

// NewPaymentConsentPeriodicAlignmentFromValue returns a pointer to a valid PaymentConsentPeriodicAlignment
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentConsentPeriodicAlignmentFromValue(v string) (*PaymentConsentPeriodicAlignment, error) {
	ev := PaymentConsentPeriodicAlignment(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentConsentPeriodicAlignment: valid values are %v", v, allowedPaymentConsentPeriodicAlignmentEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentConsentPeriodicAlignment) IsValid() bool {
	for _, existing := range allowedPaymentConsentPeriodicAlignmentEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentConsentPeriodicAlignment value
func (v PaymentConsentPeriodicAlignment) Ptr() *PaymentConsentPeriodicAlignment {
	return &v
}

type NullablePaymentConsentPeriodicAlignment struct {
	value *PaymentConsentPeriodicAlignment
	isSet bool
}

func (v NullablePaymentConsentPeriodicAlignment) Get() *PaymentConsentPeriodicAlignment {
	return v.value
}

func (v *NullablePaymentConsentPeriodicAlignment) Set(val *PaymentConsentPeriodicAlignment) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentConsentPeriodicAlignment) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentConsentPeriodicAlignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentConsentPeriodicAlignment(val *PaymentConsentPeriodicAlignment) *NullablePaymentConsentPeriodicAlignment {
	return &NullablePaymentConsentPeriodicAlignment{value: val, isSet: true}
}

func (v NullablePaymentConsentPeriodicAlignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentConsentPeriodicAlignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

