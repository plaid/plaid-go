/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.617.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// NumbersRetirement401k Identifying information for transferring holdings from a 401k account to another 401k account or IRA via the manual 401k rollover process.
type NumbersRetirement401k struct {
	// The Plaid account ID associated with the account numbers
	AccountId string `json:"account_id"`
	// The plan number for the employer's 401k retirement plan
	Plan *string `json:"plan,omitempty"`
	// The full account number for the account
	Account *string `json:"account,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NumbersRetirement401k NumbersRetirement401k

// NewNumbersRetirement401k instantiates a new NumbersRetirement401k object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumbersRetirement401k(accountId string) *NumbersRetirement401k {
	this := NumbersRetirement401k{}
	this.AccountId = accountId
	return &this
}

// NewNumbersRetirement401kWithDefaults instantiates a new NumbersRetirement401k object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumbersRetirement401kWithDefaults() *NumbersRetirement401k {
	this := NumbersRetirement401k{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *NumbersRetirement401k) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *NumbersRetirement401k) GetAccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *NumbersRetirement401k) SetAccountId(v string) {
	o.AccountId = v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *NumbersRetirement401k) GetPlan() string {
	if o == nil || o.Plan == nil {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumbersRetirement401k) GetPlanOk() (*string, bool) {
	if o == nil || o.Plan == nil {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *NumbersRetirement401k) HasPlan() bool {
	if o != nil && o.Plan != nil {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *NumbersRetirement401k) SetPlan(v string) {
	o.Plan = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *NumbersRetirement401k) GetAccount() string {
	if o == nil || o.Account == nil {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NumbersRetirement401k) GetAccountOk() (*string, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *NumbersRetirement401k) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *NumbersRetirement401k) SetAccount(v string) {
	o.Account = &v
}

func (o NumbersRetirement401k) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_id"] = o.AccountId
	}
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *NumbersRetirement401k) UnmarshalJSON(bytes []byte) (err error) {
	varNumbersRetirement401k := _NumbersRetirement401k{}

	if err = json.Unmarshal(bytes, &varNumbersRetirement401k); err == nil {
		*o = NumbersRetirement401k(varNumbersRetirement401k)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "plan")
		delete(additionalProperties, "account")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNumbersRetirement401k struct {
	value *NumbersRetirement401k
	isSet bool
}

func (v NullableNumbersRetirement401k) Get() *NumbersRetirement401k {
	return v.value
}

func (v *NullableNumbersRetirement401k) Set(val *NumbersRetirement401k) {
	v.value = val
	v.isSet = true
}

func (v NullableNumbersRetirement401k) IsSet() bool {
	return v.isSet
}

func (v *NullableNumbersRetirement401k) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumbersRetirement401k(val *NumbersRetirement401k) *NullableNumbersRetirement401k {
	return &NullableNumbersRetirement401k{value: val, isSet: true}
}

func (v NullableNumbersRetirement401k) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumbersRetirement401k) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


