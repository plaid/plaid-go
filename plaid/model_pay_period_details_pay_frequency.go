/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.565.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// PayPeriodDetailsPayFrequency The frequency at which an individual is paid.
type PayPeriodDetailsPayFrequency string

var _ = fmt.Printf

// List of PayPeriodDetailsPayFrequency
const (
	PAYPERIODDETAILSPAYFREQUENCY_PAY_FREQUENCY_UNKNOWN PayPeriodDetailsPayFrequency = "PAY_FREQUENCY_UNKNOWN"
	PAYPERIODDETAILSPAYFREQUENCY_PAY_FREQUENCY_WEEKLY PayPeriodDetailsPayFrequency = "PAY_FREQUENCY_WEEKLY"
	PAYPERIODDETAILSPAYFREQUENCY_PAY_FREQUENCY_BIWEEKLY PayPeriodDetailsPayFrequency = "PAY_FREQUENCY_BIWEEKLY"
	PAYPERIODDETAILSPAYFREQUENCY_PAY_FREQUENCY_SEMIMONTHLY PayPeriodDetailsPayFrequency = "PAY_FREQUENCY_SEMIMONTHLY"
	PAYPERIODDETAILSPAYFREQUENCY_PAY_FREQUENCY_MONTHLY PayPeriodDetailsPayFrequency = "PAY_FREQUENCY_MONTHLY"
	PAYPERIODDETAILSPAYFREQUENCY_NULL PayPeriodDetailsPayFrequency = "null"
)

var allowedPayPeriodDetailsPayFrequencyEnumValues = []PayPeriodDetailsPayFrequency{
	"PAY_FREQUENCY_UNKNOWN",
	"PAY_FREQUENCY_WEEKLY",
	"PAY_FREQUENCY_BIWEEKLY",
	"PAY_FREQUENCY_SEMIMONTHLY",
	"PAY_FREQUENCY_MONTHLY",
	"null",
}

func (v *PayPeriodDetailsPayFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := PayPeriodDetailsPayFrequency(value)


	*v = enumTypeValue
	return nil
}

// NewPayPeriodDetailsPayFrequencyFromValue returns a pointer to a valid PayPeriodDetailsPayFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPayPeriodDetailsPayFrequencyFromValue(v string) (*PayPeriodDetailsPayFrequency, error) {
	ev := PayPeriodDetailsPayFrequency(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PayPeriodDetailsPayFrequency) IsValid() bool {
	for _, existing := range allowedPayPeriodDetailsPayFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PayPeriodDetailsPayFrequency value
func (v PayPeriodDetailsPayFrequency) Ptr() *PayPeriodDetailsPayFrequency {
	return &v
}

type NullablePayPeriodDetailsPayFrequency struct {
	value *PayPeriodDetailsPayFrequency
	isSet bool
}

func (v NullablePayPeriodDetailsPayFrequency) Get() *PayPeriodDetailsPayFrequency {
	return v.value
}

func (v *NullablePayPeriodDetailsPayFrequency) Set(val *PayPeriodDetailsPayFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullablePayPeriodDetailsPayFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullablePayPeriodDetailsPayFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayPeriodDetailsPayFrequency(val *PayPeriodDetailsPayFrequency) *NullablePayPeriodDetailsPayFrequency {
	return &NullablePayPeriodDetailsPayFrequency{value: val, isSet: true}
}

func (v NullablePayPeriodDetailsPayFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayPeriodDetailsPayFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

