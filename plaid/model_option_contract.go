/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.525.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// OptionContract Details about the option security.  For the Sandbox environment, this data is currently only available if the item is using a custom configuration object, and the `ticker` field of the custom security follows the [OCC Option Symbol](https://en.wikipedia.org/wiki/Option_symbol#The_OCC_Option_Symbol) standard with no spaces.
type OptionContract struct {
	// The type of this option contract. It is one of:  `put`: for Put option contracts  `call`: for Call option contracts
	ContractType string `json:"contract_type"`
	// The expiration date for this option contract, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
	ExpirationDate string `json:"expiration_date"`
	// The strike price for this option contract, per share of security.
	StrikePrice float64 `json:"strike_price"`
	// The ticker of the underlying security for this option contract.
	UnderlyingSecurityTicker string `json:"underlying_security_ticker"`
	AdditionalProperties map[string]interface{}
}

type _OptionContract OptionContract

// NewOptionContract instantiates a new OptionContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionContract(contractType string, expirationDate string, strikePrice float64, underlyingSecurityTicker string) *OptionContract {
	this := OptionContract{}
	this.ContractType = contractType
	this.ExpirationDate = expirationDate
	this.StrikePrice = strikePrice
	this.UnderlyingSecurityTicker = underlyingSecurityTicker
	return &this
}

// NewOptionContractWithDefaults instantiates a new OptionContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionContractWithDefaults() *OptionContract {
	this := OptionContract{}
	return &this
}

// GetContractType returns the ContractType field value
func (o *OptionContract) GetContractType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractType
}

// GetContractTypeOk returns a tuple with the ContractType field value
// and a boolean to check if the value has been set.
func (o *OptionContract) GetContractTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ContractType, true
}

// SetContractType sets field value
func (o *OptionContract) SetContractType(v string) {
	o.ContractType = v
}

// GetExpirationDate returns the ExpirationDate field value
func (o *OptionContract) GetExpirationDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value
// and a boolean to check if the value has been set.
func (o *OptionContract) GetExpirationDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExpirationDate, true
}

// SetExpirationDate sets field value
func (o *OptionContract) SetExpirationDate(v string) {
	o.ExpirationDate = v
}

// GetStrikePrice returns the StrikePrice field value
func (o *OptionContract) GetStrikePrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.StrikePrice
}

// GetStrikePriceOk returns a tuple with the StrikePrice field value
// and a boolean to check if the value has been set.
func (o *OptionContract) GetStrikePriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StrikePrice, true
}

// SetStrikePrice sets field value
func (o *OptionContract) SetStrikePrice(v float64) {
	o.StrikePrice = v
}

// GetUnderlyingSecurityTicker returns the UnderlyingSecurityTicker field value
func (o *OptionContract) GetUnderlyingSecurityTicker() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UnderlyingSecurityTicker
}

// GetUnderlyingSecurityTickerOk returns a tuple with the UnderlyingSecurityTicker field value
// and a boolean to check if the value has been set.
func (o *OptionContract) GetUnderlyingSecurityTickerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UnderlyingSecurityTicker, true
}

// SetUnderlyingSecurityTicker sets field value
func (o *OptionContract) SetUnderlyingSecurityTicker(v string) {
	o.UnderlyingSecurityTicker = v
}

func (o OptionContract) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["contract_type"] = o.ContractType
	}
	if true {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if true {
		toSerialize["strike_price"] = o.StrikePrice
	}
	if true {
		toSerialize["underlying_security_ticker"] = o.UnderlyingSecurityTicker
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OptionContract) UnmarshalJSON(bytes []byte) (err error) {
	varOptionContract := _OptionContract{}

	if err = json.Unmarshal(bytes, &varOptionContract); err == nil {
		*o = OptionContract(varOptionContract)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "contract_type")
		delete(additionalProperties, "expiration_date")
		delete(additionalProperties, "strike_price")
		delete(additionalProperties, "underlying_security_ticker")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOptionContract struct {
	value *OptionContract
	isSet bool
}

func (v NullableOptionContract) Get() *OptionContract {
	return v.value
}

func (v *NullableOptionContract) Set(val *OptionContract) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionContract) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionContract(val *OptionContract) *NullableOptionContract {
	return &NullableOptionContract{value: val, isSet: true}
}

func (v NullableOptionContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


