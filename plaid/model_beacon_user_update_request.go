/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.508.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BeaconUserUpdateRequest Request input for updating the identity data of a Beacon User.
type BeaconUserUpdateRequest struct {
	// ID of the associated Beacon User.
	BeaconUserId string `json:"beacon_user_id"`
	User BeaconUserUpdateRequestData `json:"user"`
	// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
	ClientId *string `json:"client_id,omitempty"`
	// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
	Secret *string `json:"secret,omitempty"`
}

// NewBeaconUserUpdateRequest instantiates a new BeaconUserUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconUserUpdateRequest(beaconUserId string, user BeaconUserUpdateRequestData) *BeaconUserUpdateRequest {
	this := BeaconUserUpdateRequest{}
	this.BeaconUserId = beaconUserId
	this.User = user
	return &this
}

// NewBeaconUserUpdateRequestWithDefaults instantiates a new BeaconUserUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconUserUpdateRequestWithDefaults() *BeaconUserUpdateRequest {
	this := BeaconUserUpdateRequest{}
	return &this
}

// GetBeaconUserId returns the BeaconUserId field value
func (o *BeaconUserUpdateRequest) GetBeaconUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BeaconUserId
}

// GetBeaconUserIdOk returns a tuple with the BeaconUserId field value
// and a boolean to check if the value has been set.
func (o *BeaconUserUpdateRequest) GetBeaconUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BeaconUserId, true
}

// SetBeaconUserId sets field value
func (o *BeaconUserUpdateRequest) SetBeaconUserId(v string) {
	o.BeaconUserId = v
}

// GetUser returns the User field value
func (o *BeaconUserUpdateRequest) GetUser() BeaconUserUpdateRequestData {
	if o == nil {
		var ret BeaconUserUpdateRequestData
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *BeaconUserUpdateRequest) GetUserOk() (*BeaconUserUpdateRequestData, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *BeaconUserUpdateRequest) SetUser(v BeaconUserUpdateRequestData) {
	o.User = v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *BeaconUserUpdateRequest) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeaconUserUpdateRequest) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *BeaconUserUpdateRequest) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *BeaconUserUpdateRequest) SetClientId(v string) {
	o.ClientId = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *BeaconUserUpdateRequest) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeaconUserUpdateRequest) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *BeaconUserUpdateRequest) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *BeaconUserUpdateRequest) SetSecret(v string) {
	o.Secret = &v
}

func (o BeaconUserUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["beacon_user_id"] = o.BeaconUserId
	}
	if true {
		toSerialize["user"] = o.User
	}
	if o.ClientId != nil {
		toSerialize["client_id"] = o.ClientId
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableBeaconUserUpdateRequest struct {
	value *BeaconUserUpdateRequest
	isSet bool
}

func (v NullableBeaconUserUpdateRequest) Get() *BeaconUserUpdateRequest {
	return v.value
}

func (v *NullableBeaconUserUpdateRequest) Set(val *BeaconUserUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconUserUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconUserUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconUserUpdateRequest(val *BeaconUserUpdateRequest) *NullableBeaconUserUpdateRequest {
	return &NullableBeaconUserUpdateRequest{value: val, isSet: true}
}

func (v NullableBeaconUserUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconUserUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


