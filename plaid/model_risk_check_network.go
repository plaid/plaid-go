/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.633.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// RiskCheckNetwork Result summary object specifying values for network attributes of risk check.
type RiskCheckNetwork struct {
	RiskLevel RiskLevel `json:"risk_level"`
	// List of factors, when available, that contribute towards the risk level of the given risk check type.
	Factors []string `json:"factors"`
	AdditionalProperties map[string]interface{}
}

type _RiskCheckNetwork RiskCheckNetwork

// NewRiskCheckNetwork instantiates a new RiskCheckNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskCheckNetwork(riskLevel RiskLevel, factors []string) *RiskCheckNetwork {
	this := RiskCheckNetwork{}
	this.RiskLevel = riskLevel
	this.Factors = factors
	return &this
}

// NewRiskCheckNetworkWithDefaults instantiates a new RiskCheckNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskCheckNetworkWithDefaults() *RiskCheckNetwork {
	this := RiskCheckNetwork{}
	return &this
}

// GetRiskLevel returns the RiskLevel field value
func (o *RiskCheckNetwork) GetRiskLevel() RiskLevel {
	if o == nil {
		var ret RiskLevel
		return ret
	}

	return o.RiskLevel
}

// GetRiskLevelOk returns a tuple with the RiskLevel field value
// and a boolean to check if the value has been set.
func (o *RiskCheckNetwork) GetRiskLevelOk() (*RiskLevel, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RiskLevel, true
}

// SetRiskLevel sets field value
func (o *RiskCheckNetwork) SetRiskLevel(v RiskLevel) {
	o.RiskLevel = v
}

// GetFactors returns the Factors field value
func (o *RiskCheckNetwork) GetFactors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Factors
}

// GetFactorsOk returns a tuple with the Factors field value
// and a boolean to check if the value has been set.
func (o *RiskCheckNetwork) GetFactorsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Factors, true
}

// SetFactors sets field value
func (o *RiskCheckNetwork) SetFactors(v []string) {
	o.Factors = v
}

func (o RiskCheckNetwork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["risk_level"] = o.RiskLevel
	}
	if true {
		toSerialize["factors"] = o.Factors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *RiskCheckNetwork) UnmarshalJSON(bytes []byte) (err error) {
	varRiskCheckNetwork := _RiskCheckNetwork{}

	if err = json.Unmarshal(bytes, &varRiskCheckNetwork); err == nil {
		*o = RiskCheckNetwork(varRiskCheckNetwork)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "risk_level")
		delete(additionalProperties, "factors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRiskCheckNetwork struct {
	value *RiskCheckNetwork
	isSet bool
}

func (v NullableRiskCheckNetwork) Get() *RiskCheckNetwork {
	return v.value
}

func (v *NullableRiskCheckNetwork) Set(val *RiskCheckNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskCheckNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskCheckNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskCheckNetwork(val *RiskCheckNetwork) *NullableRiskCheckNetwork {
	return &NullableRiskCheckNetwork{value: val, isSet: true}
}

func (v NullableRiskCheckNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskCheckNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


