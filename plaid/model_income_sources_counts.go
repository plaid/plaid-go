/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// IncomeSourcesCounts Details about the number of income sources
type IncomeSourcesCounts struct {
	// The number of income sources detected at the subscription date
	BaselineCount NullableFloat32 `json:"baseline_count,omitempty"`
	// The number of income sources currently detected
	CurrentCount float32 `json:"current_count"`
	AdditionalProperties map[string]interface{}
}

type _IncomeSourcesCounts IncomeSourcesCounts

// NewIncomeSourcesCounts instantiates a new IncomeSourcesCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncomeSourcesCounts(currentCount float32) *IncomeSourcesCounts {
	this := IncomeSourcesCounts{}
	this.CurrentCount = currentCount
	return &this
}

// NewIncomeSourcesCountsWithDefaults instantiates a new IncomeSourcesCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncomeSourcesCountsWithDefaults() *IncomeSourcesCounts {
	this := IncomeSourcesCounts{}
	return &this
}

// GetBaselineCount returns the BaselineCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IncomeSourcesCounts) GetBaselineCount() float32 {
	if o == nil || o.BaselineCount.Get() == nil {
		var ret float32
		return ret
	}
	return *o.BaselineCount.Get()
}

// GetBaselineCountOk returns a tuple with the BaselineCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IncomeSourcesCounts) GetBaselineCountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BaselineCount.Get(), o.BaselineCount.IsSet()
}

// HasBaselineCount returns a boolean if a field has been set.
func (o *IncomeSourcesCounts) HasBaselineCount() bool {
	if o != nil && o.BaselineCount.IsSet() {
		return true
	}

	return false
}

// SetBaselineCount gets a reference to the given NullableFloat32 and assigns it to the BaselineCount field.
func (o *IncomeSourcesCounts) SetBaselineCount(v float32) {
	o.BaselineCount.Set(&v)
}
// SetBaselineCountNil sets the value for BaselineCount to be an explicit nil
func (o *IncomeSourcesCounts) SetBaselineCountNil() {
	o.BaselineCount.Set(nil)
}

// UnsetBaselineCount ensures that no value is present for BaselineCount, not even an explicit nil
func (o *IncomeSourcesCounts) UnsetBaselineCount() {
	o.BaselineCount.Unset()
}

// GetCurrentCount returns the CurrentCount field value
func (o *IncomeSourcesCounts) GetCurrentCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CurrentCount
}

// GetCurrentCountOk returns a tuple with the CurrentCount field value
// and a boolean to check if the value has been set.
func (o *IncomeSourcesCounts) GetCurrentCountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CurrentCount, true
}

// SetCurrentCount sets field value
func (o *IncomeSourcesCounts) SetCurrentCount(v float32) {
	o.CurrentCount = v
}

func (o IncomeSourcesCounts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BaselineCount.IsSet() {
		toSerialize["baseline_count"] = o.BaselineCount.Get()
	}
	if true {
		toSerialize["current_count"] = o.CurrentCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IncomeSourcesCounts) UnmarshalJSON(bytes []byte) (err error) {
	varIncomeSourcesCounts := _IncomeSourcesCounts{}

	if err = json.Unmarshal(bytes, &varIncomeSourcesCounts); err == nil {
		*o = IncomeSourcesCounts(varIncomeSourcesCounts)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "baseline_count")
		delete(additionalProperties, "current_count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIncomeSourcesCounts struct {
	value *IncomeSourcesCounts
	isSet bool
}

func (v NullableIncomeSourcesCounts) Get() *IncomeSourcesCounts {
	return v.value
}

func (v *NullableIncomeSourcesCounts) Set(val *IncomeSourcesCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableIncomeSourcesCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableIncomeSourcesCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncomeSourcesCounts(val *IncomeSourcesCounts) *NullableIncomeSourcesCounts {
	return &NullableIncomeSourcesCounts{value: val, isSet: true}
}

func (v NullableIncomeSourcesCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncomeSourcesCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


