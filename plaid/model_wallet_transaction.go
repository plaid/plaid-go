/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.128.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// WalletTransaction The transaction details
type WalletTransaction struct {
	// A unique ID identifying the transaction
	TransactionId string `json:"transaction_id"`
	// A reference for the transaction
	Reference string `json:"reference"`
	// The type of the transaction. The supported transaction types that are returned are: `BANK_TRANSFER:` a transaction which credits an e-wallet through an external bank transfer.  `PAYOUT:` a transaction which debits an e-wallet by disbursing funds to a counterparty.  `PIS_PAY_IN:` a payment which credits an e-wallet through Plaid's Payment Initiation Services (PIS) APIs. For more information see the [Payment Initiation endpoints](https://plaid.com/docs/api/products/payment-initiation/).  `REFUND:` a transaction which debits an e-wallet by refunding a previously initated payment made through Plaid's [PIS APIs](https://plaid.com/docs/api/products/payment-initiation/).
	Type string `json:"type"`
	Amount WalletTransactionAmount `json:"amount"`
	Counterparty WalletTransactionCounterparty `json:"counterparty"`
	Status WalletTransactionStatus `json:"status"`
	// Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
	CreatedAt time.Time `json:"created_at"`
	AdditionalProperties map[string]interface{}
}

type _WalletTransaction WalletTransaction

// NewWalletTransaction instantiates a new WalletTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletTransaction(transactionId string, reference string, type_ string, amount WalletTransactionAmount, counterparty WalletTransactionCounterparty, status WalletTransactionStatus, createdAt time.Time) *WalletTransaction {
	this := WalletTransaction{}
	this.TransactionId = transactionId
	this.Reference = reference
	this.Type = type_
	this.Amount = amount
	this.Counterparty = counterparty
	this.Status = status
	this.CreatedAt = createdAt
	return &this
}

// NewWalletTransactionWithDefaults instantiates a new WalletTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletTransactionWithDefaults() *WalletTransaction {
	this := WalletTransaction{}
	return &this
}

// GetTransactionId returns the TransactionId field value
func (o *WalletTransaction) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *WalletTransaction) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetReference returns the Reference field value
func (o *WalletTransaction) GetReference() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetReferenceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *WalletTransaction) SetReference(v string) {
	o.Reference = v
}

// GetType returns the Type field value
func (o *WalletTransaction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WalletTransaction) SetType(v string) {
	o.Type = v
}

// GetAmount returns the Amount field value
func (o *WalletTransaction) GetAmount() WalletTransactionAmount {
	if o == nil {
		var ret WalletTransactionAmount
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetAmountOk() (*WalletTransactionAmount, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *WalletTransaction) SetAmount(v WalletTransactionAmount) {
	o.Amount = v
}

// GetCounterparty returns the Counterparty field value
func (o *WalletTransaction) GetCounterparty() WalletTransactionCounterparty {
	if o == nil {
		var ret WalletTransactionCounterparty
		return ret
	}

	return o.Counterparty
}

// GetCounterpartyOk returns a tuple with the Counterparty field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetCounterpartyOk() (*WalletTransactionCounterparty, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Counterparty, true
}

// SetCounterparty sets field value
func (o *WalletTransaction) SetCounterparty(v WalletTransactionCounterparty) {
	o.Counterparty = v
}

// GetStatus returns the Status field value
func (o *WalletTransaction) GetStatus() WalletTransactionStatus {
	if o == nil {
		var ret WalletTransactionStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetStatusOk() (*WalletTransactionStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WalletTransaction) SetStatus(v WalletTransactionStatus) {
	o.Status = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *WalletTransaction) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *WalletTransaction) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *WalletTransaction) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o WalletTransaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if true {
		toSerialize["reference"] = o.Reference
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["counterparty"] = o.Counterparty
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *WalletTransaction) UnmarshalJSON(bytes []byte) (err error) {
	varWalletTransaction := _WalletTransaction{}

	if err = json.Unmarshal(bytes, &varWalletTransaction); err == nil {
		*o = WalletTransaction(varWalletTransaction)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "transaction_id")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "type")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "counterparty")
		delete(additionalProperties, "status")
		delete(additionalProperties, "created_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWalletTransaction struct {
	value *WalletTransaction
	isSet bool
}

func (v NullableWalletTransaction) Get() *WalletTransaction {
	return v.value
}

func (v *NullableWalletTransaction) Set(val *WalletTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletTransaction(val *WalletTransaction) *NullableWalletTransaction {
	return &NullableWalletTransaction{value: val, isSet: true}
}

func (v NullableWalletTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


