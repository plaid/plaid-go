/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.641.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// PrismDetectVersion The version of Prism Detect
type PrismDetectVersion string

var _ = fmt.Printf

// List of PrismDetectVersion
const (
	PRISMDETECTVERSION__4 PrismDetectVersion = "4"
	PRISMDETECTVERSION_NULL PrismDetectVersion = "null"
)

var allowedPrismDetectVersionEnumValues = []PrismDetectVersion{
	"4",
	"null",
}

func (v *PrismDetectVersion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := PrismDetectVersion(value)


	*v = enumTypeValue
	return nil
}

// NewPrismDetectVersionFromValue returns a pointer to a valid PrismDetectVersion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrismDetectVersionFromValue(v string) (*PrismDetectVersion, error) {
	ev := PrismDetectVersion(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrismDetectVersion) IsValid() bool {
	for _, existing := range allowedPrismDetectVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrismDetectVersion value
func (v PrismDetectVersion) Ptr() *PrismDetectVersion {
	return &v
}

type NullablePrismDetectVersion struct {
	value *PrismDetectVersion
	isSet bool
}

func (v NullablePrismDetectVersion) Get() *PrismDetectVersion {
	return v.value
}

func (v *NullablePrismDetectVersion) Set(val *PrismDetectVersion) {
	v.value = val
	v.isSet = true
}

func (v NullablePrismDetectVersion) IsSet() bool {
	return v.isSet
}

func (v *NullablePrismDetectVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrismDetectVersion(val *PrismDetectVersion) *NullablePrismDetectVersion {
	return &NullablePrismDetectVersion{value: val, isSet: true}
}

func (v NullablePrismDetectVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrismDetectVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

