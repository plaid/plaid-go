/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.410.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BaseReportAccount Base Report information about an account
type BaseReportAccount struct {
	Balances AccountBalance `json:"balances"`
	// The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
	Mask NullableString `json:"mask"`
	// The name of the account, either assigned by the user or by the financial institution itself
	Name string `json:"name"`
	// The official name of the account as given by the financial institution
	OfficialName NullableString `json:"official_name"`
	Type AccountType `json:"type"`
	Subtype NullableAccountSubtype `json:"subtype"`
	// The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Base Report endpoints.
	DaysAvailable float32 `json:"days_available"`
	// Transaction history associated with the account. Only returned by Base Report endpoints. Transaction history returned by endpoints such as `/transactions/get` or `/investments/transactions/get` will be returned in the top-level `transactions` field instead.
	Transactions []BaseReportTransaction `json:"transactions"`
	// Data returned by the financial institution about the account owner or owners. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array.
	Owners []Owner `json:"owners"`
	OwnershipType NullableOwnershipType `json:"ownership_type"`
	// Calculated data about the historical balances on the account. Only returned by Base Report endpoints and currently not supported by `brokerage` or `investment` accounts.
	HistoricalBalances []HistoricalBalance `json:"historical_balances"`
	AccountInsights *BaseReportAccountInsights `json:"account_insights,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BaseReportAccount BaseReportAccount

// NewBaseReportAccount instantiates a new BaseReportAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseReportAccount(balances AccountBalance, mask NullableString, name string, officialName NullableString, type_ AccountType, subtype NullableAccountSubtype, daysAvailable float32, transactions []BaseReportTransaction, owners []Owner, ownershipType NullableOwnershipType, historicalBalances []HistoricalBalance) *BaseReportAccount {
	this := BaseReportAccount{}
	this.Balances = balances
	this.Mask = mask
	this.Name = name
	this.OfficialName = officialName
	this.Type = type_
	this.Subtype = subtype
	this.DaysAvailable = daysAvailable
	this.Transactions = transactions
	this.Owners = owners
	this.OwnershipType = ownershipType
	this.HistoricalBalances = historicalBalances
	return &this
}

// NewBaseReportAccountWithDefaults instantiates a new BaseReportAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseReportAccountWithDefaults() *BaseReportAccount {
	this := BaseReportAccount{}
	return &this
}

// GetBalances returns the Balances field value
func (o *BaseReportAccount) GetBalances() AccountBalance {
	if o == nil {
		var ret AccountBalance
		return ret
	}

	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value
// and a boolean to check if the value has been set.
func (o *BaseReportAccount) GetBalancesOk() (*AccountBalance, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Balances, true
}

// SetBalances sets field value
func (o *BaseReportAccount) SetBalances(v AccountBalance) {
	o.Balances = v
}

// GetMask returns the Mask field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BaseReportAccount) GetMask() string {
	if o == nil || o.Mask.Get() == nil {
		var ret string
		return ret
	}

	return *o.Mask.Get()
}

// GetMaskOk returns a tuple with the Mask field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseReportAccount) GetMaskOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mask.Get(), o.Mask.IsSet()
}

// SetMask sets field value
func (o *BaseReportAccount) SetMask(v string) {
	o.Mask.Set(&v)
}

// GetName returns the Name field value
func (o *BaseReportAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BaseReportAccount) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BaseReportAccount) SetName(v string) {
	o.Name = v
}

// GetOfficialName returns the OfficialName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BaseReportAccount) GetOfficialName() string {
	if o == nil || o.OfficialName.Get() == nil {
		var ret string
		return ret
	}

	return *o.OfficialName.Get()
}

// GetOfficialNameOk returns a tuple with the OfficialName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseReportAccount) GetOfficialNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OfficialName.Get(), o.OfficialName.IsSet()
}

// SetOfficialName sets field value
func (o *BaseReportAccount) SetOfficialName(v string) {
	o.OfficialName.Set(&v)
}

// GetType returns the Type field value
func (o *BaseReportAccount) GetType() AccountType {
	if o == nil {
		var ret AccountType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BaseReportAccount) GetTypeOk() (*AccountType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BaseReportAccount) SetType(v AccountType) {
	o.Type = v
}

// GetSubtype returns the Subtype field value
// If the value is explicit nil, the zero value for AccountSubtype will be returned
func (o *BaseReportAccount) GetSubtype() AccountSubtype {
	if o == nil || o.Subtype.Get() == nil {
		var ret AccountSubtype
		return ret
	}

	return *o.Subtype.Get()
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseReportAccount) GetSubtypeOk() (*AccountSubtype, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subtype.Get(), o.Subtype.IsSet()
}

// SetSubtype sets field value
func (o *BaseReportAccount) SetSubtype(v AccountSubtype) {
	o.Subtype.Set(&v)
}

// GetDaysAvailable returns the DaysAvailable field value
func (o *BaseReportAccount) GetDaysAvailable() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DaysAvailable
}

// GetDaysAvailableOk returns a tuple with the DaysAvailable field value
// and a boolean to check if the value has been set.
func (o *BaseReportAccount) GetDaysAvailableOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DaysAvailable, true
}

// SetDaysAvailable sets field value
func (o *BaseReportAccount) SetDaysAvailable(v float32) {
	o.DaysAvailable = v
}

// GetTransactions returns the Transactions field value
func (o *BaseReportAccount) GetTransactions() []BaseReportTransaction {
	if o == nil {
		var ret []BaseReportTransaction
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *BaseReportAccount) GetTransactionsOk() (*[]BaseReportTransaction, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Transactions, true
}

// SetTransactions sets field value
func (o *BaseReportAccount) SetTransactions(v []BaseReportTransaction) {
	o.Transactions = v
}

// GetOwners returns the Owners field value
func (o *BaseReportAccount) GetOwners() []Owner {
	if o == nil {
		var ret []Owner
		return ret
	}

	return o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value
// and a boolean to check if the value has been set.
func (o *BaseReportAccount) GetOwnersOk() (*[]Owner, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Owners, true
}

// SetOwners sets field value
func (o *BaseReportAccount) SetOwners(v []Owner) {
	o.Owners = v
}

// GetOwnershipType returns the OwnershipType field value
// If the value is explicit nil, the zero value for OwnershipType will be returned
func (o *BaseReportAccount) GetOwnershipType() OwnershipType {
	if o == nil || o.OwnershipType.Get() == nil {
		var ret OwnershipType
		return ret
	}

	return *o.OwnershipType.Get()
}

// GetOwnershipTypeOk returns a tuple with the OwnershipType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseReportAccount) GetOwnershipTypeOk() (*OwnershipType, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnershipType.Get(), o.OwnershipType.IsSet()
}

// SetOwnershipType sets field value
func (o *BaseReportAccount) SetOwnershipType(v OwnershipType) {
	o.OwnershipType.Set(&v)
}

// GetHistoricalBalances returns the HistoricalBalances field value
func (o *BaseReportAccount) GetHistoricalBalances() []HistoricalBalance {
	if o == nil {
		var ret []HistoricalBalance
		return ret
	}

	return o.HistoricalBalances
}

// GetHistoricalBalancesOk returns a tuple with the HistoricalBalances field value
// and a boolean to check if the value has been set.
func (o *BaseReportAccount) GetHistoricalBalancesOk() (*[]HistoricalBalance, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HistoricalBalances, true
}

// SetHistoricalBalances sets field value
func (o *BaseReportAccount) SetHistoricalBalances(v []HistoricalBalance) {
	o.HistoricalBalances = v
}

// GetAccountInsights returns the AccountInsights field value if set, zero value otherwise.
func (o *BaseReportAccount) GetAccountInsights() BaseReportAccountInsights {
	if o == nil || o.AccountInsights == nil {
		var ret BaseReportAccountInsights
		return ret
	}
	return *o.AccountInsights
}

// GetAccountInsightsOk returns a tuple with the AccountInsights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseReportAccount) GetAccountInsightsOk() (*BaseReportAccountInsights, bool) {
	if o == nil || o.AccountInsights == nil {
		return nil, false
	}
	return o.AccountInsights, true
}

// HasAccountInsights returns a boolean if a field has been set.
func (o *BaseReportAccount) HasAccountInsights() bool {
	if o != nil && o.AccountInsights != nil {
		return true
	}

	return false
}

// SetAccountInsights gets a reference to the given BaseReportAccountInsights and assigns it to the AccountInsights field.
func (o *BaseReportAccount) SetAccountInsights(v BaseReportAccountInsights) {
	o.AccountInsights = &v
}

func (o BaseReportAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["balances"] = o.Balances
	}
	if true {
		toSerialize["mask"] = o.Mask.Get()
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["official_name"] = o.OfficialName.Get()
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["subtype"] = o.Subtype.Get()
	}
	if true {
		toSerialize["days_available"] = o.DaysAvailable
	}
	if true {
		toSerialize["transactions"] = o.Transactions
	}
	if true {
		toSerialize["owners"] = o.Owners
	}
	if true {
		toSerialize["ownership_type"] = o.OwnershipType.Get()
	}
	if true {
		toSerialize["historical_balances"] = o.HistoricalBalances
	}
	if o.AccountInsights != nil {
		toSerialize["account_insights"] = o.AccountInsights
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BaseReportAccount) UnmarshalJSON(bytes []byte) (err error) {
	varBaseReportAccount := _BaseReportAccount{}

	if err = json.Unmarshal(bytes, &varBaseReportAccount); err == nil {
		*o = BaseReportAccount(varBaseReportAccount)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "balances")
		delete(additionalProperties, "mask")
		delete(additionalProperties, "name")
		delete(additionalProperties, "official_name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "subtype")
		delete(additionalProperties, "days_available")
		delete(additionalProperties, "transactions")
		delete(additionalProperties, "owners")
		delete(additionalProperties, "ownership_type")
		delete(additionalProperties, "historical_balances")
		delete(additionalProperties, "account_insights")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBaseReportAccount struct {
	value *BaseReportAccount
	isSet bool
}

func (v NullableBaseReportAccount) Get() *BaseReportAccount {
	return v.value
}

func (v *NullableBaseReportAccount) Set(val *BaseReportAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseReportAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseReportAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseReportAccount(val *BaseReportAccount) *NullableBaseReportAccount {
	return &NullableBaseReportAccount{value: val, isSet: true}
}

func (v NullableBaseReportAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseReportAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


