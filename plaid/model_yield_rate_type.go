/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.658.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// YieldRateType The type of rate which indicates how the predicted yield was calculated. It is one of:  `coupon`: the annualized interest rate for securities with a one-year term or longer, such as treasury notes and bonds.  `coupon_equivalent`: the calculated equivalent for the annualized interest rate factoring in the discount rate and time to maturity, for shorter term, non-interest-bearing securities such as treasury bills.  `discount`: the rate at which the present value or cost is discounted from the future value upon maturity, also known as the face value.  `yield`: the total predicted rate of return factoring in both the discount rate and the coupon rate, applicable to securities such as exchange-traded bonds which can both be interest-bearing as well as sold at a discount off its face value.
type YieldRateType string

var _ = fmt.Printf

// List of YieldRateType
const (
	YIELDRATETYPE_COUPON YieldRateType = "coupon"
	YIELDRATETYPE_COUPON_EQUIVALENT YieldRateType = "coupon_equivalent"
	YIELDRATETYPE_DISCOUNT YieldRateType = "discount"
	YIELDRATETYPE_YIELD YieldRateType = "yield"
	YIELDRATETYPE_NULL YieldRateType = "null"
)

var allowedYieldRateTypeEnumValues = []YieldRateType{
	"coupon",
	"coupon_equivalent",
	"discount",
	"yield",
	"null",
}

func (v *YieldRateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := YieldRateType(value)


	*v = enumTypeValue
	return nil
}

// NewYieldRateTypeFromValue returns a pointer to a valid YieldRateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewYieldRateTypeFromValue(v string) (*YieldRateType, error) {
	ev := YieldRateType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v YieldRateType) IsValid() bool {
	for _, existing := range allowedYieldRateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to YieldRateType value
func (v YieldRateType) Ptr() *YieldRateType {
	return &v
}

type NullableYieldRateType struct {
	value *YieldRateType
	isSet bool
}

func (v NullableYieldRateType) Get() *YieldRateType {
	return v.value
}

func (v *NullableYieldRateType) Set(val *YieldRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableYieldRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableYieldRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYieldRateType(val *YieldRateType) *NullableYieldRateType {
	return &NullableYieldRateType{value: val, isSet: true}
}

func (v NullableYieldRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYieldRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

