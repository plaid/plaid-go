/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.385.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// TransferRecurringSchedule The schedule that the recurring transfer will be executed on.
type TransferRecurringSchedule struct {
	IntervalUnit TransferScheduleIntervalUnit `json:"interval_unit"`
	// The number of recurring `interval_units` between originations. The recurring interval(before holiday adjustment) is calculated by multiplying `interval_unit` and `interval_count`. For instance, to schedule a recurring transfer which originates once every two weeks, set `interval_unit` = `week` and `interval_count` = 2.
	IntervalCount int32 `json:"interval_count"`
	// The day of the interval on which to schedule the transfer.  If the `interval_unit` is `week`, `interval_execution_day` should be an integer from 1 (Monday) to 5 (Friday).  If the `interval_unit` is `month`, `interval_execution_day` should be an integer indicating which day of the month to make the transfer on. Integers from 1 to 28 can be used to make a transfer on that day of the month. Negative integers from -1 to -5 can be used to make a transfer relative to the end of the month. To make a transfer on the last day of the month, use -1; to make the transfer on the second-to-last day, use -2, and so on.  The transfer will be originated on next available banking day if the designated day is a non banking day.
	IntervalExecutionDay int32 `json:"interval_execution_day"`
	// A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will begin on the first `interval_execution_day` on or after the `start_date`.  If the first `interval_execution_day` on or after the start date is also the same day that `/transfer/recurring/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
	StartDate string `json:"start_date"`
	// A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will end on the last `interval_execution_day` on or before the `end_date`. If the `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/transfer/recurring/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
	EndDate NullableString `json:"end_date,omitempty"`
}

// NewTransferRecurringSchedule instantiates a new TransferRecurringSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferRecurringSchedule(intervalUnit TransferScheduleIntervalUnit, intervalCount int32, intervalExecutionDay int32, startDate string) *TransferRecurringSchedule {
	this := TransferRecurringSchedule{}
	this.IntervalUnit = intervalUnit
	this.IntervalCount = intervalCount
	this.IntervalExecutionDay = intervalExecutionDay
	this.StartDate = startDate
	return &this
}

// NewTransferRecurringScheduleWithDefaults instantiates a new TransferRecurringSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferRecurringScheduleWithDefaults() *TransferRecurringSchedule {
	this := TransferRecurringSchedule{}
	return &this
}

// GetIntervalUnit returns the IntervalUnit field value
func (o *TransferRecurringSchedule) GetIntervalUnit() TransferScheduleIntervalUnit {
	if o == nil {
		var ret TransferScheduleIntervalUnit
		return ret
	}

	return o.IntervalUnit
}

// GetIntervalUnitOk returns a tuple with the IntervalUnit field value
// and a boolean to check if the value has been set.
func (o *TransferRecurringSchedule) GetIntervalUnitOk() (*TransferScheduleIntervalUnit, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IntervalUnit, true
}

// SetIntervalUnit sets field value
func (o *TransferRecurringSchedule) SetIntervalUnit(v TransferScheduleIntervalUnit) {
	o.IntervalUnit = v
}

// GetIntervalCount returns the IntervalCount field value
func (o *TransferRecurringSchedule) GetIntervalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IntervalCount
}

// GetIntervalCountOk returns a tuple with the IntervalCount field value
// and a boolean to check if the value has been set.
func (o *TransferRecurringSchedule) GetIntervalCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IntervalCount, true
}

// SetIntervalCount sets field value
func (o *TransferRecurringSchedule) SetIntervalCount(v int32) {
	o.IntervalCount = v
}

// GetIntervalExecutionDay returns the IntervalExecutionDay field value
func (o *TransferRecurringSchedule) GetIntervalExecutionDay() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IntervalExecutionDay
}

// GetIntervalExecutionDayOk returns a tuple with the IntervalExecutionDay field value
// and a boolean to check if the value has been set.
func (o *TransferRecurringSchedule) GetIntervalExecutionDayOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IntervalExecutionDay, true
}

// SetIntervalExecutionDay sets field value
func (o *TransferRecurringSchedule) SetIntervalExecutionDay(v int32) {
	o.IntervalExecutionDay = v
}

// GetStartDate returns the StartDate field value
func (o *TransferRecurringSchedule) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *TransferRecurringSchedule) GetStartDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *TransferRecurringSchedule) SetStartDate(v string) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransferRecurringSchedule) GetEndDate() string {
	if o == nil || o.EndDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransferRecurringSchedule) GetEndDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *TransferRecurringSchedule) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableString and assigns it to the EndDate field.
func (o *TransferRecurringSchedule) SetEndDate(v string) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *TransferRecurringSchedule) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *TransferRecurringSchedule) UnsetEndDate() {
	o.EndDate.Unset()
}

func (o TransferRecurringSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["interval_unit"] = o.IntervalUnit
	}
	if true {
		toSerialize["interval_count"] = o.IntervalCount
	}
	if true {
		toSerialize["interval_execution_day"] = o.IntervalExecutionDay
	}
	if true {
		toSerialize["start_date"] = o.StartDate
	}
	if o.EndDate.IsSet() {
		toSerialize["end_date"] = o.EndDate.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTransferRecurringSchedule struct {
	value *TransferRecurringSchedule
	isSet bool
}

func (v NullableTransferRecurringSchedule) Get() *TransferRecurringSchedule {
	return v.value
}

func (v *NullableTransferRecurringSchedule) Set(val *TransferRecurringSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferRecurringSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferRecurringSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferRecurringSchedule(val *TransferRecurringSchedule) *NullableTransferRecurringSchedule {
	return &NullableTransferRecurringSchedule{value: val, isSet: true}
}

func (v NullableTransferRecurringSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferRecurringSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


