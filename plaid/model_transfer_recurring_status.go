/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.379.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// TransferRecurringStatus The status of the recurring transfer.  `active`: The recurring transfer is currently active. `cancelled`: The recurring transfer was cancelled by the client or Plaid. `expired`: The recurring transfer has completed all originations according to its recurring schedule.
type TransferRecurringStatus string

var _ = fmt.Printf

// List of TransferRecurringStatus
const (
	TRANSFERRECURRINGSTATUS_ACTIVE TransferRecurringStatus = "active"
	TRANSFERRECURRINGSTATUS_CANCELLED TransferRecurringStatus = "cancelled"
	TRANSFERRECURRINGSTATUS_EXPIRED TransferRecurringStatus = "expired"
)

var allowedTransferRecurringStatusEnumValues = []TransferRecurringStatus{
	"active",
	"cancelled",
	"expired",
}

func (v *TransferRecurringStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := TransferRecurringStatus(value)


	*v = enumTypeValue
	return nil
}

// NewTransferRecurringStatusFromValue returns a pointer to a valid TransferRecurringStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferRecurringStatusFromValue(v string) (*TransferRecurringStatus, error) {
	ev := TransferRecurringStatus(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferRecurringStatus) IsValid() bool {
	for _, existing := range allowedTransferRecurringStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferRecurringStatus value
func (v TransferRecurringStatus) Ptr() *TransferRecurringStatus {
	return &v
}

type NullableTransferRecurringStatus struct {
	value *TransferRecurringStatus
	isSet bool
}

func (v NullableTransferRecurringStatus) Get() *TransferRecurringStatus {
	return v.value
}

func (v *NullableTransferRecurringStatus) Set(val *TransferRecurringStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferRecurringStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferRecurringStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferRecurringStatus(val *TransferRecurringStatus) *NullableTransferRecurringStatus {
	return &NullableTransferRecurringStatus{value: val, isSet: true}
}

func (v NullableTransferRecurringStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferRecurringStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

