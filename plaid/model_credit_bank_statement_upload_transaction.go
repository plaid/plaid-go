/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.385.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CreditBankStatementUploadTransaction An object containing data about a transaction appearing on a user-uploaded bank statement.
type CreditBankStatementUploadTransaction struct {
	// The value of the transaction. A negative amount indicates that money moved into the account (such as a paycheck being deposited).
	Amount NullableFloat32 `json:"amount"`
	// The date of when the transaction was made, in ISO 8601 format (YYYY-MM-DD).
	Date NullableString `json:"date"`
	// The raw description of the transaction as it appears on the bank statement.
	OriginalDescription NullableString `json:"original_description"`
	// The unique id of the bank account that this transaction occurs in
	AccountId NullableString `json:"account_id"`
}

// NewCreditBankStatementUploadTransaction instantiates a new CreditBankStatementUploadTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditBankStatementUploadTransaction(amount NullableFloat32, date NullableString, originalDescription NullableString, accountId NullableString) *CreditBankStatementUploadTransaction {
	this := CreditBankStatementUploadTransaction{}
	this.Amount = amount
	this.Date = date
	this.OriginalDescription = originalDescription
	this.AccountId = accountId
	return &this
}

// NewCreditBankStatementUploadTransactionWithDefaults instantiates a new CreditBankStatementUploadTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditBankStatementUploadTransactionWithDefaults() *CreditBankStatementUploadTransaction {
	this := CreditBankStatementUploadTransaction{}
	return &this
}

// GetAmount returns the Amount field value
// If the value is explicit nil, the zero value for float32 will be returned
func (o *CreditBankStatementUploadTransaction) GetAmount() float32 {
	if o == nil || o.Amount.Get() == nil {
		var ret float32
		return ret
	}

	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditBankStatementUploadTransaction) GetAmountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// SetAmount sets field value
func (o *CreditBankStatementUploadTransaction) SetAmount(v float32) {
	o.Amount.Set(&v)
}

// GetDate returns the Date field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreditBankStatementUploadTransaction) GetDate() string {
	if o == nil || o.Date.Get() == nil {
		var ret string
		return ret
	}

	return *o.Date.Get()
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditBankStatementUploadTransaction) GetDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Date.Get(), o.Date.IsSet()
}

// SetDate sets field value
func (o *CreditBankStatementUploadTransaction) SetDate(v string) {
	o.Date.Set(&v)
}

// GetOriginalDescription returns the OriginalDescription field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreditBankStatementUploadTransaction) GetOriginalDescription() string {
	if o == nil || o.OriginalDescription.Get() == nil {
		var ret string
		return ret
	}

	return *o.OriginalDescription.Get()
}

// GetOriginalDescriptionOk returns a tuple with the OriginalDescription field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditBankStatementUploadTransaction) GetOriginalDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OriginalDescription.Get(), o.OriginalDescription.IsSet()
}

// SetOriginalDescription sets field value
func (o *CreditBankStatementUploadTransaction) SetOriginalDescription(v string) {
	o.OriginalDescription.Set(&v)
}

// GetAccountId returns the AccountId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreditBankStatementUploadTransaction) GetAccountId() string {
	if o == nil || o.AccountId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccountId.Get()
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditBankStatementUploadTransaction) GetAccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountId.Get(), o.AccountId.IsSet()
}

// SetAccountId sets field value
func (o *CreditBankStatementUploadTransaction) SetAccountId(v string) {
	o.AccountId.Set(&v)
}

func (o CreditBankStatementUploadTransaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount.Get()
	}
	if true {
		toSerialize["date"] = o.Date.Get()
	}
	if true {
		toSerialize["original_description"] = o.OriginalDescription.Get()
	}
	if true {
		toSerialize["account_id"] = o.AccountId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreditBankStatementUploadTransaction struct {
	value *CreditBankStatementUploadTransaction
	isSet bool
}

func (v NullableCreditBankStatementUploadTransaction) Get() *CreditBankStatementUploadTransaction {
	return v.value
}

func (v *NullableCreditBankStatementUploadTransaction) Set(val *CreditBankStatementUploadTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditBankStatementUploadTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditBankStatementUploadTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditBankStatementUploadTransaction(val *CreditBankStatementUploadTransaction) *NullableCreditBankStatementUploadTransaction {
	return &NullableCreditBankStatementUploadTransaction{value: val, isSet: true}
}

func (v NullableCreditBankStatementUploadTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditBankStatementUploadTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


