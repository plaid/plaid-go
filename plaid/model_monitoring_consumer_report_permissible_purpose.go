/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// MonitoringConsumerReportPermissiblePurpose Describes the reason you are generating a Consumer Report for this user.   `ACCOUNT_REVIEW_CREDIT`: In connection with a consumer credit transaction for the review or collection of an account pursuant to FCRA Section 604(a)(3)(A).  `WRITTEN_INSTRUCTION_OTHER`: In accordance with the written instructions of the consumer pursuant to FCRA Section 604(a)(2), such as when an individual agrees to act as a guarantor or assumes personal liability for a consumer, business, or commercial loan.
type MonitoringConsumerReportPermissiblePurpose string

var _ = fmt.Printf

// List of MonitoringConsumerReportPermissiblePurpose
const (
	MONITORINGCONSUMERREPORTPERMISSIBLEPURPOSE_ACCOUNT_REVIEW_CREDIT MonitoringConsumerReportPermissiblePurpose = "ACCOUNT_REVIEW_CREDIT"
	MONITORINGCONSUMERREPORTPERMISSIBLEPURPOSE_WRITTEN_INSTRUCTION_OTHER MonitoringConsumerReportPermissiblePurpose = "WRITTEN_INSTRUCTION_OTHER"
)

var allowedMonitoringConsumerReportPermissiblePurposeEnumValues = []MonitoringConsumerReportPermissiblePurpose{
	"ACCOUNT_REVIEW_CREDIT",
	"WRITTEN_INSTRUCTION_OTHER",
}

func (v *MonitoringConsumerReportPermissiblePurpose) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := MonitoringConsumerReportPermissiblePurpose(value)


	*v = enumTypeValue
	return nil
}

// NewMonitoringConsumerReportPermissiblePurposeFromValue returns a pointer to a valid MonitoringConsumerReportPermissiblePurpose
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMonitoringConsumerReportPermissiblePurposeFromValue(v string) (*MonitoringConsumerReportPermissiblePurpose, error) {
	ev := MonitoringConsumerReportPermissiblePurpose(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MonitoringConsumerReportPermissiblePurpose) IsValid() bool {
	for _, existing := range allowedMonitoringConsumerReportPermissiblePurposeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MonitoringConsumerReportPermissiblePurpose value
func (v MonitoringConsumerReportPermissiblePurpose) Ptr() *MonitoringConsumerReportPermissiblePurpose {
	return &v
}

type NullableMonitoringConsumerReportPermissiblePurpose struct {
	value *MonitoringConsumerReportPermissiblePurpose
	isSet bool
}

func (v NullableMonitoringConsumerReportPermissiblePurpose) Get() *MonitoringConsumerReportPermissiblePurpose {
	return v.value
}

func (v *NullableMonitoringConsumerReportPermissiblePurpose) Set(val *MonitoringConsumerReportPermissiblePurpose) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringConsumerReportPermissiblePurpose) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringConsumerReportPermissiblePurpose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringConsumerReportPermissiblePurpose(val *MonitoringConsumerReportPermissiblePurpose) *NullableMonitoringConsumerReportPermissiblePurpose {
	return &NullableMonitoringConsumerReportPermissiblePurpose{value: val, isSet: true}
}

func (v NullableMonitoringConsumerReportPermissiblePurpose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringConsumerReportPermissiblePurpose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

