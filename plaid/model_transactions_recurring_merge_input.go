/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.534.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// TransactionsRecurringMergeInput TransactionsRecurringMergeInput defines a single input to the `/transactions/recurring/streams/merge` endpoint.
type TransactionsRecurringMergeInput struct {
	// IDs of all the streams that will be merged into the first stream. This operation will retain the stream_id of the first stream.
	StreamIds []string `json:"stream_ids"`
}

// NewTransactionsRecurringMergeInput instantiates a new TransactionsRecurringMergeInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionsRecurringMergeInput(streamIds []string) *TransactionsRecurringMergeInput {
	this := TransactionsRecurringMergeInput{}
	this.StreamIds = streamIds
	return &this
}

// NewTransactionsRecurringMergeInputWithDefaults instantiates a new TransactionsRecurringMergeInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsRecurringMergeInputWithDefaults() *TransactionsRecurringMergeInput {
	this := TransactionsRecurringMergeInput{}
	return &this
}

// GetStreamIds returns the StreamIds field value
func (o *TransactionsRecurringMergeInput) GetStreamIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.StreamIds
}

// GetStreamIdsOk returns a tuple with the StreamIds field value
// and a boolean to check if the value has been set.
func (o *TransactionsRecurringMergeInput) GetStreamIdsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StreamIds, true
}

// SetStreamIds sets field value
func (o *TransactionsRecurringMergeInput) SetStreamIds(v []string) {
	o.StreamIds = v
}

func (o TransactionsRecurringMergeInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["stream_ids"] = o.StreamIds
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionsRecurringMergeInput struct {
	value *TransactionsRecurringMergeInput
	isSet bool
}

func (v NullableTransactionsRecurringMergeInput) Get() *TransactionsRecurringMergeInput {
	return v.value
}

func (v *NullableTransactionsRecurringMergeInput) Set(val *TransactionsRecurringMergeInput) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionsRecurringMergeInput) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionsRecurringMergeInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionsRecurringMergeInput(val *TransactionsRecurringMergeInput) *NullableTransactionsRecurringMergeInput {
	return &NullableTransactionsRecurringMergeInput{value: val, isSet: true}
}

func (v NullableTransactionsRecurringMergeInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionsRecurringMergeInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


