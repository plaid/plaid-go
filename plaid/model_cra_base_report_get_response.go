/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CraBaseReportGetResponse CraBaseReportGetResponse defines the response schema for `/cra/base_report/get`
type CraBaseReportGetResponse struct {
	Report BaseReport `json:"report"`
	// If the Base Report generation was successful but identity information cannot be returned, this array will contain information about the errors causing identity information to be missing
	Warnings []BaseReportWarning `json:"warnings"`
	// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
	RequestId string `json:"request_id"`
	AdditionalProperties map[string]interface{}
}

type _CraBaseReportGetResponse CraBaseReportGetResponse

// NewCraBaseReportGetResponse instantiates a new CraBaseReportGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCraBaseReportGetResponse(report BaseReport, warnings []BaseReportWarning, requestId string) *CraBaseReportGetResponse {
	this := CraBaseReportGetResponse{}
	this.Report = report
	this.Warnings = warnings
	this.RequestId = requestId
	return &this
}

// NewCraBaseReportGetResponseWithDefaults instantiates a new CraBaseReportGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCraBaseReportGetResponseWithDefaults() *CraBaseReportGetResponse {
	this := CraBaseReportGetResponse{}
	return &this
}

// GetReport returns the Report field value
func (o *CraBaseReportGetResponse) GetReport() BaseReport {
	if o == nil {
		var ret BaseReport
		return ret
	}

	return o.Report
}

// GetReportOk returns a tuple with the Report field value
// and a boolean to check if the value has been set.
func (o *CraBaseReportGetResponse) GetReportOk() (*BaseReport, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Report, true
}

// SetReport sets field value
func (o *CraBaseReportGetResponse) SetReport(v BaseReport) {
	o.Report = v
}

// GetWarnings returns the Warnings field value
func (o *CraBaseReportGetResponse) GetWarnings() []BaseReportWarning {
	if o == nil {
		var ret []BaseReportWarning
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
func (o *CraBaseReportGetResponse) GetWarningsOk() (*[]BaseReportWarning, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Warnings, true
}

// SetWarnings sets field value
func (o *CraBaseReportGetResponse) SetWarnings(v []BaseReportWarning) {
	o.Warnings = v
}

// GetRequestId returns the RequestId field value
func (o *CraBaseReportGetResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *CraBaseReportGetResponse) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *CraBaseReportGetResponse) SetRequestId(v string) {
	o.RequestId = v
}

func (o CraBaseReportGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["report"] = o.Report
	}
	if true {
		toSerialize["warnings"] = o.Warnings
	}
	if true {
		toSerialize["request_id"] = o.RequestId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CraBaseReportGetResponse) UnmarshalJSON(bytes []byte) (err error) {
	varCraBaseReportGetResponse := _CraBaseReportGetResponse{}

	if err = json.Unmarshal(bytes, &varCraBaseReportGetResponse); err == nil {
		*o = CraBaseReportGetResponse(varCraBaseReportGetResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "report")
		delete(additionalProperties, "warnings")
		delete(additionalProperties, "request_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCraBaseReportGetResponse struct {
	value *CraBaseReportGetResponse
	isSet bool
}

func (v NullableCraBaseReportGetResponse) Get() *CraBaseReportGetResponse {
	return v.value
}

func (v *NullableCraBaseReportGetResponse) Set(val *CraBaseReportGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCraBaseReportGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCraBaseReportGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraBaseReportGetResponse(val *CraBaseReportGetResponse) *NullableCraBaseReportGetResponse {
	return &NullableCraBaseReportGetResponse{value: val, isSet: true}
}

func (v NullableCraBaseReportGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraBaseReportGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


