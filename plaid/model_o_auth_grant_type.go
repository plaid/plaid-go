/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.627.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// OAuthGrantType The type of OAuth grant being requested:    - `client_credentials` allows exchanging a client id and client secret for a refresh and access token. - `refresh_token` allows refreshing an access token using a refresh token. When using this grant type, only the `refresh_token` field is required (along with the `client_id` and `client_secret`). - `urn:ietf:params:oauth:grant-type:token-exchange` allows exchanging a subject token for an OAuth token. When using this grant type, the `audience`, `subject_token` and `subject_token_type` fields are required. These grants are defined in their respective RFCs. `refresh_token` and `client_credentials` are defined in RFC 6749 and `urn:ietf:params:oauth:grant-type:token-exchange` is defined in RFC 8693.
type OAuthGrantType string

var _ = fmt.Printf

// List of OAuthGrantType
const (
	OAUTHGRANTTYPE_REFRESH_TOKEN OAuthGrantType = "refresh_token"
	OAUTHGRANTTYPE_URNIETFPARAMSOAUTHGRANT_TYPETOKEN_EXCHANGE OAuthGrantType = "urn:ietf:params:oauth:grant-type:token-exchange"
	OAUTHGRANTTYPE_CLIENT_CREDENTIALS OAuthGrantType = "client_credentials"
)

var allowedOAuthGrantTypeEnumValues = []OAuthGrantType{
	"refresh_token",
	"urn:ietf:params:oauth:grant-type:token-exchange",
	"client_credentials",
}

func (v *OAuthGrantType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := OAuthGrantType(value)


	*v = enumTypeValue
	return nil
}

// NewOAuthGrantTypeFromValue returns a pointer to a valid OAuthGrantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOAuthGrantTypeFromValue(v string) (*OAuthGrantType, error) {
	ev := OAuthGrantType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OAuthGrantType) IsValid() bool {
	for _, existing := range allowedOAuthGrantTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OAuthGrantType value
func (v OAuthGrantType) Ptr() *OAuthGrantType {
	return &v
}

type NullableOAuthGrantType struct {
	value *OAuthGrantType
	isSet bool
}

func (v NullableOAuthGrantType) Get() *OAuthGrantType {
	return v.value
}

func (v *NullableOAuthGrantType) Set(val *OAuthGrantType) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthGrantType) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthGrantType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthGrantType(val *OAuthGrantType) *NullableOAuthGrantType {
	return &NullableOAuthGrantType{value: val, isSet: true}
}

func (v NullableOAuthGrantType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthGrantType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

