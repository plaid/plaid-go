/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.385.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// LinkEventsWebhook Contains a summary of the events from a link session
type LinkEventsWebhook struct {
	// `LINK`
	WebhookType string `json:"webhook_type"`
	// `EVENTS`
	WebhookCode string `json:"webhook_code"`
	// The link events emitted during the link session
	Events []LinkEvent `json:"events"`
	// An identifier for the link session these events occurred in
	LinkSessionId string `json:"link_session_id"`
	// The link token used to create the link session these events are from
	LinkToken string `json:"link_token"`
	AdditionalProperties map[string]interface{}
}

type _LinkEventsWebhook LinkEventsWebhook

// NewLinkEventsWebhook instantiates a new LinkEventsWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkEventsWebhook(webhookType string, webhookCode string, events []LinkEvent, linkSessionId string, linkToken string) *LinkEventsWebhook {
	this := LinkEventsWebhook{}
	this.WebhookType = webhookType
	this.WebhookCode = webhookCode
	this.Events = events
	this.LinkSessionId = linkSessionId
	this.LinkToken = linkToken
	return &this
}

// NewLinkEventsWebhookWithDefaults instantiates a new LinkEventsWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkEventsWebhookWithDefaults() *LinkEventsWebhook {
	this := LinkEventsWebhook{}
	return &this
}

// GetWebhookType returns the WebhookType field value
func (o *LinkEventsWebhook) GetWebhookType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookType
}

// GetWebhookTypeOk returns a tuple with the WebhookType field value
// and a boolean to check if the value has been set.
func (o *LinkEventsWebhook) GetWebhookTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WebhookType, true
}

// SetWebhookType sets field value
func (o *LinkEventsWebhook) SetWebhookType(v string) {
	o.WebhookType = v
}

// GetWebhookCode returns the WebhookCode field value
func (o *LinkEventsWebhook) GetWebhookCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookCode
}

// GetWebhookCodeOk returns a tuple with the WebhookCode field value
// and a boolean to check if the value has been set.
func (o *LinkEventsWebhook) GetWebhookCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WebhookCode, true
}

// SetWebhookCode sets field value
func (o *LinkEventsWebhook) SetWebhookCode(v string) {
	o.WebhookCode = v
}

// GetEvents returns the Events field value
func (o *LinkEventsWebhook) GetEvents() []LinkEvent {
	if o == nil {
		var ret []LinkEvent
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *LinkEventsWebhook) GetEventsOk() (*[]LinkEvent, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Events, true
}

// SetEvents sets field value
func (o *LinkEventsWebhook) SetEvents(v []LinkEvent) {
	o.Events = v
}

// GetLinkSessionId returns the LinkSessionId field value
func (o *LinkEventsWebhook) GetLinkSessionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkSessionId
}

// GetLinkSessionIdOk returns a tuple with the LinkSessionId field value
// and a boolean to check if the value has been set.
func (o *LinkEventsWebhook) GetLinkSessionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LinkSessionId, true
}

// SetLinkSessionId sets field value
func (o *LinkEventsWebhook) SetLinkSessionId(v string) {
	o.LinkSessionId = v
}

// GetLinkToken returns the LinkToken field value
func (o *LinkEventsWebhook) GetLinkToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkToken
}

// GetLinkTokenOk returns a tuple with the LinkToken field value
// and a boolean to check if the value has been set.
func (o *LinkEventsWebhook) GetLinkTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.LinkToken, true
}

// SetLinkToken sets field value
func (o *LinkEventsWebhook) SetLinkToken(v string) {
	o.LinkToken = v
}

func (o LinkEventsWebhook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["webhook_type"] = o.WebhookType
	}
	if true {
		toSerialize["webhook_code"] = o.WebhookCode
	}
	if true {
		toSerialize["events"] = o.Events
	}
	if true {
		toSerialize["link_session_id"] = o.LinkSessionId
	}
	if true {
		toSerialize["link_token"] = o.LinkToken
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LinkEventsWebhook) UnmarshalJSON(bytes []byte) (err error) {
	varLinkEventsWebhook := _LinkEventsWebhook{}

	if err = json.Unmarshal(bytes, &varLinkEventsWebhook); err == nil {
		*o = LinkEventsWebhook(varLinkEventsWebhook)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "webhook_type")
		delete(additionalProperties, "webhook_code")
		delete(additionalProperties, "events")
		delete(additionalProperties, "link_session_id")
		delete(additionalProperties, "link_token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkEventsWebhook struct {
	value *LinkEventsWebhook
	isSet bool
}

func (v NullableLinkEventsWebhook) Get() *LinkEventsWebhook {
	return v.value
}

func (v *NullableLinkEventsWebhook) Set(val *LinkEventsWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkEventsWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkEventsWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkEventsWebhook(val *LinkEventsWebhook) *NullableLinkEventsWebhook {
	return &NullableLinkEventsWebhook{value: val, isSet: true}
}

func (v NullableLinkEventsWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkEventsWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


