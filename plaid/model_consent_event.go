/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// ConsentEvent Describes a consent event.
type ConsentEvent struct {
	// The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
	ItemId *string `json:"item_id,omitempty"`
	// The date and time when the consent event occurred, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	EventType *ConsentEventType `json:"event_type,omitempty"`
	EventCode *ConsentEventCode `json:"event_code,omitempty"`
	// Unique identifier for the institution associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.
	InstitutionId NullableString `json:"institution_id,omitempty"`
	// The full name of the institution associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.
	InstitutionName NullableString `json:"institution_name,omitempty"`
	Initiator *ConsentEventInitiator `json:"initiator,omitempty"`
	// A list of strings containing the full list of use cases the end user has consented to for the Item.  See the [full list](/docs/link/data-transparency-messaging-migration-guide/#updating-link-customizations) of use cases.
	ConsentedUseCases *[]string `json:"consented_use_cases,omitempty"`
	// A list of strings containing the full list of data scopes the end user has consented to for the Item. These correspond to consented products; see the [full mapping](/docs/link/data-transparency-messaging-migration-guide/#data-scopes-by-product) of data scopes and products.
	ConsentedDataScopes *[]string `json:"consented_data_scopes,omitempty"`
	// An array containing the accounts associated with the Item for which authorizations are granted.
	ConsentedAccounts *[]ConsentedAccount `json:"consented_accounts,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConsentEvent ConsentEvent

// NewConsentEvent instantiates a new ConsentEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentEvent() *ConsentEvent {
	this := ConsentEvent{}
	return &this
}

// NewConsentEventWithDefaults instantiates a new ConsentEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentEventWithDefaults() *ConsentEvent {
	this := ConsentEvent{}
	return &this
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *ConsentEvent) GetItemId() string {
	if o == nil || o.ItemId == nil {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentEvent) GetItemIdOk() (*string, bool) {
	if o == nil || o.ItemId == nil {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *ConsentEvent) HasItemId() bool {
	if o != nil && o.ItemId != nil {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *ConsentEvent) SetItemId(v string) {
	o.ItemId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ConsentEvent) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentEvent) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ConsentEvent) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ConsentEvent) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *ConsentEvent) GetEventType() ConsentEventType {
	if o == nil || o.EventType == nil {
		var ret ConsentEventType
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentEvent) GetEventTypeOk() (*ConsentEventType, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *ConsentEvent) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given ConsentEventType and assigns it to the EventType field.
func (o *ConsentEvent) SetEventType(v ConsentEventType) {
	o.EventType = &v
}

// GetEventCode returns the EventCode field value if set, zero value otherwise.
func (o *ConsentEvent) GetEventCode() ConsentEventCode {
	if o == nil || o.EventCode == nil {
		var ret ConsentEventCode
		return ret
	}
	return *o.EventCode
}

// GetEventCodeOk returns a tuple with the EventCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentEvent) GetEventCodeOk() (*ConsentEventCode, bool) {
	if o == nil || o.EventCode == nil {
		return nil, false
	}
	return o.EventCode, true
}

// HasEventCode returns a boolean if a field has been set.
func (o *ConsentEvent) HasEventCode() bool {
	if o != nil && o.EventCode != nil {
		return true
	}

	return false
}

// SetEventCode gets a reference to the given ConsentEventCode and assigns it to the EventCode field.
func (o *ConsentEvent) SetEventCode(v ConsentEventCode) {
	o.EventCode = &v
}

// GetInstitutionId returns the InstitutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsentEvent) GetInstitutionId() string {
	if o == nil || o.InstitutionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.InstitutionId.Get()
}

// GetInstitutionIdOk returns a tuple with the InstitutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsentEvent) GetInstitutionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstitutionId.Get(), o.InstitutionId.IsSet()
}

// HasInstitutionId returns a boolean if a field has been set.
func (o *ConsentEvent) HasInstitutionId() bool {
	if o != nil && o.InstitutionId.IsSet() {
		return true
	}

	return false
}

// SetInstitutionId gets a reference to the given NullableString and assigns it to the InstitutionId field.
func (o *ConsentEvent) SetInstitutionId(v string) {
	o.InstitutionId.Set(&v)
}
// SetInstitutionIdNil sets the value for InstitutionId to be an explicit nil
func (o *ConsentEvent) SetInstitutionIdNil() {
	o.InstitutionId.Set(nil)
}

// UnsetInstitutionId ensures that no value is present for InstitutionId, not even an explicit nil
func (o *ConsentEvent) UnsetInstitutionId() {
	o.InstitutionId.Unset()
}

// GetInstitutionName returns the InstitutionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsentEvent) GetInstitutionName() string {
	if o == nil || o.InstitutionName.Get() == nil {
		var ret string
		return ret
	}
	return *o.InstitutionName.Get()
}

// GetInstitutionNameOk returns a tuple with the InstitutionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsentEvent) GetInstitutionNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstitutionName.Get(), o.InstitutionName.IsSet()
}

// HasInstitutionName returns a boolean if a field has been set.
func (o *ConsentEvent) HasInstitutionName() bool {
	if o != nil && o.InstitutionName.IsSet() {
		return true
	}

	return false
}

// SetInstitutionName gets a reference to the given NullableString and assigns it to the InstitutionName field.
func (o *ConsentEvent) SetInstitutionName(v string) {
	o.InstitutionName.Set(&v)
}
// SetInstitutionNameNil sets the value for InstitutionName to be an explicit nil
func (o *ConsentEvent) SetInstitutionNameNil() {
	o.InstitutionName.Set(nil)
}

// UnsetInstitutionName ensures that no value is present for InstitutionName, not even an explicit nil
func (o *ConsentEvent) UnsetInstitutionName() {
	o.InstitutionName.Unset()
}

// GetInitiator returns the Initiator field value if set, zero value otherwise.
func (o *ConsentEvent) GetInitiator() ConsentEventInitiator {
	if o == nil || o.Initiator == nil {
		var ret ConsentEventInitiator
		return ret
	}
	return *o.Initiator
}

// GetInitiatorOk returns a tuple with the Initiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentEvent) GetInitiatorOk() (*ConsentEventInitiator, bool) {
	if o == nil || o.Initiator == nil {
		return nil, false
	}
	return o.Initiator, true
}

// HasInitiator returns a boolean if a field has been set.
func (o *ConsentEvent) HasInitiator() bool {
	if o != nil && o.Initiator != nil {
		return true
	}

	return false
}

// SetInitiator gets a reference to the given ConsentEventInitiator and assigns it to the Initiator field.
func (o *ConsentEvent) SetInitiator(v ConsentEventInitiator) {
	o.Initiator = &v
}

// GetConsentedUseCases returns the ConsentedUseCases field value if set, zero value otherwise.
func (o *ConsentEvent) GetConsentedUseCases() []string {
	if o == nil || o.ConsentedUseCases == nil {
		var ret []string
		return ret
	}
	return *o.ConsentedUseCases
}

// GetConsentedUseCasesOk returns a tuple with the ConsentedUseCases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentEvent) GetConsentedUseCasesOk() (*[]string, bool) {
	if o == nil || o.ConsentedUseCases == nil {
		return nil, false
	}
	return o.ConsentedUseCases, true
}

// HasConsentedUseCases returns a boolean if a field has been set.
func (o *ConsentEvent) HasConsentedUseCases() bool {
	if o != nil && o.ConsentedUseCases != nil {
		return true
	}

	return false
}

// SetConsentedUseCases gets a reference to the given []string and assigns it to the ConsentedUseCases field.
func (o *ConsentEvent) SetConsentedUseCases(v []string) {
	o.ConsentedUseCases = &v
}

// GetConsentedDataScopes returns the ConsentedDataScopes field value if set, zero value otherwise.
func (o *ConsentEvent) GetConsentedDataScopes() []string {
	if o == nil || o.ConsentedDataScopes == nil {
		var ret []string
		return ret
	}
	return *o.ConsentedDataScopes
}

// GetConsentedDataScopesOk returns a tuple with the ConsentedDataScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentEvent) GetConsentedDataScopesOk() (*[]string, bool) {
	if o == nil || o.ConsentedDataScopes == nil {
		return nil, false
	}
	return o.ConsentedDataScopes, true
}

// HasConsentedDataScopes returns a boolean if a field has been set.
func (o *ConsentEvent) HasConsentedDataScopes() bool {
	if o != nil && o.ConsentedDataScopes != nil {
		return true
	}

	return false
}

// SetConsentedDataScopes gets a reference to the given []string and assigns it to the ConsentedDataScopes field.
func (o *ConsentEvent) SetConsentedDataScopes(v []string) {
	o.ConsentedDataScopes = &v
}

// GetConsentedAccounts returns the ConsentedAccounts field value if set, zero value otherwise.
func (o *ConsentEvent) GetConsentedAccounts() []ConsentedAccount {
	if o == nil || o.ConsentedAccounts == nil {
		var ret []ConsentedAccount
		return ret
	}
	return *o.ConsentedAccounts
}

// GetConsentedAccountsOk returns a tuple with the ConsentedAccounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentEvent) GetConsentedAccountsOk() (*[]ConsentedAccount, bool) {
	if o == nil || o.ConsentedAccounts == nil {
		return nil, false
	}
	return o.ConsentedAccounts, true
}

// HasConsentedAccounts returns a boolean if a field has been set.
func (o *ConsentEvent) HasConsentedAccounts() bool {
	if o != nil && o.ConsentedAccounts != nil {
		return true
	}

	return false
}

// SetConsentedAccounts gets a reference to the given []ConsentedAccount and assigns it to the ConsentedAccounts field.
func (o *ConsentEvent) SetConsentedAccounts(v []ConsentedAccount) {
	o.ConsentedAccounts = &v
}

func (o ConsentEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ItemId != nil {
		toSerialize["item_id"] = o.ItemId
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.EventType != nil {
		toSerialize["event_type"] = o.EventType
	}
	if o.EventCode != nil {
		toSerialize["event_code"] = o.EventCode
	}
	if o.InstitutionId.IsSet() {
		toSerialize["institution_id"] = o.InstitutionId.Get()
	}
	if o.InstitutionName.IsSet() {
		toSerialize["institution_name"] = o.InstitutionName.Get()
	}
	if o.Initiator != nil {
		toSerialize["initiator"] = o.Initiator
	}
	if o.ConsentedUseCases != nil {
		toSerialize["consented_use_cases"] = o.ConsentedUseCases
	}
	if o.ConsentedDataScopes != nil {
		toSerialize["consented_data_scopes"] = o.ConsentedDataScopes
	}
	if o.ConsentedAccounts != nil {
		toSerialize["consented_accounts"] = o.ConsentedAccounts
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ConsentEvent) UnmarshalJSON(bytes []byte) (err error) {
	varConsentEvent := _ConsentEvent{}

	if err = json.Unmarshal(bytes, &varConsentEvent); err == nil {
		*o = ConsentEvent(varConsentEvent)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "item_id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "event_type")
		delete(additionalProperties, "event_code")
		delete(additionalProperties, "institution_id")
		delete(additionalProperties, "institution_name")
		delete(additionalProperties, "initiator")
		delete(additionalProperties, "consented_use_cases")
		delete(additionalProperties, "consented_data_scopes")
		delete(additionalProperties, "consented_accounts")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConsentEvent struct {
	value *ConsentEvent
	isSet bool
}

func (v NullableConsentEvent) Get() *ConsentEvent {
	return v.value
}

func (v *NullableConsentEvent) Set(val *ConsentEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentEvent(val *ConsentEvent) *NullableConsentEvent {
	return &NullableConsentEvent{value: val, isSet: true}
}

func (v NullableConsentEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


