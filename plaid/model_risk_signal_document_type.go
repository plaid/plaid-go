/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.556.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// RiskSignalDocumentType Type of a document for risk signal analysis
type RiskSignalDocumentType string

var _ = fmt.Printf

// List of RiskSignalDocumentType
const (
	RISKSIGNALDOCUMENTTYPE_UNKNOWN RiskSignalDocumentType = "UNKNOWN"
	RISKSIGNALDOCUMENTTYPE_BANK_STATEMENT RiskSignalDocumentType = "BANK_STATEMENT"
	RISKSIGNALDOCUMENTTYPE_BENEFITS_STATEMENT RiskSignalDocumentType = "BENEFITS_STATEMENT"
	RISKSIGNALDOCUMENTTYPE_BUSINESS_FILING RiskSignalDocumentType = "BUSINESS_FILING"
	RISKSIGNALDOCUMENTTYPE_CHECK RiskSignalDocumentType = "CHECK"
	RISKSIGNALDOCUMENTTYPE_DRIVING_LICENSE RiskSignalDocumentType = "DRIVING_LICENSE"
	RISKSIGNALDOCUMENTTYPE_FINANCIAL_STATEMENT RiskSignalDocumentType = "FINANCIAL_STATEMENT"
	RISKSIGNALDOCUMENTTYPE_INVOICE RiskSignalDocumentType = "INVOICE"
	RISKSIGNALDOCUMENTTYPE_PAYSLIP RiskSignalDocumentType = "PAYSLIP"
	RISKSIGNALDOCUMENTTYPE_SOCIAL_SECURITY_CARD RiskSignalDocumentType = "SOCIAL_SECURITY_CARD"
	RISKSIGNALDOCUMENTTYPE_TAX_FORM RiskSignalDocumentType = "TAX_FORM"
	RISKSIGNALDOCUMENTTYPE_UTILITY_BILL RiskSignalDocumentType = "UTILITY_BILL"
)

var allowedRiskSignalDocumentTypeEnumValues = []RiskSignalDocumentType{
	"UNKNOWN",
	"BANK_STATEMENT",
	"BENEFITS_STATEMENT",
	"BUSINESS_FILING",
	"CHECK",
	"DRIVING_LICENSE",
	"FINANCIAL_STATEMENT",
	"INVOICE",
	"PAYSLIP",
	"SOCIAL_SECURITY_CARD",
	"TAX_FORM",
	"UTILITY_BILL",
}

func (v *RiskSignalDocumentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := RiskSignalDocumentType(value)


	*v = enumTypeValue
	return nil
}

// NewRiskSignalDocumentTypeFromValue returns a pointer to a valid RiskSignalDocumentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRiskSignalDocumentTypeFromValue(v string) (*RiskSignalDocumentType, error) {
	ev := RiskSignalDocumentType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RiskSignalDocumentType) IsValid() bool {
	for _, existing := range allowedRiskSignalDocumentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RiskSignalDocumentType value
func (v RiskSignalDocumentType) Ptr() *RiskSignalDocumentType {
	return &v
}

type NullableRiskSignalDocumentType struct {
	value *RiskSignalDocumentType
	isSet bool
}

func (v NullableRiskSignalDocumentType) Get() *RiskSignalDocumentType {
	return v.value
}

func (v *NullableRiskSignalDocumentType) Set(val *RiskSignalDocumentType) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskSignalDocumentType) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskSignalDocumentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskSignalDocumentType(val *RiskSignalDocumentType) *NullableRiskSignalDocumentType {
	return &NullableRiskSignalDocumentType{value: val, isSet: true}
}

func (v NullableRiskSignalDocumentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskSignalDocumentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

