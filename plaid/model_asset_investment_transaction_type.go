/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// AssetInvestmentTransactionType Asset Investment Transaction Type Enumerated derived by Vendor.
type AssetInvestmentTransactionType string

var _ = fmt.Printf

// List of AssetInvestmentTransactionType
const (
	ASSETINVESTMENTTRANSACTIONTYPE_BUY AssetInvestmentTransactionType = "Buy"
	ASSETINVESTMENTTRANSACTIONTYPE_SELL AssetInvestmentTransactionType = "Sell"
	ASSETINVESTMENTTRANSACTIONTYPE_DIVIDENDS AssetInvestmentTransactionType = "Dividends"
	ASSETINVESTMENTTRANSACTIONTYPE_INTEREST AssetInvestmentTransactionType = "Interest"
	ASSETINVESTMENTTRANSACTIONTYPE_TRANSFERS AssetInvestmentTransactionType = "Transfers"
	ASSETINVESTMENTTRANSACTIONTYPE_REINVESTMENTS AssetInvestmentTransactionType = "Reinvestments"
	ASSETINVESTMENTTRANSACTIONTYPE_FUNDS_RECEIVED AssetInvestmentTransactionType = "FundsReceived"
	ASSETINVESTMENTTRANSACTIONTYPE_OTHER AssetInvestmentTransactionType = "Other"
)

var allowedAssetInvestmentTransactionTypeEnumValues = []AssetInvestmentTransactionType{
	"Buy",
	"Sell",
	"Dividends",
	"Interest",
	"Transfers",
	"Reinvestments",
	"FundsReceived",
	"Other",
}

func (v *AssetInvestmentTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := AssetInvestmentTransactionType(value)


	*v = enumTypeValue
	return nil
}

// NewAssetInvestmentTransactionTypeFromValue returns a pointer to a valid AssetInvestmentTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetInvestmentTransactionTypeFromValue(v string) (*AssetInvestmentTransactionType, error) {
	ev := AssetInvestmentTransactionType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetInvestmentTransactionType) IsValid() bool {
	for _, existing := range allowedAssetInvestmentTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssetInvestmentTransactionType value
func (v AssetInvestmentTransactionType) Ptr() *AssetInvestmentTransactionType {
	return &v
}

type NullableAssetInvestmentTransactionType struct {
	value *AssetInvestmentTransactionType
	isSet bool
}

func (v NullableAssetInvestmentTransactionType) Get() *AssetInvestmentTransactionType {
	return v.value
}

func (v *NullableAssetInvestmentTransactionType) Set(val *AssetInvestmentTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetInvestmentTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetInvestmentTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetInvestmentTransactionType(val *AssetInvestmentTransactionType) *NullableAssetInvestmentTransactionType {
	return &NullableAssetInvestmentTransactionType{value: val, isSet: true}
}

func (v NullableAssetInvestmentTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetInvestmentTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

