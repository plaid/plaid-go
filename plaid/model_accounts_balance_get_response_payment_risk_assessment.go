/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// AccountsBalanceGetResponsePaymentRiskAssessment Provides a detailed risk assessment for the requested transaction. For this field to be returned, the client must be enrolled in the Balance Plus beta program and the [`payment_details`](http://plaid.com/docs/balance/balance-plus/#accounts-balance-get-request-payment-details) object must have been sent in the request.
type AccountsBalanceGetResponsePaymentRiskAssessment struct {
	RiskLevel BalancePlusRiskLevel `json:"risk_level"`
	Attributes BalancePlusAttributes `json:"attributes"`
	// A risk score ranging from 1-99, reflecting the likelihood of ACH debit return. A higher score indicates a greater risk of return, often due to overdrawn accounts or account ineligibility to receive ACH transactions. Typical return codes include \"R01\", \"R02\", \"R03\", \"R04\", \"R06\", \"R08\", \"R09\", \"R13\", \"R16\", \"R17\", \"R20\", \"R23\", etc., with a turnaround of 2 banking days.
	Score NullableInt32 `json:"score,omitempty"`
	// Timestamp of the last successful balance update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
	BalanceLastUpdated time.Time `json:"balance_last_updated"`
	// An array of objects, each representing a specific reason contributing to the risk assessment of an ACH transaction. This field is only supplied for transactions classified as `HIGH`, `MEDIUM-HIGH`, or `MEDIUM` risk.
	RiskReasons *[]RiskReason `json:"risk_reasons,omitempty"`
	// Whether the proposed transaction exceeds the balance threshold set in the request. `true` indicates higher risk; `false` indicates lower risk. If the `amount` multiplied by the `balance_threshold_percentage` (as a percentage) exceeds the balance in the account, then `exceeds_balance_threshold` will be true, otherwise, it will be false. For example, if the `amount` is 200 and the `balance_threshold_percentage` is 90, then the account balance must be at least 180 for `exceeds_balance_threshold` to be false.   By default, the available balance will be used for this calculation; if it cannot be obtained, the current balance will be used.   This field is particularly useful for customers using indirect Items and who do not have direct access to raw balance data.
	ExceedsBalanceThreshold bool `json:"exceeds_balance_threshold"`
	AdditionalProperties map[string]interface{}
}

type _AccountsBalanceGetResponsePaymentRiskAssessment AccountsBalanceGetResponsePaymentRiskAssessment

// NewAccountsBalanceGetResponsePaymentRiskAssessment instantiates a new AccountsBalanceGetResponsePaymentRiskAssessment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountsBalanceGetResponsePaymentRiskAssessment(riskLevel BalancePlusRiskLevel, attributes BalancePlusAttributes, balanceLastUpdated time.Time, exceedsBalanceThreshold bool) *AccountsBalanceGetResponsePaymentRiskAssessment {
	this := AccountsBalanceGetResponsePaymentRiskAssessment{}
	this.RiskLevel = riskLevel
	this.Attributes = attributes
	this.BalanceLastUpdated = balanceLastUpdated
	this.ExceedsBalanceThreshold = exceedsBalanceThreshold
	return &this
}

// NewAccountsBalanceGetResponsePaymentRiskAssessmentWithDefaults instantiates a new AccountsBalanceGetResponsePaymentRiskAssessment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountsBalanceGetResponsePaymentRiskAssessmentWithDefaults() *AccountsBalanceGetResponsePaymentRiskAssessment {
	this := AccountsBalanceGetResponsePaymentRiskAssessment{}
	return &this
}

// GetRiskLevel returns the RiskLevel field value
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetRiskLevel() BalancePlusRiskLevel {
	if o == nil {
		var ret BalancePlusRiskLevel
		return ret
	}

	return o.RiskLevel
}

// GetRiskLevelOk returns a tuple with the RiskLevel field value
// and a boolean to check if the value has been set.
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetRiskLevelOk() (*BalancePlusRiskLevel, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RiskLevel, true
}

// SetRiskLevel sets field value
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) SetRiskLevel(v BalancePlusRiskLevel) {
	o.RiskLevel = v
}

// GetAttributes returns the Attributes field value
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetAttributes() BalancePlusAttributes {
	if o == nil {
		var ret BalancePlusAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetAttributesOk() (*BalancePlusAttributes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) SetAttributes(v BalancePlusAttributes) {
	o.Attributes = v
}

// GetScore returns the Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetScore() int32 {
	if o == nil || o.Score.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Score.Get()
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetScoreOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Score.Get(), o.Score.IsSet()
}

// HasScore returns a boolean if a field has been set.
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) HasScore() bool {
	if o != nil && o.Score.IsSet() {
		return true
	}

	return false
}

// SetScore gets a reference to the given NullableInt32 and assigns it to the Score field.
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) SetScore(v int32) {
	o.Score.Set(&v)
}
// SetScoreNil sets the value for Score to be an explicit nil
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) SetScoreNil() {
	o.Score.Set(nil)
}

// UnsetScore ensures that no value is present for Score, not even an explicit nil
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) UnsetScore() {
	o.Score.Unset()
}

// GetBalanceLastUpdated returns the BalanceLastUpdated field value
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetBalanceLastUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.BalanceLastUpdated
}

// GetBalanceLastUpdatedOk returns a tuple with the BalanceLastUpdated field value
// and a boolean to check if the value has been set.
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetBalanceLastUpdatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BalanceLastUpdated, true
}

// SetBalanceLastUpdated sets field value
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) SetBalanceLastUpdated(v time.Time) {
	o.BalanceLastUpdated = v
}

// GetRiskReasons returns the RiskReasons field value if set, zero value otherwise.
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetRiskReasons() []RiskReason {
	if o == nil || o.RiskReasons == nil {
		var ret []RiskReason
		return ret
	}
	return *o.RiskReasons
}

// GetRiskReasonsOk returns a tuple with the RiskReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetRiskReasonsOk() (*[]RiskReason, bool) {
	if o == nil || o.RiskReasons == nil {
		return nil, false
	}
	return o.RiskReasons, true
}

// HasRiskReasons returns a boolean if a field has been set.
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) HasRiskReasons() bool {
	if o != nil && o.RiskReasons != nil {
		return true
	}

	return false
}

// SetRiskReasons gets a reference to the given []RiskReason and assigns it to the RiskReasons field.
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) SetRiskReasons(v []RiskReason) {
	o.RiskReasons = &v
}

// GetExceedsBalanceThreshold returns the ExceedsBalanceThreshold field value
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetExceedsBalanceThreshold() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ExceedsBalanceThreshold
}

// GetExceedsBalanceThresholdOk returns a tuple with the ExceedsBalanceThreshold field value
// and a boolean to check if the value has been set.
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) GetExceedsBalanceThresholdOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExceedsBalanceThreshold, true
}

// SetExceedsBalanceThreshold sets field value
func (o *AccountsBalanceGetResponsePaymentRiskAssessment) SetExceedsBalanceThreshold(v bool) {
	o.ExceedsBalanceThreshold = v
}

func (o AccountsBalanceGetResponsePaymentRiskAssessment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["risk_level"] = o.RiskLevel
	}
	if true {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Score.IsSet() {
		toSerialize["score"] = o.Score.Get()
	}
	if true {
		toSerialize["balance_last_updated"] = o.BalanceLastUpdated
	}
	if o.RiskReasons != nil {
		toSerialize["risk_reasons"] = o.RiskReasons
	}
	if true {
		toSerialize["exceeds_balance_threshold"] = o.ExceedsBalanceThreshold
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AccountsBalanceGetResponsePaymentRiskAssessment) UnmarshalJSON(bytes []byte) (err error) {
	varAccountsBalanceGetResponsePaymentRiskAssessment := _AccountsBalanceGetResponsePaymentRiskAssessment{}

	if err = json.Unmarshal(bytes, &varAccountsBalanceGetResponsePaymentRiskAssessment); err == nil {
		*o = AccountsBalanceGetResponsePaymentRiskAssessment(varAccountsBalanceGetResponsePaymentRiskAssessment)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "risk_level")
		delete(additionalProperties, "attributes")
		delete(additionalProperties, "score")
		delete(additionalProperties, "balance_last_updated")
		delete(additionalProperties, "risk_reasons")
		delete(additionalProperties, "exceeds_balance_threshold")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountsBalanceGetResponsePaymentRiskAssessment struct {
	value *AccountsBalanceGetResponsePaymentRiskAssessment
	isSet bool
}

func (v NullableAccountsBalanceGetResponsePaymentRiskAssessment) Get() *AccountsBalanceGetResponsePaymentRiskAssessment {
	return v.value
}

func (v *NullableAccountsBalanceGetResponsePaymentRiskAssessment) Set(val *AccountsBalanceGetResponsePaymentRiskAssessment) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountsBalanceGetResponsePaymentRiskAssessment) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountsBalanceGetResponsePaymentRiskAssessment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountsBalanceGetResponsePaymentRiskAssessment(val *AccountsBalanceGetResponsePaymentRiskAssessment) *NullableAccountsBalanceGetResponsePaymentRiskAssessment {
	return &NullableAccountsBalanceGetResponsePaymentRiskAssessment{value: val, isSet: true}
}

func (v NullableAccountsBalanceGetResponsePaymentRiskAssessment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountsBalanceGetResponsePaymentRiskAssessment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


