/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// LinkTokenCreateRequestUpdate Specifies options for initializing Link for [update mode](https://plaid.com/docs/link/update-mode).
type LinkTokenCreateRequestUpdate struct {
	// If `true`, enables [update mode with Account Select](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts) for institutions in the US and Canada that do not use OAuth, or that use OAuth but do not have their own account selection flow. For institutions in the US that have an OAuth account selection flow (i.e. most OAuth-enabled institutions), update mode with Account Select will always be enabled, regardless of the value of this field.
	AccountSelectionEnabled *bool `json:"account_selection_enabled,omitempty"`
	// By default, Plaid will enable the reauthorization flow during update mode for an Item enabled for [Data Transparency Messaging](https://plaid.com/docs/link/data-transparency-messaging-migration-guide/) if the Item expires within six months. During a reauthorization flow, an end user will review Plaid's end user privacy policy, use case and data scope consents, and account access consents; they may also be required to log in to their financial institution's OAuth flow. After the end user successfully completes the reauthorization flow, the Item's expiration date will be extended to 12 months from the time that the reauthorization took place. This field allows you to optionally override the default reauthorization scheduling logic to either forcibly enable or disable the reauthorization flow for a given update mode session. This field does not impact the flow for Items at institutions in the EU or UK.
	ReauthorizationEnabled *bool `json:"reauthorization_enabled,omitempty"`
	// If `true`, a `user_token` must also be provided, and Link will open in update mode for the given user.
	User *bool `json:"user,omitempty"`
	// An array of `item_id`s associated with the user to be updated in update mode. If empty or `null`, this field will default to initializing update mode for the most recent unhealthy Item associated with the user. A `user_token` must also be provided to use this field. 
	ItemIds []string `json:"item_ids,omitempty"`
}

// NewLinkTokenCreateRequestUpdate instantiates a new LinkTokenCreateRequestUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkTokenCreateRequestUpdate() *LinkTokenCreateRequestUpdate {
	this := LinkTokenCreateRequestUpdate{}
	var accountSelectionEnabled bool = false
	this.AccountSelectionEnabled = &accountSelectionEnabled
	var user bool = false
	this.User = &user
	return &this
}

// NewLinkTokenCreateRequestUpdateWithDefaults instantiates a new LinkTokenCreateRequestUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkTokenCreateRequestUpdateWithDefaults() *LinkTokenCreateRequestUpdate {
	this := LinkTokenCreateRequestUpdate{}
	var accountSelectionEnabled bool = false
	this.AccountSelectionEnabled = &accountSelectionEnabled
	var user bool = false
	this.User = &user
	return &this
}

// GetAccountSelectionEnabled returns the AccountSelectionEnabled field value if set, zero value otherwise.
func (o *LinkTokenCreateRequestUpdate) GetAccountSelectionEnabled() bool {
	if o == nil || o.AccountSelectionEnabled == nil {
		var ret bool
		return ret
	}
	return *o.AccountSelectionEnabled
}

// GetAccountSelectionEnabledOk returns a tuple with the AccountSelectionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkTokenCreateRequestUpdate) GetAccountSelectionEnabledOk() (*bool, bool) {
	if o == nil || o.AccountSelectionEnabled == nil {
		return nil, false
	}
	return o.AccountSelectionEnabled, true
}

// HasAccountSelectionEnabled returns a boolean if a field has been set.
func (o *LinkTokenCreateRequestUpdate) HasAccountSelectionEnabled() bool {
	if o != nil && o.AccountSelectionEnabled != nil {
		return true
	}

	return false
}

// SetAccountSelectionEnabled gets a reference to the given bool and assigns it to the AccountSelectionEnabled field.
func (o *LinkTokenCreateRequestUpdate) SetAccountSelectionEnabled(v bool) {
	o.AccountSelectionEnabled = &v
}

// GetReauthorizationEnabled returns the ReauthorizationEnabled field value if set, zero value otherwise.
func (o *LinkTokenCreateRequestUpdate) GetReauthorizationEnabled() bool {
	if o == nil || o.ReauthorizationEnabled == nil {
		var ret bool
		return ret
	}
	return *o.ReauthorizationEnabled
}

// GetReauthorizationEnabledOk returns a tuple with the ReauthorizationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkTokenCreateRequestUpdate) GetReauthorizationEnabledOk() (*bool, bool) {
	if o == nil || o.ReauthorizationEnabled == nil {
		return nil, false
	}
	return o.ReauthorizationEnabled, true
}

// HasReauthorizationEnabled returns a boolean if a field has been set.
func (o *LinkTokenCreateRequestUpdate) HasReauthorizationEnabled() bool {
	if o != nil && o.ReauthorizationEnabled != nil {
		return true
	}

	return false
}

// SetReauthorizationEnabled gets a reference to the given bool and assigns it to the ReauthorizationEnabled field.
func (o *LinkTokenCreateRequestUpdate) SetReauthorizationEnabled(v bool) {
	o.ReauthorizationEnabled = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *LinkTokenCreateRequestUpdate) GetUser() bool {
	if o == nil || o.User == nil {
		var ret bool
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkTokenCreateRequestUpdate) GetUserOk() (*bool, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *LinkTokenCreateRequestUpdate) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given bool and assigns it to the User field.
func (o *LinkTokenCreateRequestUpdate) SetUser(v bool) {
	o.User = &v
}

// GetItemIds returns the ItemIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LinkTokenCreateRequestUpdate) GetItemIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ItemIds
}

// GetItemIdsOk returns a tuple with the ItemIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LinkTokenCreateRequestUpdate) GetItemIdsOk() (*[]string, bool) {
	if o == nil || o.ItemIds == nil {
		return nil, false
	}
	return &o.ItemIds, true
}

// HasItemIds returns a boolean if a field has been set.
func (o *LinkTokenCreateRequestUpdate) HasItemIds() bool {
	if o != nil && o.ItemIds != nil {
		return true
	}

	return false
}

// SetItemIds gets a reference to the given []string and assigns it to the ItemIds field.
func (o *LinkTokenCreateRequestUpdate) SetItemIds(v []string) {
	o.ItemIds = v
}

func (o LinkTokenCreateRequestUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountSelectionEnabled != nil {
		toSerialize["account_selection_enabled"] = o.AccountSelectionEnabled
	}
	if o.ReauthorizationEnabled != nil {
		toSerialize["reauthorization_enabled"] = o.ReauthorizationEnabled
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.ItemIds != nil {
		toSerialize["item_ids"] = o.ItemIds
	}
	return json.Marshal(toSerialize)
}

type NullableLinkTokenCreateRequestUpdate struct {
	value *LinkTokenCreateRequestUpdate
	isSet bool
}

func (v NullableLinkTokenCreateRequestUpdate) Get() *LinkTokenCreateRequestUpdate {
	return v.value
}

func (v *NullableLinkTokenCreateRequestUpdate) Set(val *LinkTokenCreateRequestUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkTokenCreateRequestUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkTokenCreateRequestUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkTokenCreateRequestUpdate(val *LinkTokenCreateRequestUpdate) *NullableLinkTokenCreateRequestUpdate {
	return &NullableLinkTokenCreateRequestUpdate{value: val, isSet: true}
}

func (v NullableLinkTokenCreateRequestUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkTokenCreateRequestUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


