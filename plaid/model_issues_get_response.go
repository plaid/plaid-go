/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// IssuesGetResponse IssuesGetResponse defines the response schema for `/issues/get`.
type IssuesGetResponse struct {
	Issue *Issue `json:"issue,omitempty"`
	// A unique identifier for the API request.
	RequestId *string `json:"request_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IssuesGetResponse IssuesGetResponse

// NewIssuesGetResponse instantiates a new IssuesGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesGetResponse() *IssuesGetResponse {
	this := IssuesGetResponse{}
	return &this
}

// NewIssuesGetResponseWithDefaults instantiates a new IssuesGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesGetResponseWithDefaults() *IssuesGetResponse {
	this := IssuesGetResponse{}
	return &this
}

// GetIssue returns the Issue field value if set, zero value otherwise.
func (o *IssuesGetResponse) GetIssue() Issue {
	if o == nil || o.Issue == nil {
		var ret Issue
		return ret
	}
	return *o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesGetResponse) GetIssueOk() (*Issue, bool) {
	if o == nil || o.Issue == nil {
		return nil, false
	}
	return o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *IssuesGetResponse) HasIssue() bool {
	if o != nil && o.Issue != nil {
		return true
	}

	return false
}

// SetIssue gets a reference to the given Issue and assigns it to the Issue field.
func (o *IssuesGetResponse) SetIssue(v Issue) {
	o.Issue = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *IssuesGetResponse) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesGetResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || o.RequestId == nil {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *IssuesGetResponse) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *IssuesGetResponse) SetRequestId(v string) {
	o.RequestId = &v
}

func (o IssuesGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Issue != nil {
		toSerialize["issue"] = o.Issue
	}
	if o.RequestId != nil {
		toSerialize["request_id"] = o.RequestId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IssuesGetResponse) UnmarshalJSON(bytes []byte) (err error) {
	varIssuesGetResponse := _IssuesGetResponse{}

	if err = json.Unmarshal(bytes, &varIssuesGetResponse); err == nil {
		*o = IssuesGetResponse(varIssuesGetResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "issue")
		delete(additionalProperties, "request_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIssuesGetResponse struct {
	value *IssuesGetResponse
	isSet bool
}

func (v NullableIssuesGetResponse) Get() *IssuesGetResponse {
	return v.value
}

func (v *NullableIssuesGetResponse) Set(val *IssuesGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesGetResponse(val *IssuesGetResponse) *NullableIssuesGetResponse {
	return &NullableIssuesGetResponse{value: val, isSet: true}
}

func (v NullableIssuesGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


