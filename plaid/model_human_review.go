/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// HumanReview Details about the human review check, which refers to a check that is performed by a document specialist.
type HumanReview struct {
	Status HumanReviewStatus `json:"status"`
	AdditionalProperties map[string]interface{}
}

type _HumanReview HumanReview

// NewHumanReview instantiates a new HumanReview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHumanReview(status HumanReviewStatus) *HumanReview {
	this := HumanReview{}
	this.Status = status
	return &this
}

// NewHumanReviewWithDefaults instantiates a new HumanReview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHumanReviewWithDefaults() *HumanReview {
	this := HumanReview{}
	return &this
}

// GetStatus returns the Status field value
func (o *HumanReview) GetStatus() HumanReviewStatus {
	if o == nil {
		var ret HumanReviewStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *HumanReview) GetStatusOk() (*HumanReviewStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *HumanReview) SetStatus(v HumanReviewStatus) {
	o.Status = v
}

func (o HumanReview) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *HumanReview) UnmarshalJSON(bytes []byte) (err error) {
	varHumanReview := _HumanReview{}

	if err = json.Unmarshal(bytes, &varHumanReview); err == nil {
		*o = HumanReview(varHumanReview)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHumanReview struct {
	value *HumanReview
	isSet bool
}

func (v NullableHumanReview) Get() *HumanReview {
	return v.value
}

func (v *NullableHumanReview) Set(val *HumanReview) {
	v.value = val
	v.isSet = true
}

func (v NullableHumanReview) IsSet() bool {
	return v.isSet
}

func (v *NullableHumanReview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHumanReview(val *HumanReview) *NullableHumanReview {
	return &NullableHumanReview{value: val, isSet: true}
}

func (v NullableHumanReview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHumanReview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


