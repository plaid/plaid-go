/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// IdentityDocumentUploadMetadata Metadata pertaining to the document.
type IdentityDocumentUploadMetadata struct {
	// The submitted document type. Currently, this will always be `BANK_STATEMENT`.
	DocumentType NullableString `json:"document_type,omitempty"`
	// Boolean field indicating whether the uploaded document's account number matches the account number we have on file. If `false`, it is not recommended to accept the uploaded identity data as accurate without further verification.
	IsAccountNumberMatch NullableBool `json:"is_account_number_match,omitempty"`
	// The number of pages in the uploaded document.
	PageCount NullableInt32 `json:"page_count,omitempty"`
	// The timestamp when the document was last updated.
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	// The timestamp when the document was originally uploaded.
	UploadedAt *time.Time `json:"uploaded_at,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityDocumentUploadMetadata IdentityDocumentUploadMetadata

// NewIdentityDocumentUploadMetadata instantiates a new IdentityDocumentUploadMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityDocumentUploadMetadata() *IdentityDocumentUploadMetadata {
	this := IdentityDocumentUploadMetadata{}
	return &this
}

// NewIdentityDocumentUploadMetadataWithDefaults instantiates a new IdentityDocumentUploadMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityDocumentUploadMetadataWithDefaults() *IdentityDocumentUploadMetadata {
	this := IdentityDocumentUploadMetadata{}
	return &this
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityDocumentUploadMetadata) GetDocumentType() string {
	if o == nil || o.DocumentType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocumentType.Get()
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityDocumentUploadMetadata) GetDocumentTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocumentType.Get(), o.DocumentType.IsSet()
}

// HasDocumentType returns a boolean if a field has been set.
func (o *IdentityDocumentUploadMetadata) HasDocumentType() bool {
	if o != nil && o.DocumentType.IsSet() {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given NullableString and assigns it to the DocumentType field.
func (o *IdentityDocumentUploadMetadata) SetDocumentType(v string) {
	o.DocumentType.Set(&v)
}
// SetDocumentTypeNil sets the value for DocumentType to be an explicit nil
func (o *IdentityDocumentUploadMetadata) SetDocumentTypeNil() {
	o.DocumentType.Set(nil)
}

// UnsetDocumentType ensures that no value is present for DocumentType, not even an explicit nil
func (o *IdentityDocumentUploadMetadata) UnsetDocumentType() {
	o.DocumentType.Unset()
}

// GetIsAccountNumberMatch returns the IsAccountNumberMatch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityDocumentUploadMetadata) GetIsAccountNumberMatch() bool {
	if o == nil || o.IsAccountNumberMatch.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAccountNumberMatch.Get()
}

// GetIsAccountNumberMatchOk returns a tuple with the IsAccountNumberMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityDocumentUploadMetadata) GetIsAccountNumberMatchOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAccountNumberMatch.Get(), o.IsAccountNumberMatch.IsSet()
}

// HasIsAccountNumberMatch returns a boolean if a field has been set.
func (o *IdentityDocumentUploadMetadata) HasIsAccountNumberMatch() bool {
	if o != nil && o.IsAccountNumberMatch.IsSet() {
		return true
	}

	return false
}

// SetIsAccountNumberMatch gets a reference to the given NullableBool and assigns it to the IsAccountNumberMatch field.
func (o *IdentityDocumentUploadMetadata) SetIsAccountNumberMatch(v bool) {
	o.IsAccountNumberMatch.Set(&v)
}
// SetIsAccountNumberMatchNil sets the value for IsAccountNumberMatch to be an explicit nil
func (o *IdentityDocumentUploadMetadata) SetIsAccountNumberMatchNil() {
	o.IsAccountNumberMatch.Set(nil)
}

// UnsetIsAccountNumberMatch ensures that no value is present for IsAccountNumberMatch, not even an explicit nil
func (o *IdentityDocumentUploadMetadata) UnsetIsAccountNumberMatch() {
	o.IsAccountNumberMatch.Unset()
}

// GetPageCount returns the PageCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityDocumentUploadMetadata) GetPageCount() int32 {
	if o == nil || o.PageCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PageCount.Get()
}

// GetPageCountOk returns a tuple with the PageCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityDocumentUploadMetadata) GetPageCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PageCount.Get(), o.PageCount.IsSet()
}

// HasPageCount returns a boolean if a field has been set.
func (o *IdentityDocumentUploadMetadata) HasPageCount() bool {
	if o != nil && o.PageCount.IsSet() {
		return true
	}

	return false
}

// SetPageCount gets a reference to the given NullableInt32 and assigns it to the PageCount field.
func (o *IdentityDocumentUploadMetadata) SetPageCount(v int32) {
	o.PageCount.Set(&v)
}
// SetPageCountNil sets the value for PageCount to be an explicit nil
func (o *IdentityDocumentUploadMetadata) SetPageCountNil() {
	o.PageCount.Set(nil)
}

// UnsetPageCount ensures that no value is present for PageCount, not even an explicit nil
func (o *IdentityDocumentUploadMetadata) UnsetPageCount() {
	o.PageCount.Unset()
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *IdentityDocumentUploadMetadata) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocumentUploadMetadata) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *IdentityDocumentUploadMetadata) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *IdentityDocumentUploadMetadata) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetUploadedAt returns the UploadedAt field value if set, zero value otherwise.
func (o *IdentityDocumentUploadMetadata) GetUploadedAt() time.Time {
	if o == nil || o.UploadedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UploadedAt
}

// GetUploadedAtOk returns a tuple with the UploadedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityDocumentUploadMetadata) GetUploadedAtOk() (*time.Time, bool) {
	if o == nil || o.UploadedAt == nil {
		return nil, false
	}
	return o.UploadedAt, true
}

// HasUploadedAt returns a boolean if a field has been set.
func (o *IdentityDocumentUploadMetadata) HasUploadedAt() bool {
	if o != nil && o.UploadedAt != nil {
		return true
	}

	return false
}

// SetUploadedAt gets a reference to the given time.Time and assigns it to the UploadedAt field.
func (o *IdentityDocumentUploadMetadata) SetUploadedAt(v time.Time) {
	o.UploadedAt = &v
}

func (o IdentityDocumentUploadMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocumentType.IsSet() {
		toSerialize["document_type"] = o.DocumentType.Get()
	}
	if o.IsAccountNumberMatch.IsSet() {
		toSerialize["is_account_number_match"] = o.IsAccountNumberMatch.Get()
	}
	if o.PageCount.IsSet() {
		toSerialize["page_count"] = o.PageCount.Get()
	}
	if o.LastUpdated != nil {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if o.UploadedAt != nil {
		toSerialize["uploaded_at"] = o.UploadedAt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IdentityDocumentUploadMetadata) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityDocumentUploadMetadata := _IdentityDocumentUploadMetadata{}

	if err = json.Unmarshal(bytes, &varIdentityDocumentUploadMetadata); err == nil {
		*o = IdentityDocumentUploadMetadata(varIdentityDocumentUploadMetadata)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "document_type")
		delete(additionalProperties, "is_account_number_match")
		delete(additionalProperties, "page_count")
		delete(additionalProperties, "last_updated")
		delete(additionalProperties, "uploaded_at")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityDocumentUploadMetadata struct {
	value *IdentityDocumentUploadMetadata
	isSet bool
}

func (v NullableIdentityDocumentUploadMetadata) Get() *IdentityDocumentUploadMetadata {
	return v.value
}

func (v *NullableIdentityDocumentUploadMetadata) Set(val *IdentityDocumentUploadMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityDocumentUploadMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityDocumentUploadMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityDocumentUploadMetadata(val *IdentityDocumentUploadMetadata) *NullableIdentityDocumentUploadMetadata {
	return &NullableIdentityDocumentUploadMetadata{value: val, isSet: true}
}

func (v NullableIdentityDocumentUploadMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityDocumentUploadMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


