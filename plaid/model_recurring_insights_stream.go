/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.565.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// RecurringInsightsStream Insights object for recurring transactions streams.
type RecurringInsightsStream struct {
	// A unique id for the stream.
	StreamId string `json:"stream_id"`
	// The client-provided raw description of the most recent transaction in the stream.
	Description *string `json:"description,omitempty"`
	// The merchant or primary counterparty associated with the transaction stream.
	MerchantName string `json:"merchant_name"`
	// The posted date of the earliest transaction in the stream.
	OldestTransactionDate *string `json:"oldest_transaction_date,omitempty"`
	// The posted date of the latest transaction in the stream.
	NewestTransactionDate *string `json:"newest_transaction_date,omitempty"`
	// The average number of days between each of the recurring transactions.
	AverageDaysApart float64 `json:"average_days_apart"`
	Frequency *RecurringTransactionFrequency `json:"frequency,omitempty"`
	// The number of transactions in this stream.
	TransactionCount *int32 `json:"transaction_count,omitempty"`
	// An array of Plaid transaction IDs belonging to the stream, sorted by posted date.
	TransactionIds *[]string `json:"transaction_ids,omitempty"`
	AverageAmount *TransactionStreamAmount `json:"average_amount,omitempty"`
	NewestTransactionAmount *TransactionStreamAmount `json:"newest_transaction_amount,omitempty"`
	// Indicates whether the transaction stream is still live.
	IsActive bool `json:"is_active"`
	Status *TransactionStreamStatus `json:"status,omitempty"`
	// The primary category associated with the transaction stream.
	PersonalFinanceCategoryPrimary *string `json:"personal_finance_category_primary,omitempty"`
	// The detailed category associated with the transaction stream.
	PersonalFinanceCategoryDetailed *string `json:"personal_finance_category_detailed,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RecurringInsightsStream RecurringInsightsStream

// NewRecurringInsightsStream instantiates a new RecurringInsightsStream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurringInsightsStream(streamId string, merchantName string, averageDaysApart float64, isActive bool) *RecurringInsightsStream {
	this := RecurringInsightsStream{}
	this.StreamId = streamId
	this.MerchantName = merchantName
	this.AverageDaysApart = averageDaysApart
	this.IsActive = isActive
	return &this
}

// NewRecurringInsightsStreamWithDefaults instantiates a new RecurringInsightsStream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurringInsightsStreamWithDefaults() *RecurringInsightsStream {
	this := RecurringInsightsStream{}
	return &this
}

// GetStreamId returns the StreamId field value
func (o *RecurringInsightsStream) GetStreamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetStreamIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StreamId, true
}

// SetStreamId sets field value
func (o *RecurringInsightsStream) SetStreamId(v string) {
	o.StreamId = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RecurringInsightsStream) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RecurringInsightsStream) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RecurringInsightsStream) SetDescription(v string) {
	o.Description = &v
}

// GetMerchantName returns the MerchantName field value
func (o *RecurringInsightsStream) GetMerchantName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantName
}

// GetMerchantNameOk returns a tuple with the MerchantName field value
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetMerchantNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MerchantName, true
}

// SetMerchantName sets field value
func (o *RecurringInsightsStream) SetMerchantName(v string) {
	o.MerchantName = v
}

// GetOldestTransactionDate returns the OldestTransactionDate field value if set, zero value otherwise.
func (o *RecurringInsightsStream) GetOldestTransactionDate() string {
	if o == nil || o.OldestTransactionDate == nil {
		var ret string
		return ret
	}
	return *o.OldestTransactionDate
}

// GetOldestTransactionDateOk returns a tuple with the OldestTransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetOldestTransactionDateOk() (*string, bool) {
	if o == nil || o.OldestTransactionDate == nil {
		return nil, false
	}
	return o.OldestTransactionDate, true
}

// HasOldestTransactionDate returns a boolean if a field has been set.
func (o *RecurringInsightsStream) HasOldestTransactionDate() bool {
	if o != nil && o.OldestTransactionDate != nil {
		return true
	}

	return false
}

// SetOldestTransactionDate gets a reference to the given string and assigns it to the OldestTransactionDate field.
func (o *RecurringInsightsStream) SetOldestTransactionDate(v string) {
	o.OldestTransactionDate = &v
}

// GetNewestTransactionDate returns the NewestTransactionDate field value if set, zero value otherwise.
func (o *RecurringInsightsStream) GetNewestTransactionDate() string {
	if o == nil || o.NewestTransactionDate == nil {
		var ret string
		return ret
	}
	return *o.NewestTransactionDate
}

// GetNewestTransactionDateOk returns a tuple with the NewestTransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetNewestTransactionDateOk() (*string, bool) {
	if o == nil || o.NewestTransactionDate == nil {
		return nil, false
	}
	return o.NewestTransactionDate, true
}

// HasNewestTransactionDate returns a boolean if a field has been set.
func (o *RecurringInsightsStream) HasNewestTransactionDate() bool {
	if o != nil && o.NewestTransactionDate != nil {
		return true
	}

	return false
}

// SetNewestTransactionDate gets a reference to the given string and assigns it to the NewestTransactionDate field.
func (o *RecurringInsightsStream) SetNewestTransactionDate(v string) {
	o.NewestTransactionDate = &v
}

// GetAverageDaysApart returns the AverageDaysApart field value
func (o *RecurringInsightsStream) GetAverageDaysApart() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AverageDaysApart
}

// GetAverageDaysApartOk returns a tuple with the AverageDaysApart field value
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetAverageDaysApartOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AverageDaysApart, true
}

// SetAverageDaysApart sets field value
func (o *RecurringInsightsStream) SetAverageDaysApart(v float64) {
	o.AverageDaysApart = v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise.
func (o *RecurringInsightsStream) GetFrequency() RecurringTransactionFrequency {
	if o == nil || o.Frequency == nil {
		var ret RecurringTransactionFrequency
		return ret
	}
	return *o.Frequency
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetFrequencyOk() (*RecurringTransactionFrequency, bool) {
	if o == nil || o.Frequency == nil {
		return nil, false
	}
	return o.Frequency, true
}

// HasFrequency returns a boolean if a field has been set.
func (o *RecurringInsightsStream) HasFrequency() bool {
	if o != nil && o.Frequency != nil {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given RecurringTransactionFrequency and assigns it to the Frequency field.
func (o *RecurringInsightsStream) SetFrequency(v RecurringTransactionFrequency) {
	o.Frequency = &v
}

// GetTransactionCount returns the TransactionCount field value if set, zero value otherwise.
func (o *RecurringInsightsStream) GetTransactionCount() int32 {
	if o == nil || o.TransactionCount == nil {
		var ret int32
		return ret
	}
	return *o.TransactionCount
}

// GetTransactionCountOk returns a tuple with the TransactionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetTransactionCountOk() (*int32, bool) {
	if o == nil || o.TransactionCount == nil {
		return nil, false
	}
	return o.TransactionCount, true
}

// HasTransactionCount returns a boolean if a field has been set.
func (o *RecurringInsightsStream) HasTransactionCount() bool {
	if o != nil && o.TransactionCount != nil {
		return true
	}

	return false
}

// SetTransactionCount gets a reference to the given int32 and assigns it to the TransactionCount field.
func (o *RecurringInsightsStream) SetTransactionCount(v int32) {
	o.TransactionCount = &v
}

// GetTransactionIds returns the TransactionIds field value if set, zero value otherwise.
func (o *RecurringInsightsStream) GetTransactionIds() []string {
	if o == nil || o.TransactionIds == nil {
		var ret []string
		return ret
	}
	return *o.TransactionIds
}

// GetTransactionIdsOk returns a tuple with the TransactionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetTransactionIdsOk() (*[]string, bool) {
	if o == nil || o.TransactionIds == nil {
		return nil, false
	}
	return o.TransactionIds, true
}

// HasTransactionIds returns a boolean if a field has been set.
func (o *RecurringInsightsStream) HasTransactionIds() bool {
	if o != nil && o.TransactionIds != nil {
		return true
	}

	return false
}

// SetTransactionIds gets a reference to the given []string and assigns it to the TransactionIds field.
func (o *RecurringInsightsStream) SetTransactionIds(v []string) {
	o.TransactionIds = &v
}

// GetAverageAmount returns the AverageAmount field value if set, zero value otherwise.
func (o *RecurringInsightsStream) GetAverageAmount() TransactionStreamAmount {
	if o == nil || o.AverageAmount == nil {
		var ret TransactionStreamAmount
		return ret
	}
	return *o.AverageAmount
}

// GetAverageAmountOk returns a tuple with the AverageAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetAverageAmountOk() (*TransactionStreamAmount, bool) {
	if o == nil || o.AverageAmount == nil {
		return nil, false
	}
	return o.AverageAmount, true
}

// HasAverageAmount returns a boolean if a field has been set.
func (o *RecurringInsightsStream) HasAverageAmount() bool {
	if o != nil && o.AverageAmount != nil {
		return true
	}

	return false
}

// SetAverageAmount gets a reference to the given TransactionStreamAmount and assigns it to the AverageAmount field.
func (o *RecurringInsightsStream) SetAverageAmount(v TransactionStreamAmount) {
	o.AverageAmount = &v
}

// GetNewestTransactionAmount returns the NewestTransactionAmount field value if set, zero value otherwise.
func (o *RecurringInsightsStream) GetNewestTransactionAmount() TransactionStreamAmount {
	if o == nil || o.NewestTransactionAmount == nil {
		var ret TransactionStreamAmount
		return ret
	}
	return *o.NewestTransactionAmount
}

// GetNewestTransactionAmountOk returns a tuple with the NewestTransactionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetNewestTransactionAmountOk() (*TransactionStreamAmount, bool) {
	if o == nil || o.NewestTransactionAmount == nil {
		return nil, false
	}
	return o.NewestTransactionAmount, true
}

// HasNewestTransactionAmount returns a boolean if a field has been set.
func (o *RecurringInsightsStream) HasNewestTransactionAmount() bool {
	if o != nil && o.NewestTransactionAmount != nil {
		return true
	}

	return false
}

// SetNewestTransactionAmount gets a reference to the given TransactionStreamAmount and assigns it to the NewestTransactionAmount field.
func (o *RecurringInsightsStream) SetNewestTransactionAmount(v TransactionStreamAmount) {
	o.NewestTransactionAmount = &v
}

// GetIsActive returns the IsActive field value
func (o *RecurringInsightsStream) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetIsActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *RecurringInsightsStream) SetIsActive(v bool) {
	o.IsActive = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RecurringInsightsStream) GetStatus() TransactionStreamStatus {
	if o == nil || o.Status == nil {
		var ret TransactionStreamStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetStatusOk() (*TransactionStreamStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RecurringInsightsStream) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TransactionStreamStatus and assigns it to the Status field.
func (o *RecurringInsightsStream) SetStatus(v TransactionStreamStatus) {
	o.Status = &v
}

// GetPersonalFinanceCategoryPrimary returns the PersonalFinanceCategoryPrimary field value if set, zero value otherwise.
func (o *RecurringInsightsStream) GetPersonalFinanceCategoryPrimary() string {
	if o == nil || o.PersonalFinanceCategoryPrimary == nil {
		var ret string
		return ret
	}
	return *o.PersonalFinanceCategoryPrimary
}

// GetPersonalFinanceCategoryPrimaryOk returns a tuple with the PersonalFinanceCategoryPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetPersonalFinanceCategoryPrimaryOk() (*string, bool) {
	if o == nil || o.PersonalFinanceCategoryPrimary == nil {
		return nil, false
	}
	return o.PersonalFinanceCategoryPrimary, true
}

// HasPersonalFinanceCategoryPrimary returns a boolean if a field has been set.
func (o *RecurringInsightsStream) HasPersonalFinanceCategoryPrimary() bool {
	if o != nil && o.PersonalFinanceCategoryPrimary != nil {
		return true
	}

	return false
}

// SetPersonalFinanceCategoryPrimary gets a reference to the given string and assigns it to the PersonalFinanceCategoryPrimary field.
func (o *RecurringInsightsStream) SetPersonalFinanceCategoryPrimary(v string) {
	o.PersonalFinanceCategoryPrimary = &v
}

// GetPersonalFinanceCategoryDetailed returns the PersonalFinanceCategoryDetailed field value if set, zero value otherwise.
func (o *RecurringInsightsStream) GetPersonalFinanceCategoryDetailed() string {
	if o == nil || o.PersonalFinanceCategoryDetailed == nil {
		var ret string
		return ret
	}
	return *o.PersonalFinanceCategoryDetailed
}

// GetPersonalFinanceCategoryDetailedOk returns a tuple with the PersonalFinanceCategoryDetailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecurringInsightsStream) GetPersonalFinanceCategoryDetailedOk() (*string, bool) {
	if o == nil || o.PersonalFinanceCategoryDetailed == nil {
		return nil, false
	}
	return o.PersonalFinanceCategoryDetailed, true
}

// HasPersonalFinanceCategoryDetailed returns a boolean if a field has been set.
func (o *RecurringInsightsStream) HasPersonalFinanceCategoryDetailed() bool {
	if o != nil && o.PersonalFinanceCategoryDetailed != nil {
		return true
	}

	return false
}

// SetPersonalFinanceCategoryDetailed gets a reference to the given string and assigns it to the PersonalFinanceCategoryDetailed field.
func (o *RecurringInsightsStream) SetPersonalFinanceCategoryDetailed(v string) {
	o.PersonalFinanceCategoryDetailed = &v
}

func (o RecurringInsightsStream) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["stream_id"] = o.StreamId
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["merchant_name"] = o.MerchantName
	}
	if o.OldestTransactionDate != nil {
		toSerialize["oldest_transaction_date"] = o.OldestTransactionDate
	}
	if o.NewestTransactionDate != nil {
		toSerialize["newest_transaction_date"] = o.NewestTransactionDate
	}
	if true {
		toSerialize["average_days_apart"] = o.AverageDaysApart
	}
	if o.Frequency != nil {
		toSerialize["frequency"] = o.Frequency
	}
	if o.TransactionCount != nil {
		toSerialize["transaction_count"] = o.TransactionCount
	}
	if o.TransactionIds != nil {
		toSerialize["transaction_ids"] = o.TransactionIds
	}
	if o.AverageAmount != nil {
		toSerialize["average_amount"] = o.AverageAmount
	}
	if o.NewestTransactionAmount != nil {
		toSerialize["newest_transaction_amount"] = o.NewestTransactionAmount
	}
	if true {
		toSerialize["is_active"] = o.IsActive
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.PersonalFinanceCategoryPrimary != nil {
		toSerialize["personal_finance_category_primary"] = o.PersonalFinanceCategoryPrimary
	}
	if o.PersonalFinanceCategoryDetailed != nil {
		toSerialize["personal_finance_category_detailed"] = o.PersonalFinanceCategoryDetailed
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *RecurringInsightsStream) UnmarshalJSON(bytes []byte) (err error) {
	varRecurringInsightsStream := _RecurringInsightsStream{}

	if err = json.Unmarshal(bytes, &varRecurringInsightsStream); err == nil {
		*o = RecurringInsightsStream(varRecurringInsightsStream)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "stream_id")
		delete(additionalProperties, "description")
		delete(additionalProperties, "merchant_name")
		delete(additionalProperties, "oldest_transaction_date")
		delete(additionalProperties, "newest_transaction_date")
		delete(additionalProperties, "average_days_apart")
		delete(additionalProperties, "frequency")
		delete(additionalProperties, "transaction_count")
		delete(additionalProperties, "transaction_ids")
		delete(additionalProperties, "average_amount")
		delete(additionalProperties, "newest_transaction_amount")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "status")
		delete(additionalProperties, "personal_finance_category_primary")
		delete(additionalProperties, "personal_finance_category_detailed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRecurringInsightsStream struct {
	value *RecurringInsightsStream
	isSet bool
}

func (v NullableRecurringInsightsStream) Get() *RecurringInsightsStream {
	return v.value
}

func (v *NullableRecurringInsightsStream) Set(val *RecurringInsightsStream) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurringInsightsStream) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurringInsightsStream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurringInsightsStream(val *RecurringInsightsStream) *NullableRecurringInsightsStream {
	return &NullableRecurringInsightsStream{value: val, isSet: true}
}

func (v NullableRecurringInsightsStream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurringInsightsStream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


