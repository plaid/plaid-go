/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.664.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// RefreshResult RefreshResult represents the result status of a user refresh for a specific item.
type RefreshResult struct {
	// A unique identifier for the Plaid Item.
	ItemId *string `json:"item_id,omitempty"`
	// The product for which the refresh was attempted.
	Product *string `json:"product,omitempty"`
	Error NullablePlaidError `json:"error,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RefreshResult RefreshResult

// NewRefreshResult instantiates a new RefreshResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefreshResult() *RefreshResult {
	this := RefreshResult{}
	return &this
}

// NewRefreshResultWithDefaults instantiates a new RefreshResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefreshResultWithDefaults() *RefreshResult {
	this := RefreshResult{}
	return &this
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *RefreshResult) GetItemId() string {
	if o == nil || o.ItemId == nil {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefreshResult) GetItemIdOk() (*string, bool) {
	if o == nil || o.ItemId == nil {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *RefreshResult) HasItemId() bool {
	if o != nil && o.ItemId != nil {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *RefreshResult) SetItemId(v string) {
	o.ItemId = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *RefreshResult) GetProduct() string {
	if o == nil || o.Product == nil {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RefreshResult) GetProductOk() (*string, bool) {
	if o == nil || o.Product == nil {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *RefreshResult) HasProduct() bool {
	if o != nil && o.Product != nil {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *RefreshResult) SetProduct(v string) {
	o.Product = &v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RefreshResult) GetError() PlaidError {
	if o == nil || o.Error.Get() == nil {
		var ret PlaidError
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RefreshResult) GetErrorOk() (*PlaidError, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *RefreshResult) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullablePlaidError and assigns it to the Error field.
func (o *RefreshResult) SetError(v PlaidError) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *RefreshResult) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *RefreshResult) UnsetError() {
	o.Error.Unset()
}

func (o RefreshResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ItemId != nil {
		toSerialize["item_id"] = o.ItemId
	}
	if o.Product != nil {
		toSerialize["product"] = o.Product
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *RefreshResult) UnmarshalJSON(bytes []byte) (err error) {
	varRefreshResult := _RefreshResult{}

	if err = json.Unmarshal(bytes, &varRefreshResult); err == nil {
		*o = RefreshResult(varRefreshResult)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "item_id")
		delete(additionalProperties, "product")
		delete(additionalProperties, "error")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRefreshResult struct {
	value *RefreshResult
	isSet bool
}

func (v NullableRefreshResult) Get() *RefreshResult {
	return v.value
}

func (v *NullableRefreshResult) Set(val *RefreshResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRefreshResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRefreshResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefreshResult(val *RefreshResult) *NullableRefreshResult {
	return &NullableRefreshResult{value: val, isSet: true}
}

func (v NullableRefreshResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefreshResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


