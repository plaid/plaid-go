/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// TransactionsUserInsightsGetResponse TransactionsUserInsightsGetResponse defines the response schema for `/beta/transactions/user_insights/v1/get`.
type TransactionsUserInsightsGetResponse struct {
	UserDataOverview UserDataOverview `json:"user_data_overview"`
	CounterpartyInsights *CounterpartyInsights `json:"counterparty_insights,omitempty"`
	CategoryInsights *CategoryInsights `json:"category_insights,omitempty"`
	RecurringTransactions *RecurringTransactions `json:"recurring_transactions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TransactionsUserInsightsGetResponse TransactionsUserInsightsGetResponse

// NewTransactionsUserInsightsGetResponse instantiates a new TransactionsUserInsightsGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionsUserInsightsGetResponse(userDataOverview UserDataOverview) *TransactionsUserInsightsGetResponse {
	this := TransactionsUserInsightsGetResponse{}
	this.UserDataOverview = userDataOverview
	return &this
}

// NewTransactionsUserInsightsGetResponseWithDefaults instantiates a new TransactionsUserInsightsGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsUserInsightsGetResponseWithDefaults() *TransactionsUserInsightsGetResponse {
	this := TransactionsUserInsightsGetResponse{}
	return &this
}

// GetUserDataOverview returns the UserDataOverview field value
func (o *TransactionsUserInsightsGetResponse) GetUserDataOverview() UserDataOverview {
	if o == nil {
		var ret UserDataOverview
		return ret
	}

	return o.UserDataOverview
}

// GetUserDataOverviewOk returns a tuple with the UserDataOverview field value
// and a boolean to check if the value has been set.
func (o *TransactionsUserInsightsGetResponse) GetUserDataOverviewOk() (*UserDataOverview, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserDataOverview, true
}

// SetUserDataOverview sets field value
func (o *TransactionsUserInsightsGetResponse) SetUserDataOverview(v UserDataOverview) {
	o.UserDataOverview = v
}

// GetCounterpartyInsights returns the CounterpartyInsights field value if set, zero value otherwise.
func (o *TransactionsUserInsightsGetResponse) GetCounterpartyInsights() CounterpartyInsights {
	if o == nil || o.CounterpartyInsights == nil {
		var ret CounterpartyInsights
		return ret
	}
	return *o.CounterpartyInsights
}

// GetCounterpartyInsightsOk returns a tuple with the CounterpartyInsights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsUserInsightsGetResponse) GetCounterpartyInsightsOk() (*CounterpartyInsights, bool) {
	if o == nil || o.CounterpartyInsights == nil {
		return nil, false
	}
	return o.CounterpartyInsights, true
}

// HasCounterpartyInsights returns a boolean if a field has been set.
func (o *TransactionsUserInsightsGetResponse) HasCounterpartyInsights() bool {
	if o != nil && o.CounterpartyInsights != nil {
		return true
	}

	return false
}

// SetCounterpartyInsights gets a reference to the given CounterpartyInsights and assigns it to the CounterpartyInsights field.
func (o *TransactionsUserInsightsGetResponse) SetCounterpartyInsights(v CounterpartyInsights) {
	o.CounterpartyInsights = &v
}

// GetCategoryInsights returns the CategoryInsights field value if set, zero value otherwise.
func (o *TransactionsUserInsightsGetResponse) GetCategoryInsights() CategoryInsights {
	if o == nil || o.CategoryInsights == nil {
		var ret CategoryInsights
		return ret
	}
	return *o.CategoryInsights
}

// GetCategoryInsightsOk returns a tuple with the CategoryInsights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsUserInsightsGetResponse) GetCategoryInsightsOk() (*CategoryInsights, bool) {
	if o == nil || o.CategoryInsights == nil {
		return nil, false
	}
	return o.CategoryInsights, true
}

// HasCategoryInsights returns a boolean if a field has been set.
func (o *TransactionsUserInsightsGetResponse) HasCategoryInsights() bool {
	if o != nil && o.CategoryInsights != nil {
		return true
	}

	return false
}

// SetCategoryInsights gets a reference to the given CategoryInsights and assigns it to the CategoryInsights field.
func (o *TransactionsUserInsightsGetResponse) SetCategoryInsights(v CategoryInsights) {
	o.CategoryInsights = &v
}

// GetRecurringTransactions returns the RecurringTransactions field value if set, zero value otherwise.
func (o *TransactionsUserInsightsGetResponse) GetRecurringTransactions() RecurringTransactions {
	if o == nil || o.RecurringTransactions == nil {
		var ret RecurringTransactions
		return ret
	}
	return *o.RecurringTransactions
}

// GetRecurringTransactionsOk returns a tuple with the RecurringTransactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsUserInsightsGetResponse) GetRecurringTransactionsOk() (*RecurringTransactions, bool) {
	if o == nil || o.RecurringTransactions == nil {
		return nil, false
	}
	return o.RecurringTransactions, true
}

// HasRecurringTransactions returns a boolean if a field has been set.
func (o *TransactionsUserInsightsGetResponse) HasRecurringTransactions() bool {
	if o != nil && o.RecurringTransactions != nil {
		return true
	}

	return false
}

// SetRecurringTransactions gets a reference to the given RecurringTransactions and assigns it to the RecurringTransactions field.
func (o *TransactionsUserInsightsGetResponse) SetRecurringTransactions(v RecurringTransactions) {
	o.RecurringTransactions = &v
}

func (o TransactionsUserInsightsGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["user_data_overview"] = o.UserDataOverview
	}
	if o.CounterpartyInsights != nil {
		toSerialize["counterparty_insights"] = o.CounterpartyInsights
	}
	if o.CategoryInsights != nil {
		toSerialize["category_insights"] = o.CategoryInsights
	}
	if o.RecurringTransactions != nil {
		toSerialize["recurring_transactions"] = o.RecurringTransactions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TransactionsUserInsightsGetResponse) UnmarshalJSON(bytes []byte) (err error) {
	varTransactionsUserInsightsGetResponse := _TransactionsUserInsightsGetResponse{}

	if err = json.Unmarshal(bytes, &varTransactionsUserInsightsGetResponse); err == nil {
		*o = TransactionsUserInsightsGetResponse(varTransactionsUserInsightsGetResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "user_data_overview")
		delete(additionalProperties, "counterparty_insights")
		delete(additionalProperties, "category_insights")
		delete(additionalProperties, "recurring_transactions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransactionsUserInsightsGetResponse struct {
	value *TransactionsUserInsightsGetResponse
	isSet bool
}

func (v NullableTransactionsUserInsightsGetResponse) Get() *TransactionsUserInsightsGetResponse {
	return v.value
}

func (v *NullableTransactionsUserInsightsGetResponse) Set(val *TransactionsUserInsightsGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionsUserInsightsGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionsUserInsightsGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionsUserInsightsGetResponse(val *TransactionsUserInsightsGetResponse) *NullableTransactionsUserInsightsGetResponse {
	return &NullableTransactionsUserInsightsGetResponse{value: val, isSet: true}
}

func (v NullableTransactionsUserInsightsGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionsUserInsightsGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


