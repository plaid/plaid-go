/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// LoanPaymentsCounts Details regarding the number of loan payments
type LoanPaymentsCounts struct {
	// The number of loan payments made in the 30 days before the subscription date
	BaselineCount NullableFloat32 `json:"baseline_count,omitempty"`
	// The current number of loan payments made in the last 30 days
	CurrentCount float32 `json:"current_count"`
	AdditionalProperties map[string]interface{}
}

type _LoanPaymentsCounts LoanPaymentsCounts

// NewLoanPaymentsCounts instantiates a new LoanPaymentsCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoanPaymentsCounts(currentCount float32) *LoanPaymentsCounts {
	this := LoanPaymentsCounts{}
	this.CurrentCount = currentCount
	return &this
}

// NewLoanPaymentsCountsWithDefaults instantiates a new LoanPaymentsCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoanPaymentsCountsWithDefaults() *LoanPaymentsCounts {
	this := LoanPaymentsCounts{}
	return &this
}

// GetBaselineCount returns the BaselineCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LoanPaymentsCounts) GetBaselineCount() float32 {
	if o == nil || o.BaselineCount.Get() == nil {
		var ret float32
		return ret
	}
	return *o.BaselineCount.Get()
}

// GetBaselineCountOk returns a tuple with the BaselineCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LoanPaymentsCounts) GetBaselineCountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BaselineCount.Get(), o.BaselineCount.IsSet()
}

// HasBaselineCount returns a boolean if a field has been set.
func (o *LoanPaymentsCounts) HasBaselineCount() bool {
	if o != nil && o.BaselineCount.IsSet() {
		return true
	}

	return false
}

// SetBaselineCount gets a reference to the given NullableFloat32 and assigns it to the BaselineCount field.
func (o *LoanPaymentsCounts) SetBaselineCount(v float32) {
	o.BaselineCount.Set(&v)
}
// SetBaselineCountNil sets the value for BaselineCount to be an explicit nil
func (o *LoanPaymentsCounts) SetBaselineCountNil() {
	o.BaselineCount.Set(nil)
}

// UnsetBaselineCount ensures that no value is present for BaselineCount, not even an explicit nil
func (o *LoanPaymentsCounts) UnsetBaselineCount() {
	o.BaselineCount.Unset()
}

// GetCurrentCount returns the CurrentCount field value
func (o *LoanPaymentsCounts) GetCurrentCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CurrentCount
}

// GetCurrentCountOk returns a tuple with the CurrentCount field value
// and a boolean to check if the value has been set.
func (o *LoanPaymentsCounts) GetCurrentCountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CurrentCount, true
}

// SetCurrentCount sets field value
func (o *LoanPaymentsCounts) SetCurrentCount(v float32) {
	o.CurrentCount = v
}

func (o LoanPaymentsCounts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BaselineCount.IsSet() {
		toSerialize["baseline_count"] = o.BaselineCount.Get()
	}
	if true {
		toSerialize["current_count"] = o.CurrentCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LoanPaymentsCounts) UnmarshalJSON(bytes []byte) (err error) {
	varLoanPaymentsCounts := _LoanPaymentsCounts{}

	if err = json.Unmarshal(bytes, &varLoanPaymentsCounts); err == nil {
		*o = LoanPaymentsCounts(varLoanPaymentsCounts)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "baseline_count")
		delete(additionalProperties, "current_count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLoanPaymentsCounts struct {
	value *LoanPaymentsCounts
	isSet bool
}

func (v NullableLoanPaymentsCounts) Get() *LoanPaymentsCounts {
	return v.value
}

func (v *NullableLoanPaymentsCounts) Set(val *LoanPaymentsCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableLoanPaymentsCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableLoanPaymentsCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoanPaymentsCounts(val *LoanPaymentsCounts) *NullableLoanPaymentsCounts {
	return &NullableLoanPaymentsCounts{value: val, isSet: true}
}

func (v NullableLoanPaymentsCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoanPaymentsCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


