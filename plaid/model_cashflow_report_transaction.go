/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.627.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// CashflowReportTransaction A representation of a transaction returned from Cashflow Report
type CashflowReportTransaction struct {
	// The ID of the account in which this transaction occurred.
	AccountId string `json:"account_id"`
	// The settled value of the transaction, denominated in the transactions's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. For all products except Income: Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative. For Income endpoints, values are positive when representing income.
	Amount NullableFloat64 `json:"amount"`
	// The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
	IsoCurrencyCode NullableString `json:"iso_currency_code"`
	// The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
	UnofficialCurrencyCode NullableString `json:"unofficial_currency_code"`
	// The check number of the transaction. This field is only populated for check transactions.
	CheckNumber NullableString `json:"check_number,omitempty"`
	// For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). To receive information about the date that a posted transaction was initiated, see the `authorized_date` field.
	Date string `json:"date"`
	Location Location `json:"location"`
	// The merchant name or transaction description.  Note: This is a legacy field that is not actively maintained. Use `merchant_name` instead for the merchant name.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/sync` or `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
	Name NullableString `json:"name"`
	// The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`.
	MerchantName NullableString `json:"merchant_name,omitempty"`
	// The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/sync` or `/transactions/get`, this field will only be included if the client has set `options.include_original_description` to `true`.
	OriginalDescription NullableString `json:"original_description,omitempty"`
	PaymentMeta CashflowReportPaymentMeta `json:"payment_meta"`
	// When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled. Not all institutions provide pending transactions.
	Pending NullableBool `json:"pending"`
	// The ID of a posted transaction's associated pending transaction, where applicable. Not all institutions provide pending transactions.
	PendingTransactionId NullableString `json:"pending_transaction_id"`
	// This field is not typically populated and only relevant when dealing with sub-accounts. A sub-account most commonly exists in cases where a single account is linked to multiple cards, each with its own card number and card holder name; each card will be considered a sub-account. If the account does have sub-accounts, this field will typically be some combination of the sub-account owner's name and/or the sub-account mask. The format of this field is not standardized and will vary based on institution.
	AccountOwner NullableString `json:"account_owner"`
	// The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
	TransactionId string `json:"transaction_id"`
	// The URL of a logo associated with this transaction, if available. The logo will always be 100×100 pixel PNG file.
	LogoUrl NullableString `json:"logo_url,omitempty"`
	// The website associated with this transaction, if available.
	Website NullableString `json:"website,omitempty"`
	// The date that the transaction was authorized. For posted transactions, the `date` field will indicate the posted date, but `authorized_date` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_date`, when available, is generally preferable to use over the `date` field for posted transactions, as it will generally represent the date the user actually made the transaction. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
	AuthorizedDate NullableString `json:"authorized_date"`
	// Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For posted transactions, the `datetime` field will indicate the posted date, but `authorized_datetime` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_datetime`, when available, is generally preferable to use over the `datetime` field for posted transactions, as it will generally represent the date the user actually made the transaction.  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
	AuthorizedDatetime NullableTime `json:"authorized_datetime"`
	// Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For the date that the transaction was initiated, rather than posted, see the `authorized_datetime` field.  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
	Datetime NullableTime `json:"datetime"`
	PaymentChannel PaymentChannel `json:"payment_channel"`
	PersonalFinanceCategory NullablePersonalFinanceCategory `json:"personal_finance_category,omitempty"`
	BusinessFinanceCategory NullableBusinessFinanceCategory `json:"business_finance_category,omitempty"`
	CreditCategory NullableCreditCategory `json:"credit_category,omitempty"`
	TransactionCode NullableTransactionCode `json:"transaction_code"`
	// The URL of an icon associated with the primary personal finance category. The icon will always be 100×100 pixel PNG file.
	PersonalFinanceCategoryIconUrl NullableString `json:"personal_finance_category_icon_url,omitempty"`
	// The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description.
	Counterparties *[]TransactionCounterparty `json:"counterparties,omitempty"`
	// A unique, stable, Plaid-generated ID that maps to the merchant. In the case of a merchant with multiple retail locations, this field will map to the broader merchant, not a specific location or store.
	MerchantEntityId NullableString `json:"merchant_entity_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CashflowReportTransaction CashflowReportTransaction

// NewCashflowReportTransaction instantiates a new CashflowReportTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashflowReportTransaction(accountId string, amount NullableFloat64, isoCurrencyCode NullableString, unofficialCurrencyCode NullableString, date string, location Location, name NullableString, paymentMeta CashflowReportPaymentMeta, pending NullableBool, pendingTransactionId NullableString, accountOwner NullableString, transactionId string, authorizedDate NullableString, authorizedDatetime NullableTime, datetime NullableTime, paymentChannel PaymentChannel, transactionCode NullableTransactionCode) *CashflowReportTransaction {
	this := CashflowReportTransaction{}
	this.AccountId = accountId
	this.Amount = amount
	this.IsoCurrencyCode = isoCurrencyCode
	this.UnofficialCurrencyCode = unofficialCurrencyCode
	this.Date = date
	this.Location = location
	this.Name = name
	this.PaymentMeta = paymentMeta
	this.Pending = pending
	this.PendingTransactionId = pendingTransactionId
	this.AccountOwner = accountOwner
	this.TransactionId = transactionId
	this.AuthorizedDate = authorizedDate
	this.AuthorizedDatetime = authorizedDatetime
	this.Datetime = datetime
	this.PaymentChannel = paymentChannel
	this.TransactionCode = transactionCode
	return &this
}

// NewCashflowReportTransactionWithDefaults instantiates a new CashflowReportTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashflowReportTransactionWithDefaults() *CashflowReportTransaction {
	this := CashflowReportTransaction{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *CashflowReportTransaction) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *CashflowReportTransaction) GetAccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *CashflowReportTransaction) SetAccountId(v string) {
	o.AccountId = v
}

// GetAmount returns the Amount field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *CashflowReportTransaction) GetAmount() float64 {
	if o == nil || o.Amount.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// SetAmount sets field value
func (o *CashflowReportTransaction) SetAmount(v float64) {
	o.Amount.Set(&v)
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CashflowReportTransaction) GetIsoCurrencyCode() string {
	if o == nil || o.IsoCurrencyCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.IsoCurrencyCode.Get()
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsoCurrencyCode.Get(), o.IsoCurrencyCode.IsSet()
}

// SetIsoCurrencyCode sets field value
func (o *CashflowReportTransaction) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode.Set(&v)
}

// GetUnofficialCurrencyCode returns the UnofficialCurrencyCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CashflowReportTransaction) GetUnofficialCurrencyCode() string {
	if o == nil || o.UnofficialCurrencyCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.UnofficialCurrencyCode.Get()
}

// GetUnofficialCurrencyCodeOk returns a tuple with the UnofficialCurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetUnofficialCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnofficialCurrencyCode.Get(), o.UnofficialCurrencyCode.IsSet()
}

// SetUnofficialCurrencyCode sets field value
func (o *CashflowReportTransaction) SetUnofficialCurrencyCode(v string) {
	o.UnofficialCurrencyCode.Set(&v)
}

// GetCheckNumber returns the CheckNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashflowReportTransaction) GetCheckNumber() string {
	if o == nil || o.CheckNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.CheckNumber.Get()
}

// GetCheckNumberOk returns a tuple with the CheckNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetCheckNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CheckNumber.Get(), o.CheckNumber.IsSet()
}

// HasCheckNumber returns a boolean if a field has been set.
func (o *CashflowReportTransaction) HasCheckNumber() bool {
	if o != nil && o.CheckNumber.IsSet() {
		return true
	}

	return false
}

// SetCheckNumber gets a reference to the given NullableString and assigns it to the CheckNumber field.
func (o *CashflowReportTransaction) SetCheckNumber(v string) {
	o.CheckNumber.Set(&v)
}
// SetCheckNumberNil sets the value for CheckNumber to be an explicit nil
func (o *CashflowReportTransaction) SetCheckNumberNil() {
	o.CheckNumber.Set(nil)
}

// UnsetCheckNumber ensures that no value is present for CheckNumber, not even an explicit nil
func (o *CashflowReportTransaction) UnsetCheckNumber() {
	o.CheckNumber.Unset()
}

// GetDate returns the Date field value
func (o *CashflowReportTransaction) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CashflowReportTransaction) GetDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CashflowReportTransaction) SetDate(v string) {
	o.Date = v
}

// GetLocation returns the Location field value
func (o *CashflowReportTransaction) GetLocation() Location {
	if o == nil {
		var ret Location
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *CashflowReportTransaction) GetLocationOk() (*Location, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *CashflowReportTransaction) SetLocation(v Location) {
	o.Location = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CashflowReportTransaction) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CashflowReportTransaction) SetName(v string) {
	o.Name.Set(&v)
}

// GetMerchantName returns the MerchantName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashflowReportTransaction) GetMerchantName() string {
	if o == nil || o.MerchantName.Get() == nil {
		var ret string
		return ret
	}
	return *o.MerchantName.Get()
}

// GetMerchantNameOk returns a tuple with the MerchantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetMerchantNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MerchantName.Get(), o.MerchantName.IsSet()
}

// HasMerchantName returns a boolean if a field has been set.
func (o *CashflowReportTransaction) HasMerchantName() bool {
	if o != nil && o.MerchantName.IsSet() {
		return true
	}

	return false
}

// SetMerchantName gets a reference to the given NullableString and assigns it to the MerchantName field.
func (o *CashflowReportTransaction) SetMerchantName(v string) {
	o.MerchantName.Set(&v)
}
// SetMerchantNameNil sets the value for MerchantName to be an explicit nil
func (o *CashflowReportTransaction) SetMerchantNameNil() {
	o.MerchantName.Set(nil)
}

// UnsetMerchantName ensures that no value is present for MerchantName, not even an explicit nil
func (o *CashflowReportTransaction) UnsetMerchantName() {
	o.MerchantName.Unset()
}

// GetOriginalDescription returns the OriginalDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashflowReportTransaction) GetOriginalDescription() string {
	if o == nil || o.OriginalDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.OriginalDescription.Get()
}

// GetOriginalDescriptionOk returns a tuple with the OriginalDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetOriginalDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OriginalDescription.Get(), o.OriginalDescription.IsSet()
}

// HasOriginalDescription returns a boolean if a field has been set.
func (o *CashflowReportTransaction) HasOriginalDescription() bool {
	if o != nil && o.OriginalDescription.IsSet() {
		return true
	}

	return false
}

// SetOriginalDescription gets a reference to the given NullableString and assigns it to the OriginalDescription field.
func (o *CashflowReportTransaction) SetOriginalDescription(v string) {
	o.OriginalDescription.Set(&v)
}
// SetOriginalDescriptionNil sets the value for OriginalDescription to be an explicit nil
func (o *CashflowReportTransaction) SetOriginalDescriptionNil() {
	o.OriginalDescription.Set(nil)
}

// UnsetOriginalDescription ensures that no value is present for OriginalDescription, not even an explicit nil
func (o *CashflowReportTransaction) UnsetOriginalDescription() {
	o.OriginalDescription.Unset()
}

// GetPaymentMeta returns the PaymentMeta field value
func (o *CashflowReportTransaction) GetPaymentMeta() CashflowReportPaymentMeta {
	if o == nil {
		var ret CashflowReportPaymentMeta
		return ret
	}

	return o.PaymentMeta
}

// GetPaymentMetaOk returns a tuple with the PaymentMeta field value
// and a boolean to check if the value has been set.
func (o *CashflowReportTransaction) GetPaymentMetaOk() (*CashflowReportPaymentMeta, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PaymentMeta, true
}

// SetPaymentMeta sets field value
func (o *CashflowReportTransaction) SetPaymentMeta(v CashflowReportPaymentMeta) {
	o.PaymentMeta = v
}

// GetPending returns the Pending field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *CashflowReportTransaction) GetPending() bool {
	if o == nil || o.Pending.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Pending.Get()
}

// GetPendingOk returns a tuple with the Pending field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetPendingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Pending.Get(), o.Pending.IsSet()
}

// SetPending sets field value
func (o *CashflowReportTransaction) SetPending(v bool) {
	o.Pending.Set(&v)
}

// GetPendingTransactionId returns the PendingTransactionId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CashflowReportTransaction) GetPendingTransactionId() string {
	if o == nil || o.PendingTransactionId.Get() == nil {
		var ret string
		return ret
	}

	return *o.PendingTransactionId.Get()
}

// GetPendingTransactionIdOk returns a tuple with the PendingTransactionId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetPendingTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PendingTransactionId.Get(), o.PendingTransactionId.IsSet()
}

// SetPendingTransactionId sets field value
func (o *CashflowReportTransaction) SetPendingTransactionId(v string) {
	o.PendingTransactionId.Set(&v)
}

// GetAccountOwner returns the AccountOwner field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CashflowReportTransaction) GetAccountOwner() string {
	if o == nil || o.AccountOwner.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccountOwner.Get()
}

// GetAccountOwnerOk returns a tuple with the AccountOwner field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetAccountOwnerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountOwner.Get(), o.AccountOwner.IsSet()
}

// SetAccountOwner sets field value
func (o *CashflowReportTransaction) SetAccountOwner(v string) {
	o.AccountOwner.Set(&v)
}

// GetTransactionId returns the TransactionId field value
func (o *CashflowReportTransaction) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *CashflowReportTransaction) GetTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *CashflowReportTransaction) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashflowReportTransaction) GetLogoUrl() string {
	if o == nil || o.LogoUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.LogoUrl.Get()
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetLogoUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogoUrl.Get(), o.LogoUrl.IsSet()
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *CashflowReportTransaction) HasLogoUrl() bool {
	if o != nil && o.LogoUrl.IsSet() {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given NullableString and assigns it to the LogoUrl field.
func (o *CashflowReportTransaction) SetLogoUrl(v string) {
	o.LogoUrl.Set(&v)
}
// SetLogoUrlNil sets the value for LogoUrl to be an explicit nil
func (o *CashflowReportTransaction) SetLogoUrlNil() {
	o.LogoUrl.Set(nil)
}

// UnsetLogoUrl ensures that no value is present for LogoUrl, not even an explicit nil
func (o *CashflowReportTransaction) UnsetLogoUrl() {
	o.LogoUrl.Unset()
}

// GetWebsite returns the Website field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashflowReportTransaction) GetWebsite() string {
	if o == nil || o.Website.Get() == nil {
		var ret string
		return ret
	}
	return *o.Website.Get()
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetWebsiteOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Website.Get(), o.Website.IsSet()
}

// HasWebsite returns a boolean if a field has been set.
func (o *CashflowReportTransaction) HasWebsite() bool {
	if o != nil && o.Website.IsSet() {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given NullableString and assigns it to the Website field.
func (o *CashflowReportTransaction) SetWebsite(v string) {
	o.Website.Set(&v)
}
// SetWebsiteNil sets the value for Website to be an explicit nil
func (o *CashflowReportTransaction) SetWebsiteNil() {
	o.Website.Set(nil)
}

// UnsetWebsite ensures that no value is present for Website, not even an explicit nil
func (o *CashflowReportTransaction) UnsetWebsite() {
	o.Website.Unset()
}

// GetAuthorizedDate returns the AuthorizedDate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CashflowReportTransaction) GetAuthorizedDate() string {
	if o == nil || o.AuthorizedDate.Get() == nil {
		var ret string
		return ret
	}

	return *o.AuthorizedDate.Get()
}

// GetAuthorizedDateOk returns a tuple with the AuthorizedDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetAuthorizedDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthorizedDate.Get(), o.AuthorizedDate.IsSet()
}

// SetAuthorizedDate sets field value
func (o *CashflowReportTransaction) SetAuthorizedDate(v string) {
	o.AuthorizedDate.Set(&v)
}

// GetAuthorizedDatetime returns the AuthorizedDatetime field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *CashflowReportTransaction) GetAuthorizedDatetime() time.Time {
	if o == nil || o.AuthorizedDatetime.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.AuthorizedDatetime.Get()
}

// GetAuthorizedDatetimeOk returns a tuple with the AuthorizedDatetime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetAuthorizedDatetimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthorizedDatetime.Get(), o.AuthorizedDatetime.IsSet()
}

// SetAuthorizedDatetime sets field value
func (o *CashflowReportTransaction) SetAuthorizedDatetime(v time.Time) {
	o.AuthorizedDatetime.Set(&v)
}

// GetDatetime returns the Datetime field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *CashflowReportTransaction) GetDatetime() time.Time {
	if o == nil || o.Datetime.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Datetime.Get()
}

// GetDatetimeOk returns a tuple with the Datetime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetDatetimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Datetime.Get(), o.Datetime.IsSet()
}

// SetDatetime sets field value
func (o *CashflowReportTransaction) SetDatetime(v time.Time) {
	o.Datetime.Set(&v)
}

// GetPaymentChannel returns the PaymentChannel field value
func (o *CashflowReportTransaction) GetPaymentChannel() PaymentChannel {
	if o == nil {
		var ret PaymentChannel
		return ret
	}

	return o.PaymentChannel
}

// GetPaymentChannelOk returns a tuple with the PaymentChannel field value
// and a boolean to check if the value has been set.
func (o *CashflowReportTransaction) GetPaymentChannelOk() (*PaymentChannel, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PaymentChannel, true
}

// SetPaymentChannel sets field value
func (o *CashflowReportTransaction) SetPaymentChannel(v PaymentChannel) {
	o.PaymentChannel = v
}

// GetPersonalFinanceCategory returns the PersonalFinanceCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashflowReportTransaction) GetPersonalFinanceCategory() PersonalFinanceCategory {
	if o == nil || o.PersonalFinanceCategory.Get() == nil {
		var ret PersonalFinanceCategory
		return ret
	}
	return *o.PersonalFinanceCategory.Get()
}

// GetPersonalFinanceCategoryOk returns a tuple with the PersonalFinanceCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetPersonalFinanceCategoryOk() (*PersonalFinanceCategory, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PersonalFinanceCategory.Get(), o.PersonalFinanceCategory.IsSet()
}

// HasPersonalFinanceCategory returns a boolean if a field has been set.
func (o *CashflowReportTransaction) HasPersonalFinanceCategory() bool {
	if o != nil && o.PersonalFinanceCategory.IsSet() {
		return true
	}

	return false
}

// SetPersonalFinanceCategory gets a reference to the given NullablePersonalFinanceCategory and assigns it to the PersonalFinanceCategory field.
func (o *CashflowReportTransaction) SetPersonalFinanceCategory(v PersonalFinanceCategory) {
	o.PersonalFinanceCategory.Set(&v)
}
// SetPersonalFinanceCategoryNil sets the value for PersonalFinanceCategory to be an explicit nil
func (o *CashflowReportTransaction) SetPersonalFinanceCategoryNil() {
	o.PersonalFinanceCategory.Set(nil)
}

// UnsetPersonalFinanceCategory ensures that no value is present for PersonalFinanceCategory, not even an explicit nil
func (o *CashflowReportTransaction) UnsetPersonalFinanceCategory() {
	o.PersonalFinanceCategory.Unset()
}

// GetBusinessFinanceCategory returns the BusinessFinanceCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashflowReportTransaction) GetBusinessFinanceCategory() BusinessFinanceCategory {
	if o == nil || o.BusinessFinanceCategory.Get() == nil {
		var ret BusinessFinanceCategory
		return ret
	}
	return *o.BusinessFinanceCategory.Get()
}

// GetBusinessFinanceCategoryOk returns a tuple with the BusinessFinanceCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetBusinessFinanceCategoryOk() (*BusinessFinanceCategory, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BusinessFinanceCategory.Get(), o.BusinessFinanceCategory.IsSet()
}

// HasBusinessFinanceCategory returns a boolean if a field has been set.
func (o *CashflowReportTransaction) HasBusinessFinanceCategory() bool {
	if o != nil && o.BusinessFinanceCategory.IsSet() {
		return true
	}

	return false
}

// SetBusinessFinanceCategory gets a reference to the given NullableBusinessFinanceCategory and assigns it to the BusinessFinanceCategory field.
func (o *CashflowReportTransaction) SetBusinessFinanceCategory(v BusinessFinanceCategory) {
	o.BusinessFinanceCategory.Set(&v)
}
// SetBusinessFinanceCategoryNil sets the value for BusinessFinanceCategory to be an explicit nil
func (o *CashflowReportTransaction) SetBusinessFinanceCategoryNil() {
	o.BusinessFinanceCategory.Set(nil)
}

// UnsetBusinessFinanceCategory ensures that no value is present for BusinessFinanceCategory, not even an explicit nil
func (o *CashflowReportTransaction) UnsetBusinessFinanceCategory() {
	o.BusinessFinanceCategory.Unset()
}

// GetCreditCategory returns the CreditCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashflowReportTransaction) GetCreditCategory() CreditCategory {
	if o == nil || o.CreditCategory.Get() == nil {
		var ret CreditCategory
		return ret
	}
	return *o.CreditCategory.Get()
}

// GetCreditCategoryOk returns a tuple with the CreditCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetCreditCategoryOk() (*CreditCategory, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreditCategory.Get(), o.CreditCategory.IsSet()
}

// HasCreditCategory returns a boolean if a field has been set.
func (o *CashflowReportTransaction) HasCreditCategory() bool {
	if o != nil && o.CreditCategory.IsSet() {
		return true
	}

	return false
}

// SetCreditCategory gets a reference to the given NullableCreditCategory and assigns it to the CreditCategory field.
func (o *CashflowReportTransaction) SetCreditCategory(v CreditCategory) {
	o.CreditCategory.Set(&v)
}
// SetCreditCategoryNil sets the value for CreditCategory to be an explicit nil
func (o *CashflowReportTransaction) SetCreditCategoryNil() {
	o.CreditCategory.Set(nil)
}

// UnsetCreditCategory ensures that no value is present for CreditCategory, not even an explicit nil
func (o *CashflowReportTransaction) UnsetCreditCategory() {
	o.CreditCategory.Unset()
}

// GetTransactionCode returns the TransactionCode field value
// If the value is explicit nil, the zero value for TransactionCode will be returned
func (o *CashflowReportTransaction) GetTransactionCode() TransactionCode {
	if o == nil || o.TransactionCode.Get() == nil {
		var ret TransactionCode
		return ret
	}

	return *o.TransactionCode.Get()
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetTransactionCodeOk() (*TransactionCode, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TransactionCode.Get(), o.TransactionCode.IsSet()
}

// SetTransactionCode sets field value
func (o *CashflowReportTransaction) SetTransactionCode(v TransactionCode) {
	o.TransactionCode.Set(&v)
}

// GetPersonalFinanceCategoryIconUrl returns the PersonalFinanceCategoryIconUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashflowReportTransaction) GetPersonalFinanceCategoryIconUrl() string {
	if o == nil || o.PersonalFinanceCategoryIconUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.PersonalFinanceCategoryIconUrl.Get()
}

// GetPersonalFinanceCategoryIconUrlOk returns a tuple with the PersonalFinanceCategoryIconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetPersonalFinanceCategoryIconUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PersonalFinanceCategoryIconUrl.Get(), o.PersonalFinanceCategoryIconUrl.IsSet()
}

// HasPersonalFinanceCategoryIconUrl returns a boolean if a field has been set.
func (o *CashflowReportTransaction) HasPersonalFinanceCategoryIconUrl() bool {
	if o != nil && o.PersonalFinanceCategoryIconUrl.IsSet() {
		return true
	}

	return false
}

// SetPersonalFinanceCategoryIconUrl gets a reference to the given NullableString and assigns it to the PersonalFinanceCategoryIconUrl field.
func (o *CashflowReportTransaction) SetPersonalFinanceCategoryIconUrl(v string) {
	o.PersonalFinanceCategoryIconUrl.Set(&v)
}
// SetPersonalFinanceCategoryIconUrlNil sets the value for PersonalFinanceCategoryIconUrl to be an explicit nil
func (o *CashflowReportTransaction) SetPersonalFinanceCategoryIconUrlNil() {
	o.PersonalFinanceCategoryIconUrl.Set(nil)
}

// UnsetPersonalFinanceCategoryIconUrl ensures that no value is present for PersonalFinanceCategoryIconUrl, not even an explicit nil
func (o *CashflowReportTransaction) UnsetPersonalFinanceCategoryIconUrl() {
	o.PersonalFinanceCategoryIconUrl.Unset()
}

// GetCounterparties returns the Counterparties field value if set, zero value otherwise.
func (o *CashflowReportTransaction) GetCounterparties() []TransactionCounterparty {
	if o == nil || o.Counterparties == nil {
		var ret []TransactionCounterparty
		return ret
	}
	return *o.Counterparties
}

// GetCounterpartiesOk returns a tuple with the Counterparties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CashflowReportTransaction) GetCounterpartiesOk() (*[]TransactionCounterparty, bool) {
	if o == nil || o.Counterparties == nil {
		return nil, false
	}
	return o.Counterparties, true
}

// HasCounterparties returns a boolean if a field has been set.
func (o *CashflowReportTransaction) HasCounterparties() bool {
	if o != nil && o.Counterparties != nil {
		return true
	}

	return false
}

// SetCounterparties gets a reference to the given []TransactionCounterparty and assigns it to the Counterparties field.
func (o *CashflowReportTransaction) SetCounterparties(v []TransactionCounterparty) {
	o.Counterparties = &v
}

// GetMerchantEntityId returns the MerchantEntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CashflowReportTransaction) GetMerchantEntityId() string {
	if o == nil || o.MerchantEntityId.Get() == nil {
		var ret string
		return ret
	}
	return *o.MerchantEntityId.Get()
}

// GetMerchantEntityIdOk returns a tuple with the MerchantEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportTransaction) GetMerchantEntityIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MerchantEntityId.Get(), o.MerchantEntityId.IsSet()
}

// HasMerchantEntityId returns a boolean if a field has been set.
func (o *CashflowReportTransaction) HasMerchantEntityId() bool {
	if o != nil && o.MerchantEntityId.IsSet() {
		return true
	}

	return false
}

// SetMerchantEntityId gets a reference to the given NullableString and assigns it to the MerchantEntityId field.
func (o *CashflowReportTransaction) SetMerchantEntityId(v string) {
	o.MerchantEntityId.Set(&v)
}
// SetMerchantEntityIdNil sets the value for MerchantEntityId to be an explicit nil
func (o *CashflowReportTransaction) SetMerchantEntityIdNil() {
	o.MerchantEntityId.Set(nil)
}

// UnsetMerchantEntityId ensures that no value is present for MerchantEntityId, not even an explicit nil
func (o *CashflowReportTransaction) UnsetMerchantEntityId() {
	o.MerchantEntityId.Unset()
}

func (o CashflowReportTransaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_id"] = o.AccountId
	}
	if true {
		toSerialize["amount"] = o.Amount.Get()
	}
	if true {
		toSerialize["iso_currency_code"] = o.IsoCurrencyCode.Get()
	}
	if true {
		toSerialize["unofficial_currency_code"] = o.UnofficialCurrencyCode.Get()
	}
	if o.CheckNumber.IsSet() {
		toSerialize["check_number"] = o.CheckNumber.Get()
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["location"] = o.Location
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.MerchantName.IsSet() {
		toSerialize["merchant_name"] = o.MerchantName.Get()
	}
	if o.OriginalDescription.IsSet() {
		toSerialize["original_description"] = o.OriginalDescription.Get()
	}
	if true {
		toSerialize["payment_meta"] = o.PaymentMeta
	}
	if true {
		toSerialize["pending"] = o.Pending.Get()
	}
	if true {
		toSerialize["pending_transaction_id"] = o.PendingTransactionId.Get()
	}
	if true {
		toSerialize["account_owner"] = o.AccountOwner.Get()
	}
	if true {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if o.LogoUrl.IsSet() {
		toSerialize["logo_url"] = o.LogoUrl.Get()
	}
	if o.Website.IsSet() {
		toSerialize["website"] = o.Website.Get()
	}
	if true {
		toSerialize["authorized_date"] = o.AuthorizedDate.Get()
	}
	if true {
		toSerialize["authorized_datetime"] = o.AuthorizedDatetime.Get()
	}
	if true {
		toSerialize["datetime"] = o.Datetime.Get()
	}
	if true {
		toSerialize["payment_channel"] = o.PaymentChannel
	}
	if o.PersonalFinanceCategory.IsSet() {
		toSerialize["personal_finance_category"] = o.PersonalFinanceCategory.Get()
	}
	if o.BusinessFinanceCategory.IsSet() {
		toSerialize["business_finance_category"] = o.BusinessFinanceCategory.Get()
	}
	if o.CreditCategory.IsSet() {
		toSerialize["credit_category"] = o.CreditCategory.Get()
	}
	if true {
		toSerialize["transaction_code"] = o.TransactionCode.Get()
	}
	if o.PersonalFinanceCategoryIconUrl.IsSet() {
		toSerialize["personal_finance_category_icon_url"] = o.PersonalFinanceCategoryIconUrl.Get()
	}
	if o.Counterparties != nil {
		toSerialize["counterparties"] = o.Counterparties
	}
	if o.MerchantEntityId.IsSet() {
		toSerialize["merchant_entity_id"] = o.MerchantEntityId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CashflowReportTransaction) UnmarshalJSON(bytes []byte) (err error) {
	varCashflowReportTransaction := _CashflowReportTransaction{}

	if err = json.Unmarshal(bytes, &varCashflowReportTransaction); err == nil {
		*o = CashflowReportTransaction(varCashflowReportTransaction)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "iso_currency_code")
		delete(additionalProperties, "unofficial_currency_code")
		delete(additionalProperties, "check_number")
		delete(additionalProperties, "date")
		delete(additionalProperties, "location")
		delete(additionalProperties, "name")
		delete(additionalProperties, "merchant_name")
		delete(additionalProperties, "original_description")
		delete(additionalProperties, "payment_meta")
		delete(additionalProperties, "pending")
		delete(additionalProperties, "pending_transaction_id")
		delete(additionalProperties, "account_owner")
		delete(additionalProperties, "transaction_id")
		delete(additionalProperties, "logo_url")
		delete(additionalProperties, "website")
		delete(additionalProperties, "authorized_date")
		delete(additionalProperties, "authorized_datetime")
		delete(additionalProperties, "datetime")
		delete(additionalProperties, "payment_channel")
		delete(additionalProperties, "personal_finance_category")
		delete(additionalProperties, "business_finance_category")
		delete(additionalProperties, "credit_category")
		delete(additionalProperties, "transaction_code")
		delete(additionalProperties, "personal_finance_category_icon_url")
		delete(additionalProperties, "counterparties")
		delete(additionalProperties, "merchant_entity_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCashflowReportTransaction struct {
	value *CashflowReportTransaction
	isSet bool
}

func (v NullableCashflowReportTransaction) Get() *CashflowReportTransaction {
	return v.value
}

func (v *NullableCashflowReportTransaction) Set(val *CashflowReportTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableCashflowReportTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableCashflowReportTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashflowReportTransaction(val *CashflowReportTransaction) *NullableCashflowReportTransaction {
	return &NullableCashflowReportTransaction{value: val, isSet: true}
}

func (v NullableCashflowReportTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashflowReportTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


