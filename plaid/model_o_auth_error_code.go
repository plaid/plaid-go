/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.664.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// OAuthErrorCode OAuth error code
type OAuthErrorCode string

var _ = fmt.Printf

// List of OAuthErrorCode
const (
	OAUTHERRORCODE_INVALID_REQUEST OAuthErrorCode = "invalid_request"
	OAUTHERRORCODE_INVALID_CLIENT OAuthErrorCode = "invalid_client"
	OAUTHERRORCODE_INVALID_GRANT OAuthErrorCode = "invalid_grant"
	OAUTHERRORCODE_UNAUTHORIZED_CLIENT OAuthErrorCode = "unauthorized_client"
	OAUTHERRORCODE_INVALID_SCOPE OAuthErrorCode = "invalid_scope"
	OAUTHERRORCODE_UNSUPPORTED_GRANT_TYPE OAuthErrorCode = "unsupported_grant_type"
)

var allowedOAuthErrorCodeEnumValues = []OAuthErrorCode{
	"invalid_request",
	"invalid_client",
	"invalid_grant",
	"unauthorized_client",
	"invalid_scope",
	"unsupported_grant_type",
}

func (v *OAuthErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := OAuthErrorCode(value)


	*v = enumTypeValue
	return nil
}

// NewOAuthErrorCodeFromValue returns a pointer to a valid OAuthErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOAuthErrorCodeFromValue(v string) (*OAuthErrorCode, error) {
	ev := OAuthErrorCode(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OAuthErrorCode) IsValid() bool {
	for _, existing := range allowedOAuthErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OAuthErrorCode value
func (v OAuthErrorCode) Ptr() *OAuthErrorCode {
	return &v
}

type NullableOAuthErrorCode struct {
	value *OAuthErrorCode
	isSet bool
}

func (v NullableOAuthErrorCode) Get() *OAuthErrorCode {
	return v.value
}

func (v *NullableOAuthErrorCode) Set(val *OAuthErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthErrorCode(val *OAuthErrorCode) *NullableOAuthErrorCode {
	return &NullableOAuthErrorCode{value: val, isSet: true}
}

func (v NullableOAuthErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

