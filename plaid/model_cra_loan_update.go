/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.534.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CraLoanUpdate Contains loan data to update.
type CraLoanUpdate struct {
	// A unique identifier for the loan.  Personally identifiable information, such as an email address or phone number, should not be used in the `loan_id`.
	LoanId *string `json:"loan_id,omitempty"`
	// A list of status update history of the loan.
	StatusHistory *[]CraLoanStatusHistoryUpdate `json:"status_history,omitempty"`
	// The updates to the payment history for the loan.
	PaymentHistory *[]CraLoanPaymentHistory `json:"payment_history,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CraLoanUpdate CraLoanUpdate

// NewCraLoanUpdate instantiates a new CraLoanUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCraLoanUpdate() *CraLoanUpdate {
	this := CraLoanUpdate{}
	return &this
}

// NewCraLoanUpdateWithDefaults instantiates a new CraLoanUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCraLoanUpdateWithDefaults() *CraLoanUpdate {
	this := CraLoanUpdate{}
	return &this
}

// GetLoanId returns the LoanId field value if set, zero value otherwise.
func (o *CraLoanUpdate) GetLoanId() string {
	if o == nil || o.LoanId == nil {
		var ret string
		return ret
	}
	return *o.LoanId
}

// GetLoanIdOk returns a tuple with the LoanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraLoanUpdate) GetLoanIdOk() (*string, bool) {
	if o == nil || o.LoanId == nil {
		return nil, false
	}
	return o.LoanId, true
}

// HasLoanId returns a boolean if a field has been set.
func (o *CraLoanUpdate) HasLoanId() bool {
	if o != nil && o.LoanId != nil {
		return true
	}

	return false
}

// SetLoanId gets a reference to the given string and assigns it to the LoanId field.
func (o *CraLoanUpdate) SetLoanId(v string) {
	o.LoanId = &v
}

// GetStatusHistory returns the StatusHistory field value if set, zero value otherwise.
func (o *CraLoanUpdate) GetStatusHistory() []CraLoanStatusHistoryUpdate {
	if o == nil || o.StatusHistory == nil {
		var ret []CraLoanStatusHistoryUpdate
		return ret
	}
	return *o.StatusHistory
}

// GetStatusHistoryOk returns a tuple with the StatusHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraLoanUpdate) GetStatusHistoryOk() (*[]CraLoanStatusHistoryUpdate, bool) {
	if o == nil || o.StatusHistory == nil {
		return nil, false
	}
	return o.StatusHistory, true
}

// HasStatusHistory returns a boolean if a field has been set.
func (o *CraLoanUpdate) HasStatusHistory() bool {
	if o != nil && o.StatusHistory != nil {
		return true
	}

	return false
}

// SetStatusHistory gets a reference to the given []CraLoanStatusHistoryUpdate and assigns it to the StatusHistory field.
func (o *CraLoanUpdate) SetStatusHistory(v []CraLoanStatusHistoryUpdate) {
	o.StatusHistory = &v
}

// GetPaymentHistory returns the PaymentHistory field value if set, zero value otherwise.
func (o *CraLoanUpdate) GetPaymentHistory() []CraLoanPaymentHistory {
	if o == nil || o.PaymentHistory == nil {
		var ret []CraLoanPaymentHistory
		return ret
	}
	return *o.PaymentHistory
}

// GetPaymentHistoryOk returns a tuple with the PaymentHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraLoanUpdate) GetPaymentHistoryOk() (*[]CraLoanPaymentHistory, bool) {
	if o == nil || o.PaymentHistory == nil {
		return nil, false
	}
	return o.PaymentHistory, true
}

// HasPaymentHistory returns a boolean if a field has been set.
func (o *CraLoanUpdate) HasPaymentHistory() bool {
	if o != nil && o.PaymentHistory != nil {
		return true
	}

	return false
}

// SetPaymentHistory gets a reference to the given []CraLoanPaymentHistory and assigns it to the PaymentHistory field.
func (o *CraLoanUpdate) SetPaymentHistory(v []CraLoanPaymentHistory) {
	o.PaymentHistory = &v
}

func (o CraLoanUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LoanId != nil {
		toSerialize["loan_id"] = o.LoanId
	}
	if o.StatusHistory != nil {
		toSerialize["status_history"] = o.StatusHistory
	}
	if o.PaymentHistory != nil {
		toSerialize["payment_history"] = o.PaymentHistory
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CraLoanUpdate) UnmarshalJSON(bytes []byte) (err error) {
	varCraLoanUpdate := _CraLoanUpdate{}

	if err = json.Unmarshal(bytes, &varCraLoanUpdate); err == nil {
		*o = CraLoanUpdate(varCraLoanUpdate)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "loan_id")
		delete(additionalProperties, "status_history")
		delete(additionalProperties, "payment_history")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCraLoanUpdate struct {
	value *CraLoanUpdate
	isSet bool
}

func (v NullableCraLoanUpdate) Get() *CraLoanUpdate {
	return v.value
}

func (v *NullableCraLoanUpdate) Set(val *CraLoanUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCraLoanUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCraLoanUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraLoanUpdate(val *CraLoanUpdate) *NullableCraLoanUpdate {
	return &NullableCraLoanUpdate{value: val, isSet: true}
}

func (v NullableCraLoanUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraLoanUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


