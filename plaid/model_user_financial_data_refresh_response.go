/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// UserFinancialDataRefreshResponse UserFinancialDataRefreshResponse defines the response schema for `user/financial_data/refresh`
type UserFinancialDataRefreshResponse struct {
	// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
	RequestId *string `json:"request_id,omitempty"`
	// The user ID associated with the refresh request.
	UserId *string `json:"user_id,omitempty"`
	Results *[]RefreshResult `json:"results,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserFinancialDataRefreshResponse UserFinancialDataRefreshResponse

// NewUserFinancialDataRefreshResponse instantiates a new UserFinancialDataRefreshResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserFinancialDataRefreshResponse() *UserFinancialDataRefreshResponse {
	this := UserFinancialDataRefreshResponse{}
	return &this
}

// NewUserFinancialDataRefreshResponseWithDefaults instantiates a new UserFinancialDataRefreshResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserFinancialDataRefreshResponseWithDefaults() *UserFinancialDataRefreshResponse {
	this := UserFinancialDataRefreshResponse{}
	return &this
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *UserFinancialDataRefreshResponse) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFinancialDataRefreshResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || o.RequestId == nil {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *UserFinancialDataRefreshResponse) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *UserFinancialDataRefreshResponse) SetRequestId(v string) {
	o.RequestId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserFinancialDataRefreshResponse) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFinancialDataRefreshResponse) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserFinancialDataRefreshResponse) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *UserFinancialDataRefreshResponse) SetUserId(v string) {
	o.UserId = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *UserFinancialDataRefreshResponse) GetResults() []RefreshResult {
	if o == nil || o.Results == nil {
		var ret []RefreshResult
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFinancialDataRefreshResponse) GetResultsOk() (*[]RefreshResult, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *UserFinancialDataRefreshResponse) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []RefreshResult and assigns it to the Results field.
func (o *UserFinancialDataRefreshResponse) SetResults(v []RefreshResult) {
	o.Results = &v
}

func (o UserFinancialDataRefreshResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RequestId != nil {
		toSerialize["request_id"] = o.RequestId
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserFinancialDataRefreshResponse) UnmarshalJSON(bytes []byte) (err error) {
	varUserFinancialDataRefreshResponse := _UserFinancialDataRefreshResponse{}

	if err = json.Unmarshal(bytes, &varUserFinancialDataRefreshResponse); err == nil {
		*o = UserFinancialDataRefreshResponse(varUserFinancialDataRefreshResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "request_id")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "results")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserFinancialDataRefreshResponse struct {
	value *UserFinancialDataRefreshResponse
	isSet bool
}

func (v NullableUserFinancialDataRefreshResponse) Get() *UserFinancialDataRefreshResponse {
	return v.value
}

func (v *NullableUserFinancialDataRefreshResponse) Set(val *UserFinancialDataRefreshResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFinancialDataRefreshResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFinancialDataRefreshResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFinancialDataRefreshResponse(val *UserFinancialDataRefreshResponse) *NullableUserFinancialDataRefreshResponse {
	return &NullableUserFinancialDataRefreshResponse{value: val, isSet: true}
}

func (v NullableUserFinancialDataRefreshResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFinancialDataRefreshResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


