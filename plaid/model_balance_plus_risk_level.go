/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// BalancePlusRiskLevel A five-tier risk assessment for the transaction, based on the probability distribution of ACH returns, measured by the incident rate.   Each tier corresponds to a distribution with a different mean (average) probability.   `HIGH`: The mean probability of ACH return risk is above 40%. `MEDIUM_HIGH`: The mean probability of ACH return risk is 15%-40%.  `MEDIUM`: The mean probability of ACH return risk is 5-10%. `MEDIUM_LOW`: The mean probability of ACH return risk is 1%-2%. `LOW`: The mean probability of ACH return risk is below 1%.   Note that these tiers correspond to probability *distributions* and not to discrete probabilities.   These tier definitions are specific to Balance Plus and do not apply to risk tiers generated by other Plaid endpoints. 
type BalancePlusRiskLevel string

var _ = fmt.Printf

// List of BalancePlusRiskLevel
const (
	BALANCEPLUSRISKLEVEL_HIGH BalancePlusRiskLevel = "HIGH"
	BALANCEPLUSRISKLEVEL_MEDIUM_HIGH BalancePlusRiskLevel = "MEDIUM_HIGH"
	BALANCEPLUSRISKLEVEL_MEDIUM BalancePlusRiskLevel = "MEDIUM"
	BALANCEPLUSRISKLEVEL_MEDIUM_LOW BalancePlusRiskLevel = "MEDIUM_LOW"
	BALANCEPLUSRISKLEVEL_LOW BalancePlusRiskLevel = "LOW"
)

var allowedBalancePlusRiskLevelEnumValues = []BalancePlusRiskLevel{
	"HIGH",
	"MEDIUM_HIGH",
	"MEDIUM",
	"MEDIUM_LOW",
	"LOW",
}

func (v *BalancePlusRiskLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := BalancePlusRiskLevel(value)


	*v = enumTypeValue
	return nil
}

// NewBalancePlusRiskLevelFromValue returns a pointer to a valid BalancePlusRiskLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBalancePlusRiskLevelFromValue(v string) (*BalancePlusRiskLevel, error) {
	ev := BalancePlusRiskLevel(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BalancePlusRiskLevel) IsValid() bool {
	for _, existing := range allowedBalancePlusRiskLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BalancePlusRiskLevel value
func (v BalancePlusRiskLevel) Ptr() *BalancePlusRiskLevel {
	return &v
}

type NullableBalancePlusRiskLevel struct {
	value *BalancePlusRiskLevel
	isSet bool
}

func (v NullableBalancePlusRiskLevel) Get() *BalancePlusRiskLevel {
	return v.value
}

func (v *NullableBalancePlusRiskLevel) Set(val *BalancePlusRiskLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableBalancePlusRiskLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableBalancePlusRiskLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalancePlusRiskLevel(val *BalancePlusRiskLevel) *NullableBalancePlusRiskLevel {
	return &NullableBalancePlusRiskLevel{value: val, isSet: true}
}

func (v NullableBalancePlusRiskLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalancePlusRiskLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

