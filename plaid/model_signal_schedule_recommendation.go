/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.617.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// SignalScheduleRecommendation Conveys information on if a retry is recommended on a given date
type SignalScheduleRecommendation struct {
	// The specific date for submitting the debit entry, formatted in ISO 8601 (e.g., \"2025-01-17\").
	Date *string `json:"date,omitempty"`
	Recommendation *RecommendationString `json:"recommendation,omitempty"`
	// The rank of the recommendation based on the likelihood of debit success, with 1 representing the most optimal date. Dates with `NOT_RECOMMENDED` or `UNKNOWN` will have rank `null`.
	Rank NullableInt32 `json:"rank,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SignalScheduleRecommendation SignalScheduleRecommendation

// NewSignalScheduleRecommendation instantiates a new SignalScheduleRecommendation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalScheduleRecommendation() *SignalScheduleRecommendation {
	this := SignalScheduleRecommendation{}
	return &this
}

// NewSignalScheduleRecommendationWithDefaults instantiates a new SignalScheduleRecommendation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalScheduleRecommendationWithDefaults() *SignalScheduleRecommendation {
	this := SignalScheduleRecommendation{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *SignalScheduleRecommendation) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalScheduleRecommendation) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *SignalScheduleRecommendation) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *SignalScheduleRecommendation) SetDate(v string) {
	o.Date = &v
}

// GetRecommendation returns the Recommendation field value if set, zero value otherwise.
func (o *SignalScheduleRecommendation) GetRecommendation() RecommendationString {
	if o == nil || o.Recommendation == nil {
		var ret RecommendationString
		return ret
	}
	return *o.Recommendation
}

// GetRecommendationOk returns a tuple with the Recommendation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalScheduleRecommendation) GetRecommendationOk() (*RecommendationString, bool) {
	if o == nil || o.Recommendation == nil {
		return nil, false
	}
	return o.Recommendation, true
}

// HasRecommendation returns a boolean if a field has been set.
func (o *SignalScheduleRecommendation) HasRecommendation() bool {
	if o != nil && o.Recommendation != nil {
		return true
	}

	return false
}

// SetRecommendation gets a reference to the given RecommendationString and assigns it to the Recommendation field.
func (o *SignalScheduleRecommendation) SetRecommendation(v RecommendationString) {
	o.Recommendation = &v
}

// GetRank returns the Rank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SignalScheduleRecommendation) GetRank() int32 {
	if o == nil || o.Rank.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Rank.Get()
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignalScheduleRecommendation) GetRankOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Rank.Get(), o.Rank.IsSet()
}

// HasRank returns a boolean if a field has been set.
func (o *SignalScheduleRecommendation) HasRank() bool {
	if o != nil && o.Rank.IsSet() {
		return true
	}

	return false
}

// SetRank gets a reference to the given NullableInt32 and assigns it to the Rank field.
func (o *SignalScheduleRecommendation) SetRank(v int32) {
	o.Rank.Set(&v)
}
// SetRankNil sets the value for Rank to be an explicit nil
func (o *SignalScheduleRecommendation) SetRankNil() {
	o.Rank.Set(nil)
}

// UnsetRank ensures that no value is present for Rank, not even an explicit nil
func (o *SignalScheduleRecommendation) UnsetRank() {
	o.Rank.Unset()
}

func (o SignalScheduleRecommendation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.Recommendation != nil {
		toSerialize["recommendation"] = o.Recommendation
	}
	if o.Rank.IsSet() {
		toSerialize["rank"] = o.Rank.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SignalScheduleRecommendation) UnmarshalJSON(bytes []byte) (err error) {
	varSignalScheduleRecommendation := _SignalScheduleRecommendation{}

	if err = json.Unmarshal(bytes, &varSignalScheduleRecommendation); err == nil {
		*o = SignalScheduleRecommendation(varSignalScheduleRecommendation)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "date")
		delete(additionalProperties, "recommendation")
		delete(additionalProperties, "rank")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSignalScheduleRecommendation struct {
	value *SignalScheduleRecommendation
	isSet bool
}

func (v NullableSignalScheduleRecommendation) Get() *SignalScheduleRecommendation {
	return v.value
}

func (v *NullableSignalScheduleRecommendation) Set(val *SignalScheduleRecommendation) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalScheduleRecommendation) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalScheduleRecommendation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalScheduleRecommendation(val *SignalScheduleRecommendation) *NullableSignalScheduleRecommendation {
	return &NullableSignalScheduleRecommendation{value: val, isSet: true}
}

func (v NullableSignalScheduleRecommendation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalScheduleRecommendation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


