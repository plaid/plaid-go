/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.652.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// FixedIncome Details about the fixed income security.
type FixedIncome struct {
	YieldRate NullableYieldRate `json:"yield_rate"`
	// The maturity date for this fixed income security, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
	MaturityDate NullableString `json:"maturity_date"`
	// The issue date for this fixed income security, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
	IssueDate NullableString `json:"issue_date"`
	// The face value that is paid upon maturity of the fixed income security, per unit of security.
	FaceValue NullableFloat64 `json:"face_value"`
	AdditionalProperties map[string]interface{}
}

type _FixedIncome FixedIncome

// NewFixedIncome instantiates a new FixedIncome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedIncome(yieldRate NullableYieldRate, maturityDate NullableString, issueDate NullableString, faceValue NullableFloat64) *FixedIncome {
	this := FixedIncome{}
	this.YieldRate = yieldRate
	this.MaturityDate = maturityDate
	this.IssueDate = issueDate
	this.FaceValue = faceValue
	return &this
}

// NewFixedIncomeWithDefaults instantiates a new FixedIncome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedIncomeWithDefaults() *FixedIncome {
	this := FixedIncome{}
	return &this
}

// GetYieldRate returns the YieldRate field value
// If the value is explicit nil, the zero value for YieldRate will be returned
func (o *FixedIncome) GetYieldRate() YieldRate {
	if o == nil || o.YieldRate.Get() == nil {
		var ret YieldRate
		return ret
	}

	return *o.YieldRate.Get()
}

// GetYieldRateOk returns a tuple with the YieldRate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FixedIncome) GetYieldRateOk() (*YieldRate, bool) {
	if o == nil  {
		return nil, false
	}
	return o.YieldRate.Get(), o.YieldRate.IsSet()
}

// SetYieldRate sets field value
func (o *FixedIncome) SetYieldRate(v YieldRate) {
	o.YieldRate.Set(&v)
}

// GetMaturityDate returns the MaturityDate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FixedIncome) GetMaturityDate() string {
	if o == nil || o.MaturityDate.Get() == nil {
		var ret string
		return ret
	}

	return *o.MaturityDate.Get()
}

// GetMaturityDateOk returns a tuple with the MaturityDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FixedIncome) GetMaturityDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaturityDate.Get(), o.MaturityDate.IsSet()
}

// SetMaturityDate sets field value
func (o *FixedIncome) SetMaturityDate(v string) {
	o.MaturityDate.Set(&v)
}

// GetIssueDate returns the IssueDate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FixedIncome) GetIssueDate() string {
	if o == nil || o.IssueDate.Get() == nil {
		var ret string
		return ret
	}

	return *o.IssueDate.Get()
}

// GetIssueDateOk returns a tuple with the IssueDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FixedIncome) GetIssueDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IssueDate.Get(), o.IssueDate.IsSet()
}

// SetIssueDate sets field value
func (o *FixedIncome) SetIssueDate(v string) {
	o.IssueDate.Set(&v)
}

// GetFaceValue returns the FaceValue field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *FixedIncome) GetFaceValue() float64 {
	if o == nil || o.FaceValue.Get() == nil {
		var ret float64
		return ret
	}

	return *o.FaceValue.Get()
}

// GetFaceValueOk returns a tuple with the FaceValue field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FixedIncome) GetFaceValueOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FaceValue.Get(), o.FaceValue.IsSet()
}

// SetFaceValue sets field value
func (o *FixedIncome) SetFaceValue(v float64) {
	o.FaceValue.Set(&v)
}

func (o FixedIncome) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["yield_rate"] = o.YieldRate.Get()
	}
	if true {
		toSerialize["maturity_date"] = o.MaturityDate.Get()
	}
	if true {
		toSerialize["issue_date"] = o.IssueDate.Get()
	}
	if true {
		toSerialize["face_value"] = o.FaceValue.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *FixedIncome) UnmarshalJSON(bytes []byte) (err error) {
	varFixedIncome := _FixedIncome{}

	if err = json.Unmarshal(bytes, &varFixedIncome); err == nil {
		*o = FixedIncome(varFixedIncome)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "yield_rate")
		delete(additionalProperties, "maturity_date")
		delete(additionalProperties, "issue_date")
		delete(additionalProperties, "face_value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFixedIncome struct {
	value *FixedIncome
	isSet bool
}

func (v NullableFixedIncome) Get() *FixedIncome {
	return v.value
}

func (v *NullableFixedIncome) Set(val *FixedIncome) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedIncome) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedIncome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedIncome(val *FixedIncome) *NullableFixedIncome {
	return &NullableFixedIncome{value: val, isSet: true}
}

func (v NullableFixedIncome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedIncome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


