/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.508.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// RiskReason This object includes a code and description to describe medium risk transactions and above on /accounts/balance/get.
type RiskReason struct {
	// A code that represents the type of risk associated with the proposed transaction.  The codes are from PL01 to PL07 and from BK01 to BK07.
	Code *string `json:"code,omitempty"`
	// A brief description explaining the risk associated with the proposed transaction and some recommended actions.
	Description *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RiskReason RiskReason

// NewRiskReason instantiates a new RiskReason object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskReason() *RiskReason {
	this := RiskReason{}
	return &this
}

// NewRiskReasonWithDefaults instantiates a new RiskReason object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskReasonWithDefaults() *RiskReason {
	this := RiskReason{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *RiskReason) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskReason) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *RiskReason) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *RiskReason) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RiskReason) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskReason) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RiskReason) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RiskReason) SetDescription(v string) {
	o.Description = &v
}

func (o RiskReason) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *RiskReason) UnmarshalJSON(bytes []byte) (err error) {
	varRiskReason := _RiskReason{}

	if err = json.Unmarshal(bytes, &varRiskReason); err == nil {
		*o = RiskReason(varRiskReason)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRiskReason struct {
	value *RiskReason
	isSet bool
}

func (v NullableRiskReason) Get() *RiskReason {
	return v.value
}

func (v *NullableRiskReason) Set(val *RiskReason) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskReason) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskReason(val *RiskReason) *NullableRiskReason {
	return &NullableRiskReason{value: val, isSet: true}
}

func (v NullableRiskReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


