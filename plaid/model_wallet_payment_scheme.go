/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.385.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// WalletPaymentScheme The payment scheme used to execute this transaction. This is present only for transaction types `PAYOUT` and `REFUND`.  `FASTER_PAYMENTS`: The standard payment scheme within the UK.  `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.  `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment to a beneficiary within the SEPA area.
type WalletPaymentScheme string

var _ = fmt.Printf

// List of WalletPaymentScheme
const (
	WALLETPAYMENTSCHEME_NULL WalletPaymentScheme = "null"
	WALLETPAYMENTSCHEME_FASTER_PAYMENTS WalletPaymentScheme = "FASTER_PAYMENTS"
	WALLETPAYMENTSCHEME_SEPA_CREDIT_TRANSFER WalletPaymentScheme = "SEPA_CREDIT_TRANSFER"
	WALLETPAYMENTSCHEME_SEPA_CREDIT_TRANSFER_INSTANT WalletPaymentScheme = "SEPA_CREDIT_TRANSFER_INSTANT"
)

var allowedWalletPaymentSchemeEnumValues = []WalletPaymentScheme{
	"null",
	"FASTER_PAYMENTS",
	"SEPA_CREDIT_TRANSFER",
	"SEPA_CREDIT_TRANSFER_INSTANT",
}

func (v *WalletPaymentScheme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := WalletPaymentScheme(value)


	*v = enumTypeValue
	return nil
}

// NewWalletPaymentSchemeFromValue returns a pointer to a valid WalletPaymentScheme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWalletPaymentSchemeFromValue(v string) (*WalletPaymentScheme, error) {
	ev := WalletPaymentScheme(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WalletPaymentScheme) IsValid() bool {
	for _, existing := range allowedWalletPaymentSchemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WalletPaymentScheme value
func (v WalletPaymentScheme) Ptr() *WalletPaymentScheme {
	return &v
}

type NullableWalletPaymentScheme struct {
	value *WalletPaymentScheme
	isSet bool
}

func (v NullableWalletPaymentScheme) Get() *WalletPaymentScheme {
	return v.value
}

func (v *NullableWalletPaymentScheme) Set(val *WalletPaymentScheme) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletPaymentScheme) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletPaymentScheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletPaymentScheme(val *WalletPaymentScheme) *NullableWalletPaymentScheme {
	return &NullableWalletPaymentScheme{value: val, isSet: true}
}

func (v NullableWalletPaymentScheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletPaymentScheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

