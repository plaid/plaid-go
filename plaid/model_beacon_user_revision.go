/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.503.5
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BeaconUserRevision A Beacon User Revision identifies a Beacon User at some point in its revision history.
type BeaconUserRevision struct {
	// ID of the associated Beacon User.
	Id string `json:"id"`
	// The `version` field begins with 1 and increments with each subsequent revision.
	Version int32 `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _BeaconUserRevision BeaconUserRevision

// NewBeaconUserRevision instantiates a new BeaconUserRevision object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconUserRevision(id string, version int32) *BeaconUserRevision {
	this := BeaconUserRevision{}
	this.Id = id
	this.Version = version
	return &this
}

// NewBeaconUserRevisionWithDefaults instantiates a new BeaconUserRevision object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconUserRevisionWithDefaults() *BeaconUserRevision {
	this := BeaconUserRevision{}
	return &this
}

// GetId returns the Id field value
func (o *BeaconUserRevision) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BeaconUserRevision) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BeaconUserRevision) SetId(v string) {
	o.Id = v
}

// GetVersion returns the Version field value
func (o *BeaconUserRevision) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *BeaconUserRevision) GetVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *BeaconUserRevision) SetVersion(v int32) {
	o.Version = v
}

func (o BeaconUserRevision) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BeaconUserRevision) UnmarshalJSON(bytes []byte) (err error) {
	varBeaconUserRevision := _BeaconUserRevision{}

	if err = json.Unmarshal(bytes, &varBeaconUserRevision); err == nil {
		*o = BeaconUserRevision(varBeaconUserRevision)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBeaconUserRevision struct {
	value *BeaconUserRevision
	isSet bool
}

func (v NullableBeaconUserRevision) Get() *BeaconUserRevision {
	return v.value
}

func (v *NullableBeaconUserRevision) Set(val *BeaconUserRevision) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconUserRevision) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconUserRevision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconUserRevision(val *BeaconUserRevision) *NullableBeaconUserRevision {
	return &NullableBeaconUserRevision{value: val, isSet: true}
}

func (v NullableBeaconUserRevision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconUserRevision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


