/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// UserGetResponse UserGetResponse defines the response schema for `/user/get`.
type UserGetResponse struct {
	// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
	RequestId string `json:"request_id"`
	// A unique `user_id` generated by Plaid for the client-provided `client_user_id`. This field is currently in beta.
	UserId string `json:"user_id"`
	// Client provided user ID.
	ClientUserId NullableString `json:"client_user_id"`
	// Timestamp of user creation.
	CreatedAt time.Time `json:"created_at"`
	// Timestamp of last user update.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Identity NullableClientUserIdentity `json:"identity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserGetResponse UserGetResponse

// NewUserGetResponse instantiates a new UserGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserGetResponse(requestId string, userId string, clientUserId NullableString, createdAt time.Time) *UserGetResponse {
	this := UserGetResponse{}
	this.RequestId = requestId
	this.UserId = userId
	this.ClientUserId = clientUserId
	this.CreatedAt = createdAt
	return &this
}

// NewUserGetResponseWithDefaults instantiates a new UserGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserGetResponseWithDefaults() *UserGetResponse {
	this := UserGetResponse{}
	return &this
}

// GetRequestId returns the RequestId field value
func (o *UserGetResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *UserGetResponse) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *UserGetResponse) SetRequestId(v string) {
	o.RequestId = v
}

// GetUserId returns the UserId field value
func (o *UserGetResponse) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserGetResponse) GetUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserGetResponse) SetUserId(v string) {
	o.UserId = v
}

// GetClientUserId returns the ClientUserId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserGetResponse) GetClientUserId() string {
	if o == nil || o.ClientUserId.Get() == nil {
		var ret string
		return ret
	}

	return *o.ClientUserId.Get()
}

// GetClientUserIdOk returns a tuple with the ClientUserId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserGetResponse) GetClientUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClientUserId.Get(), o.ClientUserId.IsSet()
}

// SetClientUserId sets field value
func (o *UserGetResponse) SetClientUserId(v string) {
	o.ClientUserId.Set(&v)
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserGetResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserGetResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserGetResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UserGetResponse) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserGetResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UserGetResponse) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *UserGetResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetIdentity returns the Identity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserGetResponse) GetIdentity() ClientUserIdentity {
	if o == nil || o.Identity.Get() == nil {
		var ret ClientUserIdentity
		return ret
	}
	return *o.Identity.Get()
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserGetResponse) GetIdentityOk() (*ClientUserIdentity, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Identity.Get(), o.Identity.IsSet()
}

// HasIdentity returns a boolean if a field has been set.
func (o *UserGetResponse) HasIdentity() bool {
	if o != nil && o.Identity.IsSet() {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given NullableClientUserIdentity and assigns it to the Identity field.
func (o *UserGetResponse) SetIdentity(v ClientUserIdentity) {
	o.Identity.Set(&v)
}
// SetIdentityNil sets the value for Identity to be an explicit nil
func (o *UserGetResponse) SetIdentityNil() {
	o.Identity.Set(nil)
}

// UnsetIdentity ensures that no value is present for Identity, not even an explicit nil
func (o *UserGetResponse) UnsetIdentity() {
	o.Identity.Unset()
}

func (o UserGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["request_id"] = o.RequestId
	}
	if true {
		toSerialize["user_id"] = o.UserId
	}
	if true {
		toSerialize["client_user_id"] = o.ClientUserId.Get()
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Identity.IsSet() {
		toSerialize["identity"] = o.Identity.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserGetResponse) UnmarshalJSON(bytes []byte) (err error) {
	varUserGetResponse := _UserGetResponse{}

	if err = json.Unmarshal(bytes, &varUserGetResponse); err == nil {
		*o = UserGetResponse(varUserGetResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "request_id")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "client_user_id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "identity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserGetResponse struct {
	value *UserGetResponse
	isSet bool
}

func (v NullableUserGetResponse) Get() *UserGetResponse {
	return v.value
}

func (v *NullableUserGetResponse) Set(val *UserGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserGetResponse(val *UserGetResponse) *NullableUserGetResponse {
	return &NullableUserGetResponse{value: val, isSet: true}
}

func (v NullableUserGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


