/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.556.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// ConsumerDisputeCategory Type of data being disputed by the consumer
type ConsumerDisputeCategory string

var _ = fmt.Printf

// List of ConsumerDisputeCategory
const (
	CONSUMERDISPUTECATEGORY_TRANSACTION ConsumerDisputeCategory = "TRANSACTION"
	CONSUMERDISPUTECATEGORY_BALANCE ConsumerDisputeCategory = "BALANCE"
	CONSUMERDISPUTECATEGORY_IDENTITY ConsumerDisputeCategory = "IDENTITY"
	CONSUMERDISPUTECATEGORY_OTHER ConsumerDisputeCategory = "OTHER"
)

var allowedConsumerDisputeCategoryEnumValues = []ConsumerDisputeCategory{
	"TRANSACTION",
	"BALANCE",
	"IDENTITY",
	"OTHER",
}

func (v *ConsumerDisputeCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := ConsumerDisputeCategory(value)


	*v = enumTypeValue
	return nil
}

// NewConsumerDisputeCategoryFromValue returns a pointer to a valid ConsumerDisputeCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConsumerDisputeCategoryFromValue(v string) (*ConsumerDisputeCategory, error) {
	ev := ConsumerDisputeCategory(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConsumerDisputeCategory) IsValid() bool {
	for _, existing := range allowedConsumerDisputeCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConsumerDisputeCategory value
func (v ConsumerDisputeCategory) Ptr() *ConsumerDisputeCategory {
	return &v
}

type NullableConsumerDisputeCategory struct {
	value *ConsumerDisputeCategory
	isSet bool
}

func (v NullableConsumerDisputeCategory) Get() *ConsumerDisputeCategory {
	return v.value
}

func (v *NullableConsumerDisputeCategory) Set(val *ConsumerDisputeCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerDisputeCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerDisputeCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerDisputeCategory(val *ConsumerDisputeCategory) *NullableConsumerDisputeCategory {
	return &NullableConsumerDisputeCategory{value: val, isSet: true}
}

func (v NullableConsumerDisputeCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerDisputeCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

