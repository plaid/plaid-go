/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.556.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// MonitoringInsightsItemStatus An object representing the status of the Monitoring Insights Item and potential reasons in case of non-available statuses
type MonitoringInsightsItemStatus struct {
	StatusCode MonitoringItemStatusCode `json:"status_code"`
	// A reason for why a Monitoring Insights Report is not available. This field will only be populated when the `status_code` is not `AVAILABLE`
	Reason NullableString `json:"reason,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MonitoringInsightsItemStatus MonitoringInsightsItemStatus

// NewMonitoringInsightsItemStatus instantiates a new MonitoringInsightsItemStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringInsightsItemStatus(statusCode MonitoringItemStatusCode) *MonitoringInsightsItemStatus {
	this := MonitoringInsightsItemStatus{}
	this.StatusCode = statusCode
	return &this
}

// NewMonitoringInsightsItemStatusWithDefaults instantiates a new MonitoringInsightsItemStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringInsightsItemStatusWithDefaults() *MonitoringInsightsItemStatus {
	this := MonitoringInsightsItemStatus{}
	return &this
}

// GetStatusCode returns the StatusCode field value
func (o *MonitoringInsightsItemStatus) GetStatusCode() MonitoringItemStatusCode {
	if o == nil {
		var ret MonitoringItemStatusCode
		return ret
	}

	return o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value
// and a boolean to check if the value has been set.
func (o *MonitoringInsightsItemStatus) GetStatusCodeOk() (*MonitoringItemStatusCode, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StatusCode, true
}

// SetStatusCode sets field value
func (o *MonitoringInsightsItemStatus) SetStatusCode(v MonitoringItemStatusCode) {
	o.StatusCode = v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MonitoringInsightsItemStatus) GetReason() string {
	if o == nil || o.Reason.Get() == nil {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonitoringInsightsItemStatus) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *MonitoringInsightsItemStatus) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *MonitoringInsightsItemStatus) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *MonitoringInsightsItemStatus) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *MonitoringInsightsItemStatus) UnsetReason() {
	o.Reason.Unset()
}

func (o MonitoringInsightsItemStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status_code"] = o.StatusCode
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MonitoringInsightsItemStatus) UnmarshalJSON(bytes []byte) (err error) {
	varMonitoringInsightsItemStatus := _MonitoringInsightsItemStatus{}

	if err = json.Unmarshal(bytes, &varMonitoringInsightsItemStatus); err == nil {
		*o = MonitoringInsightsItemStatus(varMonitoringInsightsItemStatus)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "status_code")
		delete(additionalProperties, "reason")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMonitoringInsightsItemStatus struct {
	value *MonitoringInsightsItemStatus
	isSet bool
}

func (v NullableMonitoringInsightsItemStatus) Get() *MonitoringInsightsItemStatus {
	return v.value
}

func (v *NullableMonitoringInsightsItemStatus) Set(val *MonitoringInsightsItemStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringInsightsItemStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringInsightsItemStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringInsightsItemStatus(val *MonitoringInsightsItemStatus) *NullableMonitoringInsightsItemStatus {
	return &NullableMonitoringInsightsItemStatus{value: val, isSet: true}
}

func (v NullableMonitoringInsightsItemStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringInsightsItemStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


