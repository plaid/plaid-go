/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.652.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CraVoaReportAccountBalances VOA Report information about an account's balances.
type CraVoaReportAccountBalances struct {
	// The amount of funds available to be withdrawn from the account, as determined by the financial institution.  For `credit`-type accounts, the `available` balance typically equals the `limit` less the `current` balance, less any pending outflows plus any pending inflows.  For `depository`-type accounts, the `available` balance typically equals the `current` balance less any pending outflows plus any pending inflows. For `depository`-type accounts, the `available` balance does not include the overdraft limit.  For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the `available` balance is the total cash available to withdraw as presented by the institution.  Note that not all institutions calculate the `available`  balance. In the event that `available` balance is unavailable, Plaid will return an `available` balance value of `null`.  Available balance may be cached and is not guaranteed to be up-to-date in realtime unless the value was returned by `/accounts/balance/get`.  If `current` is `null` this field is guaranteed not to be `null`.
	Available NullableFloat64 `json:"available"`
	// The total amount of funds in or owed by the account.  For `credit`-type accounts, a positive balance indicates the amount owed; a negative amount indicates the lender owing the account holder.  For `loan`-type accounts, the current balance is the principal remaining on the loan, except in the case of student loan accounts at Sallie Mae (`ins_116944`). For Sallie Mae student loans, the account's balance includes both principal and any outstanding interest.  For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the current balance is the total value of assets as presented by the institution.  Note that balance information may be cached unless the value was returned by `/accounts/balance/get`; if the Item is enabled for Transactions, the balance will be at least as recent as the most recent Transaction update. If you require realtime balance information, use the `available` balance as provided by `/accounts/balance/get`.  When returned by `/accounts/balance/get`, this field may be `null`. When this happens, `available` is guaranteed not to be `null`.
	Current NullableFloat64 `json:"current"`
	// The ISO-4217 currency code of the balance. Always null if `unofficial_currency_code` is non-null.
	IsoCurrencyCode NullableString `json:"iso_currency_code"`
	// The unofficial currency code associated with the balance. Always null if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
	UnofficialCurrencyCode NullableString `json:"unofficial_currency_code"`
	// Calculated data about the historical balances on the account.
	HistoricalBalances []CraVoaReportAccountHistoricalBalance `json:"historical_balances"`
	// The average balance in the account over the last 30 days. Calculated using the derived historical balances.
	AverageBalance30Days NullableFloat64 `json:"average_balance_30_days"`
	// The average balance in the account over the last 60 days. Calculated using the derived historical balances.
	AverageBalance60Days NullableFloat64 `json:"average_balance_60_days"`
	// The number of NSF and overdraft fee transactions in the time range for the report in the given account.
	NsfOverdraftTransactionsCount float32 `json:"nsf_overdraft_transactions_count"`
	AdditionalProperties map[string]interface{}
}

type _CraVoaReportAccountBalances CraVoaReportAccountBalances

// NewCraVoaReportAccountBalances instantiates a new CraVoaReportAccountBalances object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCraVoaReportAccountBalances(available NullableFloat64, current NullableFloat64, isoCurrencyCode NullableString, unofficialCurrencyCode NullableString, historicalBalances []CraVoaReportAccountHistoricalBalance, averageBalance30Days NullableFloat64, averageBalance60Days NullableFloat64, nsfOverdraftTransactionsCount float32) *CraVoaReportAccountBalances {
	this := CraVoaReportAccountBalances{}
	this.Available = available
	this.Current = current
	this.IsoCurrencyCode = isoCurrencyCode
	this.UnofficialCurrencyCode = unofficialCurrencyCode
	this.HistoricalBalances = historicalBalances
	this.AverageBalance30Days = averageBalance30Days
	this.AverageBalance60Days = averageBalance60Days
	this.NsfOverdraftTransactionsCount = nsfOverdraftTransactionsCount
	return &this
}

// NewCraVoaReportAccountBalancesWithDefaults instantiates a new CraVoaReportAccountBalances object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCraVoaReportAccountBalancesWithDefaults() *CraVoaReportAccountBalances {
	this := CraVoaReportAccountBalances{}
	return &this
}

// GetAvailable returns the Available field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *CraVoaReportAccountBalances) GetAvailable() float64 {
	if o == nil || o.Available.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Available.Get()
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraVoaReportAccountBalances) GetAvailableOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Available.Get(), o.Available.IsSet()
}

// SetAvailable sets field value
func (o *CraVoaReportAccountBalances) SetAvailable(v float64) {
	o.Available.Set(&v)
}

// GetCurrent returns the Current field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *CraVoaReportAccountBalances) GetCurrent() float64 {
	if o == nil || o.Current.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Current.Get()
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraVoaReportAccountBalances) GetCurrentOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Current.Get(), o.Current.IsSet()
}

// SetCurrent sets field value
func (o *CraVoaReportAccountBalances) SetCurrent(v float64) {
	o.Current.Set(&v)
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CraVoaReportAccountBalances) GetIsoCurrencyCode() string {
	if o == nil || o.IsoCurrencyCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.IsoCurrencyCode.Get()
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraVoaReportAccountBalances) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsoCurrencyCode.Get(), o.IsoCurrencyCode.IsSet()
}

// SetIsoCurrencyCode sets field value
func (o *CraVoaReportAccountBalances) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode.Set(&v)
}

// GetUnofficialCurrencyCode returns the UnofficialCurrencyCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CraVoaReportAccountBalances) GetUnofficialCurrencyCode() string {
	if o == nil || o.UnofficialCurrencyCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.UnofficialCurrencyCode.Get()
}

// GetUnofficialCurrencyCodeOk returns a tuple with the UnofficialCurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraVoaReportAccountBalances) GetUnofficialCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnofficialCurrencyCode.Get(), o.UnofficialCurrencyCode.IsSet()
}

// SetUnofficialCurrencyCode sets field value
func (o *CraVoaReportAccountBalances) SetUnofficialCurrencyCode(v string) {
	o.UnofficialCurrencyCode.Set(&v)
}

// GetHistoricalBalances returns the HistoricalBalances field value
func (o *CraVoaReportAccountBalances) GetHistoricalBalances() []CraVoaReportAccountHistoricalBalance {
	if o == nil {
		var ret []CraVoaReportAccountHistoricalBalance
		return ret
	}

	return o.HistoricalBalances
}

// GetHistoricalBalancesOk returns a tuple with the HistoricalBalances field value
// and a boolean to check if the value has been set.
func (o *CraVoaReportAccountBalances) GetHistoricalBalancesOk() (*[]CraVoaReportAccountHistoricalBalance, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HistoricalBalances, true
}

// SetHistoricalBalances sets field value
func (o *CraVoaReportAccountBalances) SetHistoricalBalances(v []CraVoaReportAccountHistoricalBalance) {
	o.HistoricalBalances = v
}

// GetAverageBalance30Days returns the AverageBalance30Days field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *CraVoaReportAccountBalances) GetAverageBalance30Days() float64 {
	if o == nil || o.AverageBalance30Days.Get() == nil {
		var ret float64
		return ret
	}

	return *o.AverageBalance30Days.Get()
}

// GetAverageBalance30DaysOk returns a tuple with the AverageBalance30Days field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraVoaReportAccountBalances) GetAverageBalance30DaysOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AverageBalance30Days.Get(), o.AverageBalance30Days.IsSet()
}

// SetAverageBalance30Days sets field value
func (o *CraVoaReportAccountBalances) SetAverageBalance30Days(v float64) {
	o.AverageBalance30Days.Set(&v)
}

// GetAverageBalance60Days returns the AverageBalance60Days field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *CraVoaReportAccountBalances) GetAverageBalance60Days() float64 {
	if o == nil || o.AverageBalance60Days.Get() == nil {
		var ret float64
		return ret
	}

	return *o.AverageBalance60Days.Get()
}

// GetAverageBalance60DaysOk returns a tuple with the AverageBalance60Days field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraVoaReportAccountBalances) GetAverageBalance60DaysOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AverageBalance60Days.Get(), o.AverageBalance60Days.IsSet()
}

// SetAverageBalance60Days sets field value
func (o *CraVoaReportAccountBalances) SetAverageBalance60Days(v float64) {
	o.AverageBalance60Days.Set(&v)
}

// GetNsfOverdraftTransactionsCount returns the NsfOverdraftTransactionsCount field value
func (o *CraVoaReportAccountBalances) GetNsfOverdraftTransactionsCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NsfOverdraftTransactionsCount
}

// GetNsfOverdraftTransactionsCountOk returns a tuple with the NsfOverdraftTransactionsCount field value
// and a boolean to check if the value has been set.
func (o *CraVoaReportAccountBalances) GetNsfOverdraftTransactionsCountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NsfOverdraftTransactionsCount, true
}

// SetNsfOverdraftTransactionsCount sets field value
func (o *CraVoaReportAccountBalances) SetNsfOverdraftTransactionsCount(v float32) {
	o.NsfOverdraftTransactionsCount = v
}

func (o CraVoaReportAccountBalances) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["available"] = o.Available.Get()
	}
	if true {
		toSerialize["current"] = o.Current.Get()
	}
	if true {
		toSerialize["iso_currency_code"] = o.IsoCurrencyCode.Get()
	}
	if true {
		toSerialize["unofficial_currency_code"] = o.UnofficialCurrencyCode.Get()
	}
	if true {
		toSerialize["historical_balances"] = o.HistoricalBalances
	}
	if true {
		toSerialize["average_balance_30_days"] = o.AverageBalance30Days.Get()
	}
	if true {
		toSerialize["average_balance_60_days"] = o.AverageBalance60Days.Get()
	}
	if true {
		toSerialize["nsf_overdraft_transactions_count"] = o.NsfOverdraftTransactionsCount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CraVoaReportAccountBalances) UnmarshalJSON(bytes []byte) (err error) {
	varCraVoaReportAccountBalances := _CraVoaReportAccountBalances{}

	if err = json.Unmarshal(bytes, &varCraVoaReportAccountBalances); err == nil {
		*o = CraVoaReportAccountBalances(varCraVoaReportAccountBalances)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "available")
		delete(additionalProperties, "current")
		delete(additionalProperties, "iso_currency_code")
		delete(additionalProperties, "unofficial_currency_code")
		delete(additionalProperties, "historical_balances")
		delete(additionalProperties, "average_balance_30_days")
		delete(additionalProperties, "average_balance_60_days")
		delete(additionalProperties, "nsf_overdraft_transactions_count")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCraVoaReportAccountBalances struct {
	value *CraVoaReportAccountBalances
	isSet bool
}

func (v NullableCraVoaReportAccountBalances) Get() *CraVoaReportAccountBalances {
	return v.value
}

func (v *NullableCraVoaReportAccountBalances) Set(val *CraVoaReportAccountBalances) {
	v.value = val
	v.isSet = true
}

func (v NullableCraVoaReportAccountBalances) IsSet() bool {
	return v.isSet
}

func (v *NullableCraVoaReportAccountBalances) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraVoaReportAccountBalances(val *CraVoaReportAccountBalances) *NullableCraVoaReportAccountBalances {
	return &NullableCraVoaReportAccountBalances{value: val, isSet: true}
}

func (v NullableCraVoaReportAccountBalances) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraVoaReportAccountBalances) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


