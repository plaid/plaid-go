/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// ConsentEventType A broad categorization of the consent event.
type ConsentEventType string

var _ = fmt.Printf

// List of ConsentEventType
const (
	CONSENTEVENTTYPE_GRANTED ConsentEventType = "CONSENT_GRANTED"
	CONSENTEVENTTYPE_REVOKED ConsentEventType = "CONSENT_REVOKED"
	CONSENTEVENTTYPE_UPDATED ConsentEventType = "CONSENT_UPDATED"
)

var allowedConsentEventTypeEnumValues = []ConsentEventType{
	"CONSENT_GRANTED",
	"CONSENT_REVOKED",
	"CONSENT_UPDATED",
}

func (v *ConsentEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := ConsentEventType(value)


	*v = enumTypeValue
	return nil
}

// NewConsentEventTypeFromValue returns a pointer to a valid ConsentEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConsentEventTypeFromValue(v string) (*ConsentEventType, error) {
	ev := ConsentEventType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConsentEventType) IsValid() bool {
	for _, existing := range allowedConsentEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConsentEventType value
func (v ConsentEventType) Ptr() *ConsentEventType {
	return &v
}

type NullableConsentEventType struct {
	value *ConsentEventType
	isSet bool
}

func (v NullableConsentEventType) Get() *ConsentEventType {
	return v.value
}

func (v *NullableConsentEventType) Set(val *ConsentEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentEventType(val *ConsentEventType) *NullableConsentEventType {
	return &NullableConsentEventType{value: val, isSet: true}
}

func (v NullableConsentEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

