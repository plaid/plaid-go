/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.385.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// CreditACHClass Specifies the use case of the transfer. Required for transfers on an ACH network.  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"ppd\"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment  `\"web\"` - A credit Entry initiated by or on behalf of a holder of a Consumer Account that is intended for a Consumer Account of a Receiver
type CreditACHClass string

var _ = fmt.Printf

// List of CreditACHClass
const (
	CREDITACHCLASS_CCD CreditACHClass = "ccd"
	CREDITACHCLASS_PPD CreditACHClass = "ppd"
	CREDITACHCLASS_WEB CreditACHClass = "web"
)

var allowedCreditACHClassEnumValues = []CreditACHClass{
	"ccd",
	"ppd",
	"web",
}

func (v *CreditACHClass) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := CreditACHClass(value)


	*v = enumTypeValue
	return nil
}

// NewCreditACHClassFromValue returns a pointer to a valid CreditACHClass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCreditACHClassFromValue(v string) (*CreditACHClass, error) {
	ev := CreditACHClass(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CreditACHClass) IsValid() bool {
	for _, existing := range allowedCreditACHClassEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CreditACHClass value
func (v CreditACHClass) Ptr() *CreditACHClass {
	return &v
}

type NullableCreditACHClass struct {
	value *CreditACHClass
	isSet bool
}

func (v NullableCreditACHClass) Get() *CreditACHClass {
	return v.value
}

func (v *NullableCreditACHClass) Set(val *CreditACHClass) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditACHClass) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditACHClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditACHClass(val *CreditACHClass) *NullableCreditACHClass {
	return &NullableCreditACHClass{value: val, isSet: true}
}

func (v NullableCreditACHClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditACHClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

