/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.534.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BeaconAccountRiskEvaluateAccount An account in the `/beacon/account_risk/v1/evaluate` response.
type BeaconAccountRiskEvaluateAccount struct {
	// The account ID.
	AccountId *string `json:"account_id,omitempty"`
	Type *AccountType `json:"type,omitempty"`
	Subtype NullableAccountSubtype `json:"subtype,omitempty"`
	Attributes *BeaconAccountRiskEvaluateAccountAttributes `json:"attributes,omitempty"`
}

// NewBeaconAccountRiskEvaluateAccount instantiates a new BeaconAccountRiskEvaluateAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconAccountRiskEvaluateAccount() *BeaconAccountRiskEvaluateAccount {
	this := BeaconAccountRiskEvaluateAccount{}
	return &this
}

// NewBeaconAccountRiskEvaluateAccountWithDefaults instantiates a new BeaconAccountRiskEvaluateAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconAccountRiskEvaluateAccountWithDefaults() *BeaconAccountRiskEvaluateAccount {
	this := BeaconAccountRiskEvaluateAccount{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *BeaconAccountRiskEvaluateAccount) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeaconAccountRiskEvaluateAccount) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *BeaconAccountRiskEvaluateAccount) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *BeaconAccountRiskEvaluateAccount) SetAccountId(v string) {
	o.AccountId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *BeaconAccountRiskEvaluateAccount) GetType() AccountType {
	if o == nil || o.Type == nil {
		var ret AccountType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeaconAccountRiskEvaluateAccount) GetTypeOk() (*AccountType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *BeaconAccountRiskEvaluateAccount) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given AccountType and assigns it to the Type field.
func (o *BeaconAccountRiskEvaluateAccount) SetType(v AccountType) {
	o.Type = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BeaconAccountRiskEvaluateAccount) GetSubtype() AccountSubtype {
	if o == nil || o.Subtype.Get() == nil {
		var ret AccountSubtype
		return ret
	}
	return *o.Subtype.Get()
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BeaconAccountRiskEvaluateAccount) GetSubtypeOk() (*AccountSubtype, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subtype.Get(), o.Subtype.IsSet()
}

// HasSubtype returns a boolean if a field has been set.
func (o *BeaconAccountRiskEvaluateAccount) HasSubtype() bool {
	if o != nil && o.Subtype.IsSet() {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given NullableAccountSubtype and assigns it to the Subtype field.
func (o *BeaconAccountRiskEvaluateAccount) SetSubtype(v AccountSubtype) {
	o.Subtype.Set(&v)
}
// SetSubtypeNil sets the value for Subtype to be an explicit nil
func (o *BeaconAccountRiskEvaluateAccount) SetSubtypeNil() {
	o.Subtype.Set(nil)
}

// UnsetSubtype ensures that no value is present for Subtype, not even an explicit nil
func (o *BeaconAccountRiskEvaluateAccount) UnsetSubtype() {
	o.Subtype.Unset()
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *BeaconAccountRiskEvaluateAccount) GetAttributes() BeaconAccountRiskEvaluateAccountAttributes {
	if o == nil || o.Attributes == nil {
		var ret BeaconAccountRiskEvaluateAccountAttributes
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeaconAccountRiskEvaluateAccount) GetAttributesOk() (*BeaconAccountRiskEvaluateAccountAttributes, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *BeaconAccountRiskEvaluateAccount) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given BeaconAccountRiskEvaluateAccountAttributes and assigns it to the Attributes field.
func (o *BeaconAccountRiskEvaluateAccount) SetAttributes(v BeaconAccountRiskEvaluateAccountAttributes) {
	o.Attributes = &v
}

func (o BeaconAccountRiskEvaluateAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Subtype.IsSet() {
		toSerialize["subtype"] = o.Subtype.Get()
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	return json.Marshal(toSerialize)
}

type NullableBeaconAccountRiskEvaluateAccount struct {
	value *BeaconAccountRiskEvaluateAccount
	isSet bool
}

func (v NullableBeaconAccountRiskEvaluateAccount) Get() *BeaconAccountRiskEvaluateAccount {
	return v.value
}

func (v *NullableBeaconAccountRiskEvaluateAccount) Set(val *BeaconAccountRiskEvaluateAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconAccountRiskEvaluateAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconAccountRiskEvaluateAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconAccountRiskEvaluateAccount(val *BeaconAccountRiskEvaluateAccount) *NullableBeaconAccountRiskEvaluateAccount {
	return &NullableBeaconAccountRiskEvaluateAccount{value: val, isSet: true}
}

func (v NullableBeaconAccountRiskEvaluateAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconAccountRiskEvaluateAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


