/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.343.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// Role ADocumentation not found in the MISMO model viewer and not provided by Freddie Mac.
type Role struct {
	ROLE_DETAIL RoleDetail `json:"ROLE_DETAIL"`
	AdditionalProperties map[string]interface{}
}

type _Role Role

// NewRole instantiates a new Role object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRole(rOLEDETAIL RoleDetail) *Role {
	this := Role{}
	this.ROLE_DETAIL = rOLEDETAIL
	return &this
}

// NewRoleWithDefaults instantiates a new Role object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleWithDefaults() *Role {
	this := Role{}
	return &this
}

// GetROLE_DETAIL returns the ROLE_DETAIL field value
func (o *Role) GetROLE_DETAIL() RoleDetail {
	if o == nil {
		var ret RoleDetail
		return ret
	}

	return o.ROLE_DETAIL
}

// GetROLE_DETAILOk returns a tuple with the ROLE_DETAIL field value
// and a boolean to check if the value has been set.
func (o *Role) GetROLE_DETAILOk() (*RoleDetail, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ROLE_DETAIL, true
}

// SetROLE_DETAIL sets field value
func (o *Role) SetROLE_DETAIL(v RoleDetail) {
	o.ROLE_DETAIL = v
}

func (o Role) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ROLE_DETAIL"] = o.ROLE_DETAIL
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Role) UnmarshalJSON(bytes []byte) (err error) {
	varRole := _Role{}

	if err = json.Unmarshal(bytes, &varRole); err == nil {
		*o = Role(varRole)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ROLE_DETAIL")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRole struct {
	value *Role
	isSet bool
}

func (v NullableRole) Get() *Role {
	return v.value
}

func (v *NullableRole) Set(val *Role) {
	v.value = val
	v.isSet = true
}

func (v NullableRole) IsSet() bool {
	return v.isSet
}

func (v *NullableRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRole(val *Role) *NullableRole {
	return &NullableRole{value: val, isSet: true}
}

func (v NullableRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


