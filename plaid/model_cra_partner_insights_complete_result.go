/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.496.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// CraPartnerInsightsCompleteResult The result of the partner insights report generation  `SUCCESS`: All insights in the partner insights report were successfully generated and can be retrieved via `/cra/partner_insights/get`.  `FAILURE`: The partner insights report failed to be generated.  `PARTIAL_SUCCESS`: Some, but not all, insights in the partner insights report were successfully generated and can be retrieved via `/cra/partner_insights/get`.
type CraPartnerInsightsCompleteResult string

var _ = fmt.Printf

// List of CraPartnerInsightsCompleteResult
const (
	CRAPARTNERINSIGHTSCOMPLETERESULT_SUCCESS CraPartnerInsightsCompleteResult = "SUCCESS"
	CRAPARTNERINSIGHTSCOMPLETERESULT_FAILURE CraPartnerInsightsCompleteResult = "FAILURE"
	CRAPARTNERINSIGHTSCOMPLETERESULT_PARTIAL_SUCCESS CraPartnerInsightsCompleteResult = "PARTIAL_SUCCESS"
)

var allowedCraPartnerInsightsCompleteResultEnumValues = []CraPartnerInsightsCompleteResult{
	"SUCCESS",
	"FAILURE",
	"PARTIAL_SUCCESS",
}

func (v *CraPartnerInsightsCompleteResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := CraPartnerInsightsCompleteResult(value)


	*v = enumTypeValue
	return nil
}

// NewCraPartnerInsightsCompleteResultFromValue returns a pointer to a valid CraPartnerInsightsCompleteResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCraPartnerInsightsCompleteResultFromValue(v string) (*CraPartnerInsightsCompleteResult, error) {
	ev := CraPartnerInsightsCompleteResult(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CraPartnerInsightsCompleteResult) IsValid() bool {
	for _, existing := range allowedCraPartnerInsightsCompleteResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CraPartnerInsightsCompleteResult value
func (v CraPartnerInsightsCompleteResult) Ptr() *CraPartnerInsightsCompleteResult {
	return &v
}

type NullableCraPartnerInsightsCompleteResult struct {
	value *CraPartnerInsightsCompleteResult
	isSet bool
}

func (v NullableCraPartnerInsightsCompleteResult) Get() *CraPartnerInsightsCompleteResult {
	return v.value
}

func (v *NullableCraPartnerInsightsCompleteResult) Set(val *CraPartnerInsightsCompleteResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCraPartnerInsightsCompleteResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCraPartnerInsightsCompleteResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraPartnerInsightsCompleteResult(val *CraPartnerInsightsCompleteResult) *NullableCraPartnerInsightsCompleteResult {
	return &NullableCraPartnerInsightsCompleteResult{value: val, isSet: true}
}

func (v NullableCraPartnerInsightsCompleteResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraPartnerInsightsCompleteResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

