/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// TransferRefund Represents a refund within the Transfers API.
type TransferRefund struct {
	// Plaid’s unique identifier for a refund.
	Id string `json:"id"`
	// The ID of the transfer to refund.
	TransferId string `json:"transfer_id"`
	// The amount of the refund (decimal string with two digits of precision e.g. \"10.00\").
	Amount string `json:"amount"`
	Status TransferRefundStatus `json:"status"`
	FailureReason NullableTransferRefundFailure `json:"failure_reason"`
	// Plaid’s unique identifier for a Plaid Ledger Balance.
	LedgerId NullableString `json:"ledger_id,omitempty"`
	// The datetime when this refund was created. This will be of the form `2006-01-02T15:04:05Z`
	Created time.Time `json:"created"`
	// The trace identifier for the transfer based on its network. This will only be set after the transfer has posted.  For `ach` or `same-day-ach` transfers, this is the ACH trace number. For `rtp` transfers, this is the Transaction Identification number. For `wire` transfers, this is the IMAD (Input Message Accountability Data) number.
	NetworkTraceId NullableString `json:"network_trace_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TransferRefund TransferRefund

// NewTransferRefund instantiates a new TransferRefund object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferRefund(id string, transferId string, amount string, status TransferRefundStatus, failureReason NullableTransferRefundFailure, created time.Time) *TransferRefund {
	this := TransferRefund{}
	this.Id = id
	this.TransferId = transferId
	this.Amount = amount
	this.Status = status
	this.FailureReason = failureReason
	this.Created = created
	return &this
}

// NewTransferRefundWithDefaults instantiates a new TransferRefund object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferRefundWithDefaults() *TransferRefund {
	this := TransferRefund{}
	return &this
}

// GetId returns the Id field value
func (o *TransferRefund) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TransferRefund) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TransferRefund) SetId(v string) {
	o.Id = v
}

// GetTransferId returns the TransferId field value
func (o *TransferRefund) GetTransferId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransferId
}

// GetTransferIdOk returns a tuple with the TransferId field value
// and a boolean to check if the value has been set.
func (o *TransferRefund) GetTransferIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransferId, true
}

// SetTransferId sets field value
func (o *TransferRefund) SetTransferId(v string) {
	o.TransferId = v
}

// GetAmount returns the Amount field value
func (o *TransferRefund) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransferRefund) GetAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransferRefund) SetAmount(v string) {
	o.Amount = v
}

// GetStatus returns the Status field value
func (o *TransferRefund) GetStatus() TransferRefundStatus {
	if o == nil {
		var ret TransferRefundStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TransferRefund) GetStatusOk() (*TransferRefundStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TransferRefund) SetStatus(v TransferRefundStatus) {
	o.Status = v
}

// GetFailureReason returns the FailureReason field value
// If the value is explicit nil, the zero value for TransferRefundFailure will be returned
func (o *TransferRefund) GetFailureReason() TransferRefundFailure {
	if o == nil || o.FailureReason.Get() == nil {
		var ret TransferRefundFailure
		return ret
	}

	return *o.FailureReason.Get()
}

// GetFailureReasonOk returns a tuple with the FailureReason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransferRefund) GetFailureReasonOk() (*TransferRefundFailure, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailureReason.Get(), o.FailureReason.IsSet()
}

// SetFailureReason sets field value
func (o *TransferRefund) SetFailureReason(v TransferRefundFailure) {
	o.FailureReason.Set(&v)
}

// GetLedgerId returns the LedgerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransferRefund) GetLedgerId() string {
	if o == nil || o.LedgerId.Get() == nil {
		var ret string
		return ret
	}
	return *o.LedgerId.Get()
}

// GetLedgerIdOk returns a tuple with the LedgerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransferRefund) GetLedgerIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LedgerId.Get(), o.LedgerId.IsSet()
}

// HasLedgerId returns a boolean if a field has been set.
func (o *TransferRefund) HasLedgerId() bool {
	if o != nil && o.LedgerId.IsSet() {
		return true
	}

	return false
}

// SetLedgerId gets a reference to the given NullableString and assigns it to the LedgerId field.
func (o *TransferRefund) SetLedgerId(v string) {
	o.LedgerId.Set(&v)
}
// SetLedgerIdNil sets the value for LedgerId to be an explicit nil
func (o *TransferRefund) SetLedgerIdNil() {
	o.LedgerId.Set(nil)
}

// UnsetLedgerId ensures that no value is present for LedgerId, not even an explicit nil
func (o *TransferRefund) UnsetLedgerId() {
	o.LedgerId.Unset()
}

// GetCreated returns the Created field value
func (o *TransferRefund) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *TransferRefund) GetCreatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *TransferRefund) SetCreated(v time.Time) {
	o.Created = v
}

// GetNetworkTraceId returns the NetworkTraceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransferRefund) GetNetworkTraceId() string {
	if o == nil || o.NetworkTraceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetworkTraceId.Get()
}

// GetNetworkTraceIdOk returns a tuple with the NetworkTraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransferRefund) GetNetworkTraceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkTraceId.Get(), o.NetworkTraceId.IsSet()
}

// HasNetworkTraceId returns a boolean if a field has been set.
func (o *TransferRefund) HasNetworkTraceId() bool {
	if o != nil && o.NetworkTraceId.IsSet() {
		return true
	}

	return false
}

// SetNetworkTraceId gets a reference to the given NullableString and assigns it to the NetworkTraceId field.
func (o *TransferRefund) SetNetworkTraceId(v string) {
	o.NetworkTraceId.Set(&v)
}
// SetNetworkTraceIdNil sets the value for NetworkTraceId to be an explicit nil
func (o *TransferRefund) SetNetworkTraceIdNil() {
	o.NetworkTraceId.Set(nil)
}

// UnsetNetworkTraceId ensures that no value is present for NetworkTraceId, not even an explicit nil
func (o *TransferRefund) UnsetNetworkTraceId() {
	o.NetworkTraceId.Unset()
}

func (o TransferRefund) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["transfer_id"] = o.TransferId
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["failure_reason"] = o.FailureReason.Get()
	}
	if o.LedgerId.IsSet() {
		toSerialize["ledger_id"] = o.LedgerId.Get()
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if o.NetworkTraceId.IsSet() {
		toSerialize["network_trace_id"] = o.NetworkTraceId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TransferRefund) UnmarshalJSON(bytes []byte) (err error) {
	varTransferRefund := _TransferRefund{}

	if err = json.Unmarshal(bytes, &varTransferRefund); err == nil {
		*o = TransferRefund(varTransferRefund)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "transfer_id")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "status")
		delete(additionalProperties, "failure_reason")
		delete(additionalProperties, "ledger_id")
		delete(additionalProperties, "created")
		delete(additionalProperties, "network_trace_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransferRefund struct {
	value *TransferRefund
	isSet bool
}

func (v NullableTransferRefund) Get() *TransferRefund {
	return v.value
}

func (v *NullableTransferRefund) Set(val *TransferRefund) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferRefund) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferRefund) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferRefund(val *TransferRefund) *NullableTransferRefund {
	return &NullableTransferRefund{value: val, isSet: true}
}

func (v NullableTransferRefund) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferRefund) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


