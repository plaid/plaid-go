/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.565.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// CraCheckReportProduct A product supported by Plaid Check.
type CraCheckReportProduct string

var _ = fmt.Printf

// List of CraCheckReportProduct
const (
	CRACHECKREPORTPRODUCT_BASE_REPORT CraCheckReportProduct = "cra_base_report"
	CRACHECKREPORTPRODUCT_INCOME_INSIGHTS CraCheckReportProduct = "cra_income_insights"
	CRACHECKREPORTPRODUCT_PARTNER_INSIGHTS CraCheckReportProduct = "cra_partner_insights"
	CRACHECKREPORTPRODUCT_NETWORK_INSIGHTS CraCheckReportProduct = "cra_network_insights"
)

var allowedCraCheckReportProductEnumValues = []CraCheckReportProduct{
	"cra_base_report",
	"cra_income_insights",
	"cra_partner_insights",
	"cra_network_insights",
}

func (v *CraCheckReportProduct) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := CraCheckReportProduct(value)


	*v = enumTypeValue
	return nil
}

// NewCraCheckReportProductFromValue returns a pointer to a valid CraCheckReportProduct
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCraCheckReportProductFromValue(v string) (*CraCheckReportProduct, error) {
	ev := CraCheckReportProduct(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CraCheckReportProduct) IsValid() bool {
	for _, existing := range allowedCraCheckReportProductEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CraCheckReportProduct value
func (v CraCheckReportProduct) Ptr() *CraCheckReportProduct {
	return &v
}

type NullableCraCheckReportProduct struct {
	value *CraCheckReportProduct
	isSet bool
}

func (v NullableCraCheckReportProduct) Get() *CraCheckReportProduct {
	return v.value
}

func (v *NullableCraCheckReportProduct) Set(val *CraCheckReportProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableCraCheckReportProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableCraCheckReportProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraCheckReportProduct(val *CraCheckReportProduct) *NullableCraCheckReportProduct {
	return &NullableCraCheckReportProduct{value: val, isSet: true}
}

func (v NullableCraCheckReportProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraCheckReportProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

