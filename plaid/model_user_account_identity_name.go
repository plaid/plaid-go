/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// UserAccountIdentityName The user's first name and last name.
type UserAccountIdentityName struct {
	FirstName *string `json:"first_name,omitempty"`
	LastName *string `json:"last_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserAccountIdentityName UserAccountIdentityName

// NewUserAccountIdentityName instantiates a new UserAccountIdentityName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAccountIdentityName() *UserAccountIdentityName {
	this := UserAccountIdentityName{}
	return &this
}

// NewUserAccountIdentityNameWithDefaults instantiates a new UserAccountIdentityName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAccountIdentityNameWithDefaults() *UserAccountIdentityName {
	this := UserAccountIdentityName{}
	return &this
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *UserAccountIdentityName) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountIdentityName) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *UserAccountIdentityName) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *UserAccountIdentityName) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *UserAccountIdentityName) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountIdentityName) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *UserAccountIdentityName) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *UserAccountIdentityName) SetLastName(v string) {
	o.LastName = &v
}

func (o UserAccountIdentityName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FirstName != nil {
		toSerialize["first_name"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["last_name"] = o.LastName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserAccountIdentityName) UnmarshalJSON(bytes []byte) (err error) {
	varUserAccountIdentityName := _UserAccountIdentityName{}

	if err = json.Unmarshal(bytes, &varUserAccountIdentityName); err == nil {
		*o = UserAccountIdentityName(varUserAccountIdentityName)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "first_name")
		delete(additionalProperties, "last_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserAccountIdentityName struct {
	value *UserAccountIdentityName
	isSet bool
}

func (v NullableUserAccountIdentityName) Get() *UserAccountIdentityName {
	return v.value
}

func (v *NullableUserAccountIdentityName) Set(val *UserAccountIdentityName) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccountIdentityName) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccountIdentityName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccountIdentityName(val *UserAccountIdentityName) *NullableUserAccountIdentityName {
	return &NullableUserAccountIdentityName{value: val, isSet: true}
}

func (v NullableUserAccountIdentityName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccountIdentityName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


