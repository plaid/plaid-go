/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.652.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// TCHNotificationResponse Provides the fields of a notification response
type TCHNotificationResponse struct {
	// Unique message identifier (GUID v4 format) of this command. It is used for the tracking purpose. Each request and its response have same value.
	MessageId string `json:"messageId"`
	// Message identifier assigned for the entire conversation (GUID v4 format). Typically, it is generated by the initiator of the flow. The response has the same value with its request.
	ConversationId string `json:"conversationId"`
	// The five digit status code.
	StatusCode *string `json:"statusCode,omitempty"`
	// Human readable comments about the status.
	StatusMessage *string `json:"statusMessage,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TCHNotificationResponse TCHNotificationResponse

// NewTCHNotificationResponse instantiates a new TCHNotificationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTCHNotificationResponse(messageId string, conversationId string) *TCHNotificationResponse {
	this := TCHNotificationResponse{}
	this.MessageId = messageId
	this.ConversationId = conversationId
	return &this
}

// NewTCHNotificationResponseWithDefaults instantiates a new TCHNotificationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTCHNotificationResponseWithDefaults() *TCHNotificationResponse {
	this := TCHNotificationResponse{}
	return &this
}

// GetMessageId returns the MessageId field value
func (o *TCHNotificationResponse) GetMessageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value
// and a boolean to check if the value has been set.
func (o *TCHNotificationResponse) GetMessageIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MessageId, true
}

// SetMessageId sets field value
func (o *TCHNotificationResponse) SetMessageId(v string) {
	o.MessageId = v
}

// GetConversationId returns the ConversationId field value
func (o *TCHNotificationResponse) GetConversationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConversationId
}

// GetConversationIdOk returns a tuple with the ConversationId field value
// and a boolean to check if the value has been set.
func (o *TCHNotificationResponse) GetConversationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConversationId, true
}

// SetConversationId sets field value
func (o *TCHNotificationResponse) SetConversationId(v string) {
	o.ConversationId = v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *TCHNotificationResponse) GetStatusCode() string {
	if o == nil || o.StatusCode == nil {
		var ret string
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TCHNotificationResponse) GetStatusCodeOk() (*string, bool) {
	if o == nil || o.StatusCode == nil {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *TCHNotificationResponse) HasStatusCode() bool {
	if o != nil && o.StatusCode != nil {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given string and assigns it to the StatusCode field.
func (o *TCHNotificationResponse) SetStatusCode(v string) {
	o.StatusCode = &v
}

// GetStatusMessage returns the StatusMessage field value if set, zero value otherwise.
func (o *TCHNotificationResponse) GetStatusMessage() string {
	if o == nil || o.StatusMessage == nil {
		var ret string
		return ret
	}
	return *o.StatusMessage
}

// GetStatusMessageOk returns a tuple with the StatusMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TCHNotificationResponse) GetStatusMessageOk() (*string, bool) {
	if o == nil || o.StatusMessage == nil {
		return nil, false
	}
	return o.StatusMessage, true
}

// HasStatusMessage returns a boolean if a field has been set.
func (o *TCHNotificationResponse) HasStatusMessage() bool {
	if o != nil && o.StatusMessage != nil {
		return true
	}

	return false
}

// SetStatusMessage gets a reference to the given string and assigns it to the StatusMessage field.
func (o *TCHNotificationResponse) SetStatusMessage(v string) {
	o.StatusMessage = &v
}

func (o TCHNotificationResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["messageId"] = o.MessageId
	}
	if true {
		toSerialize["conversationId"] = o.ConversationId
	}
	if o.StatusCode != nil {
		toSerialize["statusCode"] = o.StatusCode
	}
	if o.StatusMessage != nil {
		toSerialize["statusMessage"] = o.StatusMessage
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TCHNotificationResponse) UnmarshalJSON(bytes []byte) (err error) {
	varTCHNotificationResponse := _TCHNotificationResponse{}

	if err = json.Unmarshal(bytes, &varTCHNotificationResponse); err == nil {
		*o = TCHNotificationResponse(varTCHNotificationResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "messageId")
		delete(additionalProperties, "conversationId")
		delete(additionalProperties, "statusCode")
		delete(additionalProperties, "statusMessage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTCHNotificationResponse struct {
	value *TCHNotificationResponse
	isSet bool
}

func (v NullableTCHNotificationResponse) Get() *TCHNotificationResponse {
	return v.value
}

func (v *NullableTCHNotificationResponse) Set(val *TCHNotificationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTCHNotificationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTCHNotificationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTCHNotificationResponse(val *TCHNotificationResponse) *NullableTCHNotificationResponse {
	return &NullableTCHNotificationResponse{value: val, isSet: true}
}

func (v NullableTCHNotificationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTCHNotificationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


