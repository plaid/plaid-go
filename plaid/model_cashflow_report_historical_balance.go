/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.658.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CashflowReportHistoricalBalance An object representing a balance held by an account in the past
type CashflowReportHistoricalBalance struct {
	// The date of the calculated historical balance, in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD)
	Date string `json:"date"`
	// The total amount of funds in the account, calculated from the `current` balance in the `balance` object by subtracting inflows and adding back outflows according to the posted date of each transaction.  If the account has any pending transactions, historical balance amounts on or after the date of the earliest pending transaction may differ if retrieved in subsequent Asset Reports as a result of those pending transactions posting.
	Amount float64 `json:"amount"`
	// The ISO-4217 currency code of the balance. Always `null` if `unofficial_currency_code` is non-`null`.
	IsoCurrencyCode NullableString `json:"iso_currency_code"`
	// The unofficial currency code associated with the balance. Always `null` if `iso_currency_code` is non-`null`.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
	UnofficialCurrencyCode NullableString `json:"unofficial_currency_code"`
	AdditionalProperties map[string]interface{}
}

type _CashflowReportHistoricalBalance CashflowReportHistoricalBalance

// NewCashflowReportHistoricalBalance instantiates a new CashflowReportHistoricalBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCashflowReportHistoricalBalance(date string, amount float64, isoCurrencyCode NullableString, unofficialCurrencyCode NullableString) *CashflowReportHistoricalBalance {
	this := CashflowReportHistoricalBalance{}
	this.Date = date
	this.Amount = amount
	this.IsoCurrencyCode = isoCurrencyCode
	this.UnofficialCurrencyCode = unofficialCurrencyCode
	return &this
}

// NewCashflowReportHistoricalBalanceWithDefaults instantiates a new CashflowReportHistoricalBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCashflowReportHistoricalBalanceWithDefaults() *CashflowReportHistoricalBalance {
	this := CashflowReportHistoricalBalance{}
	return &this
}

// GetDate returns the Date field value
func (o *CashflowReportHistoricalBalance) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CashflowReportHistoricalBalance) GetDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CashflowReportHistoricalBalance) SetDate(v string) {
	o.Date = v
}

// GetAmount returns the Amount field value
func (o *CashflowReportHistoricalBalance) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CashflowReportHistoricalBalance) GetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CashflowReportHistoricalBalance) SetAmount(v float64) {
	o.Amount = v
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CashflowReportHistoricalBalance) GetIsoCurrencyCode() string {
	if o == nil || o.IsoCurrencyCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.IsoCurrencyCode.Get()
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportHistoricalBalance) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsoCurrencyCode.Get(), o.IsoCurrencyCode.IsSet()
}

// SetIsoCurrencyCode sets field value
func (o *CashflowReportHistoricalBalance) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode.Set(&v)
}

// GetUnofficialCurrencyCode returns the UnofficialCurrencyCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CashflowReportHistoricalBalance) GetUnofficialCurrencyCode() string {
	if o == nil || o.UnofficialCurrencyCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.UnofficialCurrencyCode.Get()
}

// GetUnofficialCurrencyCodeOk returns a tuple with the UnofficialCurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CashflowReportHistoricalBalance) GetUnofficialCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnofficialCurrencyCode.Get(), o.UnofficialCurrencyCode.IsSet()
}

// SetUnofficialCurrencyCode sets field value
func (o *CashflowReportHistoricalBalance) SetUnofficialCurrencyCode(v string) {
	o.UnofficialCurrencyCode.Set(&v)
}

func (o CashflowReportHistoricalBalance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["iso_currency_code"] = o.IsoCurrencyCode.Get()
	}
	if true {
		toSerialize["unofficial_currency_code"] = o.UnofficialCurrencyCode.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CashflowReportHistoricalBalance) UnmarshalJSON(bytes []byte) (err error) {
	varCashflowReportHistoricalBalance := _CashflowReportHistoricalBalance{}

	if err = json.Unmarshal(bytes, &varCashflowReportHistoricalBalance); err == nil {
		*o = CashflowReportHistoricalBalance(varCashflowReportHistoricalBalance)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "date")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "iso_currency_code")
		delete(additionalProperties, "unofficial_currency_code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCashflowReportHistoricalBalance struct {
	value *CashflowReportHistoricalBalance
	isSet bool
}

func (v NullableCashflowReportHistoricalBalance) Get() *CashflowReportHistoricalBalance {
	return v.value
}

func (v *NullableCashflowReportHistoricalBalance) Set(val *CashflowReportHistoricalBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableCashflowReportHistoricalBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableCashflowReportHistoricalBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCashflowReportHistoricalBalance(val *CashflowReportHistoricalBalance) *NullableCashflowReportHistoricalBalance {
	return &NullableCashflowReportHistoricalBalance{value: val, isSet: true}
}

func (v NullableCashflowReportHistoricalBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCashflowReportHistoricalBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


