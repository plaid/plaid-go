/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.517.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// TransferLedgerSweepSimulateEventType The asynchronous event to be simulated. May be: `posted`, `settled`, `failed`, or `returned`.  An error will be returned if the event type is incompatible with the current ledger sweep status. Compatible status --> event type transitions include:  `sweep.pending` --> `sweep.posted`  `sweep.pending` --> `sweep.failed`  `sweep.posted` --> `sweep.settled`  `sweep.posted` --> `sweep.returned`  `sweep.settled` --> `sweep.returned` 
type TransferLedgerSweepSimulateEventType string

var _ = fmt.Printf

// List of TransferLedgerSweepSimulateEventType
const (
	TRANSFERLEDGERSWEEPSIMULATEEVENTTYPE_POSTED TransferLedgerSweepSimulateEventType = "sweep.posted"
	TRANSFERLEDGERSWEEPSIMULATEEVENTTYPE_SETTLED TransferLedgerSweepSimulateEventType = "sweep.settled"
	TRANSFERLEDGERSWEEPSIMULATEEVENTTYPE_RETURNED TransferLedgerSweepSimulateEventType = "sweep.returned"
	TRANSFERLEDGERSWEEPSIMULATEEVENTTYPE_FAILED TransferLedgerSweepSimulateEventType = "sweep.failed"
)

var allowedTransferLedgerSweepSimulateEventTypeEnumValues = []TransferLedgerSweepSimulateEventType{
	"sweep.posted",
	"sweep.settled",
	"sweep.returned",
	"sweep.failed",
}

func (v *TransferLedgerSweepSimulateEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := TransferLedgerSweepSimulateEventType(value)


	*v = enumTypeValue
	return nil
}

// NewTransferLedgerSweepSimulateEventTypeFromValue returns a pointer to a valid TransferLedgerSweepSimulateEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferLedgerSweepSimulateEventTypeFromValue(v string) (*TransferLedgerSweepSimulateEventType, error) {
	ev := TransferLedgerSweepSimulateEventType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferLedgerSweepSimulateEventType) IsValid() bool {
	for _, existing := range allowedTransferLedgerSweepSimulateEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferLedgerSweepSimulateEventType value
func (v TransferLedgerSweepSimulateEventType) Ptr() *TransferLedgerSweepSimulateEventType {
	return &v
}

type NullableTransferLedgerSweepSimulateEventType struct {
	value *TransferLedgerSweepSimulateEventType
	isSet bool
}

func (v NullableTransferLedgerSweepSimulateEventType) Get() *TransferLedgerSweepSimulateEventType {
	return v.value
}

func (v *NullableTransferLedgerSweepSimulateEventType) Set(val *TransferLedgerSweepSimulateEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferLedgerSweepSimulateEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferLedgerSweepSimulateEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferLedgerSweepSimulateEventType(val *TransferLedgerSweepSimulateEventType) *NullableTransferLedgerSweepSimulateEventType {
	return &NullableTransferLedgerSweepSimulateEventType{value: val, isSet: true}
}

func (v NullableTransferLedgerSweepSimulateEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferLedgerSweepSimulateEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

