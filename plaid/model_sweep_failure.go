/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.627.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// SweepFailure The failure reason if the status for a sweep is `\"failed\"` or `\"returned\"`. Null value otherwise.
type SweepFailure struct {
	// The failure code, e.g. `R01`.  A failure code will be provided if and only if the sweep status is `returned`. See [ACH return codes](https://plaid.com/docs/errors/transfer/#ach-return-codes) for a full listing of ACH return codes and [RTP/RfP error codes](https://plaid.com/docs/errors/transfer/#rtprfp-error-codes) for RTP error codes.
	FailureCode NullableString `json:"failure_code,omitempty"`
	// A human-readable description of the reason for the failure or reversal.
	Description NullableString `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SweepFailure SweepFailure

// NewSweepFailure instantiates a new SweepFailure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSweepFailure() *SweepFailure {
	this := SweepFailure{}
	return &this
}

// NewSweepFailureWithDefaults instantiates a new SweepFailure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSweepFailureWithDefaults() *SweepFailure {
	this := SweepFailure{}
	return &this
}

// GetFailureCode returns the FailureCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SweepFailure) GetFailureCode() string {
	if o == nil || o.FailureCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.FailureCode.Get()
}

// GetFailureCodeOk returns a tuple with the FailureCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SweepFailure) GetFailureCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailureCode.Get(), o.FailureCode.IsSet()
}

// HasFailureCode returns a boolean if a field has been set.
func (o *SweepFailure) HasFailureCode() bool {
	if o != nil && o.FailureCode.IsSet() {
		return true
	}

	return false
}

// SetFailureCode gets a reference to the given NullableString and assigns it to the FailureCode field.
func (o *SweepFailure) SetFailureCode(v string) {
	o.FailureCode.Set(&v)
}
// SetFailureCodeNil sets the value for FailureCode to be an explicit nil
func (o *SweepFailure) SetFailureCodeNil() {
	o.FailureCode.Set(nil)
}

// UnsetFailureCode ensures that no value is present for FailureCode, not even an explicit nil
func (o *SweepFailure) UnsetFailureCode() {
	o.FailureCode.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SweepFailure) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SweepFailure) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *SweepFailure) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *SweepFailure) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *SweepFailure) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *SweepFailure) UnsetDescription() {
	o.Description.Unset()
}

func (o SweepFailure) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailureCode.IsSet() {
		toSerialize["failure_code"] = o.FailureCode.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SweepFailure) UnmarshalJSON(bytes []byte) (err error) {
	varSweepFailure := _SweepFailure{}

	if err = json.Unmarshal(bytes, &varSweepFailure); err == nil {
		*o = SweepFailure(varSweepFailure)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "failure_code")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSweepFailure struct {
	value *SweepFailure
	isSet bool
}

func (v NullableSweepFailure) Get() *SweepFailure {
	return v.value
}

func (v *NullableSweepFailure) Set(val *SweepFailure) {
	v.value = val
	v.isSet = true
}

func (v NullableSweepFailure) IsSet() bool {
	return v.isSet
}

func (v *NullableSweepFailure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSweepFailure(val *SweepFailure) *NullableSweepFailure {
	return &NullableSweepFailure{value: val, isSet: true}
}

func (v NullableSweepFailure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSweepFailure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


