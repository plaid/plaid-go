/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.664.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// RiskLevelWithNoData Risk level for the given risk check type, when available.
type RiskLevelWithNoData string

var _ = fmt.Printf

// List of RiskLevelWithNoData
const (
	RISKLEVELWITHNODATA_LOW RiskLevelWithNoData = "low"
	RISKLEVELWITHNODATA_MEDIUM RiskLevelWithNoData = "medium"
	RISKLEVELWITHNODATA_HIGH RiskLevelWithNoData = "high"
	RISKLEVELWITHNODATA_NO_DATA RiskLevelWithNoData = "no_data"
)

var allowedRiskLevelWithNoDataEnumValues = []RiskLevelWithNoData{
	"low",
	"medium",
	"high",
	"no_data",
}

func (v *RiskLevelWithNoData) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := RiskLevelWithNoData(value)


	*v = enumTypeValue
	return nil
}

// NewRiskLevelWithNoDataFromValue returns a pointer to a valid RiskLevelWithNoData
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRiskLevelWithNoDataFromValue(v string) (*RiskLevelWithNoData, error) {
	ev := RiskLevelWithNoData(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RiskLevelWithNoData) IsValid() bool {
	for _, existing := range allowedRiskLevelWithNoDataEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RiskLevelWithNoData value
func (v RiskLevelWithNoData) Ptr() *RiskLevelWithNoData {
	return &v
}

type NullableRiskLevelWithNoData struct {
	value *RiskLevelWithNoData
	isSet bool
}

func (v NullableRiskLevelWithNoData) Get() *RiskLevelWithNoData {
	return v.value
}

func (v *NullableRiskLevelWithNoData) Set(val *RiskLevelWithNoData) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskLevelWithNoData) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskLevelWithNoData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskLevelWithNoData(val *RiskLevelWithNoData) *NullableRiskLevelWithNoData {
	return &NullableRiskLevelWithNoData{value: val, isSet: true}
}

func (v NullableRiskLevelWithNoData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskLevelWithNoData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

