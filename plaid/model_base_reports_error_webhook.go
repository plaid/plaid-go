/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.413.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BaseReportsErrorWebhook Fired when Base Report generation has failed. The resulting `error` will have an `error_type` of `BASE_REPORT_ERROR`.
type BaseReportsErrorWebhook struct {
	// `BASE_REPORT`
	WebhookType string `json:"webhook_type"`
	// `ERROR`
	WebhookCode string `json:"webhook_code"`
	Error NullablePlaidError `json:"error"`
	// The ID associated with the Asset Report.
	AssetReportId *string `json:"asset_report_id,omitempty"`
	Environment WebhookEnvironmentValues `json:"environment"`
	AdditionalProperties map[string]interface{}
}

type _BaseReportsErrorWebhook BaseReportsErrorWebhook

// NewBaseReportsErrorWebhook instantiates a new BaseReportsErrorWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseReportsErrorWebhook(webhookType string, webhookCode string, error_ NullablePlaidError, environment WebhookEnvironmentValues) *BaseReportsErrorWebhook {
	this := BaseReportsErrorWebhook{}
	this.WebhookType = webhookType
	this.WebhookCode = webhookCode
	this.Error = error_
	this.Environment = environment
	return &this
}

// NewBaseReportsErrorWebhookWithDefaults instantiates a new BaseReportsErrorWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseReportsErrorWebhookWithDefaults() *BaseReportsErrorWebhook {
	this := BaseReportsErrorWebhook{}
	return &this
}

// GetWebhookType returns the WebhookType field value
func (o *BaseReportsErrorWebhook) GetWebhookType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookType
}

// GetWebhookTypeOk returns a tuple with the WebhookType field value
// and a boolean to check if the value has been set.
func (o *BaseReportsErrorWebhook) GetWebhookTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WebhookType, true
}

// SetWebhookType sets field value
func (o *BaseReportsErrorWebhook) SetWebhookType(v string) {
	o.WebhookType = v
}

// GetWebhookCode returns the WebhookCode field value
func (o *BaseReportsErrorWebhook) GetWebhookCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookCode
}

// GetWebhookCodeOk returns a tuple with the WebhookCode field value
// and a boolean to check if the value has been set.
func (o *BaseReportsErrorWebhook) GetWebhookCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WebhookCode, true
}

// SetWebhookCode sets field value
func (o *BaseReportsErrorWebhook) SetWebhookCode(v string) {
	o.WebhookCode = v
}

// GetError returns the Error field value
// If the value is explicit nil, the zero value for PlaidError will be returned
func (o *BaseReportsErrorWebhook) GetError() PlaidError {
	if o == nil || o.Error.Get() == nil {
		var ret PlaidError
		return ret
	}

	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseReportsErrorWebhook) GetErrorOk() (*PlaidError, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// SetError sets field value
func (o *BaseReportsErrorWebhook) SetError(v PlaidError) {
	o.Error.Set(&v)
}

// GetAssetReportId returns the AssetReportId field value if set, zero value otherwise.
func (o *BaseReportsErrorWebhook) GetAssetReportId() string {
	if o == nil || o.AssetReportId == nil {
		var ret string
		return ret
	}
	return *o.AssetReportId
}

// GetAssetReportIdOk returns a tuple with the AssetReportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseReportsErrorWebhook) GetAssetReportIdOk() (*string, bool) {
	if o == nil || o.AssetReportId == nil {
		return nil, false
	}
	return o.AssetReportId, true
}

// HasAssetReportId returns a boolean if a field has been set.
func (o *BaseReportsErrorWebhook) HasAssetReportId() bool {
	if o != nil && o.AssetReportId != nil {
		return true
	}

	return false
}

// SetAssetReportId gets a reference to the given string and assigns it to the AssetReportId field.
func (o *BaseReportsErrorWebhook) SetAssetReportId(v string) {
	o.AssetReportId = &v
}

// GetEnvironment returns the Environment field value
func (o *BaseReportsErrorWebhook) GetEnvironment() WebhookEnvironmentValues {
	if o == nil {
		var ret WebhookEnvironmentValues
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *BaseReportsErrorWebhook) GetEnvironmentOk() (*WebhookEnvironmentValues, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *BaseReportsErrorWebhook) SetEnvironment(v WebhookEnvironmentValues) {
	o.Environment = v
}

func (o BaseReportsErrorWebhook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["webhook_type"] = o.WebhookType
	}
	if true {
		toSerialize["webhook_code"] = o.WebhookCode
	}
	if true {
		toSerialize["error"] = o.Error.Get()
	}
	if o.AssetReportId != nil {
		toSerialize["asset_report_id"] = o.AssetReportId
	}
	if true {
		toSerialize["environment"] = o.Environment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BaseReportsErrorWebhook) UnmarshalJSON(bytes []byte) (err error) {
	varBaseReportsErrorWebhook := _BaseReportsErrorWebhook{}

	if err = json.Unmarshal(bytes, &varBaseReportsErrorWebhook); err == nil {
		*o = BaseReportsErrorWebhook(varBaseReportsErrorWebhook)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "webhook_type")
		delete(additionalProperties, "webhook_code")
		delete(additionalProperties, "error")
		delete(additionalProperties, "asset_report_id")
		delete(additionalProperties, "environment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBaseReportsErrorWebhook struct {
	value *BaseReportsErrorWebhook
	isSet bool
}

func (v NullableBaseReportsErrorWebhook) Get() *BaseReportsErrorWebhook {
	return v.value
}

func (v *NullableBaseReportsErrorWebhook) Set(val *BaseReportsErrorWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseReportsErrorWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseReportsErrorWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseReportsErrorWebhook(val *BaseReportsErrorWebhook) *NullableBaseReportsErrorWebhook {
	return &NullableBaseReportsErrorWebhook{value: val, isSet: true}
}

func (v NullableBaseReportsErrorWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseReportsErrorWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


