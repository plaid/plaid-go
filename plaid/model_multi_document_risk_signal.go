/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.128.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// MultiDocumentRiskSignal Object containing risk signals and relevant metadata for a set of uploaded documents
type MultiDocumentRiskSignal struct {
	// Array of objects containing attributes that could indicate if a document is fraudulent
	DocumentReferences []RiskSignalDocumentReference `json:"document_references"`
	// Array of attributes that indicate whether or not there is fraud risk with a set of documents
	RiskSignals []DocumentRiskSignal `json:"risk_signals"`
	AdditionalProperties map[string]interface{}
}

type _MultiDocumentRiskSignal MultiDocumentRiskSignal

// NewMultiDocumentRiskSignal instantiates a new MultiDocumentRiskSignal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultiDocumentRiskSignal(documentReferences []RiskSignalDocumentReference, riskSignals []DocumentRiskSignal) *MultiDocumentRiskSignal {
	this := MultiDocumentRiskSignal{}
	this.DocumentReferences = documentReferences
	this.RiskSignals = riskSignals
	return &this
}

// NewMultiDocumentRiskSignalWithDefaults instantiates a new MultiDocumentRiskSignal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultiDocumentRiskSignalWithDefaults() *MultiDocumentRiskSignal {
	this := MultiDocumentRiskSignal{}
	return &this
}

// GetDocumentReferences returns the DocumentReferences field value
func (o *MultiDocumentRiskSignal) GetDocumentReferences() []RiskSignalDocumentReference {
	if o == nil {
		var ret []RiskSignalDocumentReference
		return ret
	}

	return o.DocumentReferences
}

// GetDocumentReferencesOk returns a tuple with the DocumentReferences field value
// and a boolean to check if the value has been set.
func (o *MultiDocumentRiskSignal) GetDocumentReferencesOk() (*[]RiskSignalDocumentReference, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DocumentReferences, true
}

// SetDocumentReferences sets field value
func (o *MultiDocumentRiskSignal) SetDocumentReferences(v []RiskSignalDocumentReference) {
	o.DocumentReferences = v
}

// GetRiskSignals returns the RiskSignals field value
func (o *MultiDocumentRiskSignal) GetRiskSignals() []DocumentRiskSignal {
	if o == nil {
		var ret []DocumentRiskSignal
		return ret
	}

	return o.RiskSignals
}

// GetRiskSignalsOk returns a tuple with the RiskSignals field value
// and a boolean to check if the value has been set.
func (o *MultiDocumentRiskSignal) GetRiskSignalsOk() (*[]DocumentRiskSignal, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RiskSignals, true
}

// SetRiskSignals sets field value
func (o *MultiDocumentRiskSignal) SetRiskSignals(v []DocumentRiskSignal) {
	o.RiskSignals = v
}

func (o MultiDocumentRiskSignal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["document_references"] = o.DocumentReferences
	}
	if true {
		toSerialize["risk_signals"] = o.RiskSignals
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MultiDocumentRiskSignal) UnmarshalJSON(bytes []byte) (err error) {
	varMultiDocumentRiskSignal := _MultiDocumentRiskSignal{}

	if err = json.Unmarshal(bytes, &varMultiDocumentRiskSignal); err == nil {
		*o = MultiDocumentRiskSignal(varMultiDocumentRiskSignal)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "document_references")
		delete(additionalProperties, "risk_signals")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMultiDocumentRiskSignal struct {
	value *MultiDocumentRiskSignal
	isSet bool
}

func (v NullableMultiDocumentRiskSignal) Get() *MultiDocumentRiskSignal {
	return v.value
}

func (v *NullableMultiDocumentRiskSignal) Set(val *MultiDocumentRiskSignal) {
	v.value = val
	v.isSet = true
}

func (v NullableMultiDocumentRiskSignal) IsSet() bool {
	return v.isSet
}

func (v *NullableMultiDocumentRiskSignal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultiDocumentRiskSignal(val *MultiDocumentRiskSignal) *NullableMultiDocumentRiskSignal {
	return &NullableMultiDocumentRiskSignal{value: val, isSet: true}
}

func (v NullableMultiDocumentRiskSignal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultiDocumentRiskSignal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


