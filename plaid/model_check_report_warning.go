/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.627.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CheckReportWarning It is possible for a Check Report product to be returned with missing information. In such cases, the product will contain warning data in the response, indicating why obtaining the owner information failed.
type CheckReportWarning struct {
	// The warning type, which will always be `CHECK_REPORT_WARNING`
	WarningType string `json:"warning_type"`
	WarningCode CheckReportWarningCode `json:"warning_code"`
	Cause NullableCause `json:"cause"`
	AdditionalProperties map[string]interface{}
}

type _CheckReportWarning CheckReportWarning

// NewCheckReportWarning instantiates a new CheckReportWarning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckReportWarning(warningType string, warningCode CheckReportWarningCode, cause NullableCause) *CheckReportWarning {
	this := CheckReportWarning{}
	this.WarningType = warningType
	this.WarningCode = warningCode
	this.Cause = cause
	return &this
}

// NewCheckReportWarningWithDefaults instantiates a new CheckReportWarning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckReportWarningWithDefaults() *CheckReportWarning {
	this := CheckReportWarning{}
	return &this
}

// GetWarningType returns the WarningType field value
func (o *CheckReportWarning) GetWarningType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WarningType
}

// GetWarningTypeOk returns a tuple with the WarningType field value
// and a boolean to check if the value has been set.
func (o *CheckReportWarning) GetWarningTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WarningType, true
}

// SetWarningType sets field value
func (o *CheckReportWarning) SetWarningType(v string) {
	o.WarningType = v
}

// GetWarningCode returns the WarningCode field value
func (o *CheckReportWarning) GetWarningCode() CheckReportWarningCode {
	if o == nil {
		var ret CheckReportWarningCode
		return ret
	}

	return o.WarningCode
}

// GetWarningCodeOk returns a tuple with the WarningCode field value
// and a boolean to check if the value has been set.
func (o *CheckReportWarning) GetWarningCodeOk() (*CheckReportWarningCode, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WarningCode, true
}

// SetWarningCode sets field value
func (o *CheckReportWarning) SetWarningCode(v CheckReportWarningCode) {
	o.WarningCode = v
}

// GetCause returns the Cause field value
// If the value is explicit nil, the zero value for Cause will be returned
func (o *CheckReportWarning) GetCause() Cause {
	if o == nil || o.Cause.Get() == nil {
		var ret Cause
		return ret
	}

	return *o.Cause.Get()
}

// GetCauseOk returns a tuple with the Cause field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckReportWarning) GetCauseOk() (*Cause, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cause.Get(), o.Cause.IsSet()
}

// SetCause sets field value
func (o *CheckReportWarning) SetCause(v Cause) {
	o.Cause.Set(&v)
}

func (o CheckReportWarning) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["warning_type"] = o.WarningType
	}
	if true {
		toSerialize["warning_code"] = o.WarningCode
	}
	if true {
		toSerialize["cause"] = o.Cause.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CheckReportWarning) UnmarshalJSON(bytes []byte) (err error) {
	varCheckReportWarning := _CheckReportWarning{}

	if err = json.Unmarshal(bytes, &varCheckReportWarning); err == nil {
		*o = CheckReportWarning(varCheckReportWarning)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "warning_type")
		delete(additionalProperties, "warning_code")
		delete(additionalProperties, "cause")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCheckReportWarning struct {
	value *CheckReportWarning
	isSet bool
}

func (v NullableCheckReportWarning) Get() *CheckReportWarning {
	return v.value
}

func (v *NullableCheckReportWarning) Set(val *CheckReportWarning) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckReportWarning) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckReportWarning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckReportWarning(val *CheckReportWarning) *NullableCheckReportWarning {
	return &NullableCheckReportWarning{value: val, isSet: true}
}

func (v NullableCheckReportWarning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckReportWarning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


