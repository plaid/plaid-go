/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.635.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CraVoeReportAccount VOE Report information about an account.
type CraVoeReportAccount struct {
	// Plaidâ€™s unique identifier for the account. This value will not change unless Plaid can't reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.  If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.  Like all Plaid identifiers, the `account_id` is case sensitive.
	AccountId string `json:"account_id"`
	// The name of the account, either assigned by the user or by the financial institution itself.
	Name string `json:"name"`
	// The official name of the account as given by the financial institution.
	OfficialName NullableString `json:"official_name"`
	Type AccountType `json:"type"`
	Subtype NullableAccountSubtype `json:"subtype"`
	// Transaction history associated with the account for the VOE Report. Note that this transaction differs from a Base Report transaction in that it will only be deposits, and the amounts will be omitted.
	Transactions []CraVoeReportTransaction `json:"transactions"`
	AdditionalProperties map[string]interface{}
}

type _CraVoeReportAccount CraVoeReportAccount

// NewCraVoeReportAccount instantiates a new CraVoeReportAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCraVoeReportAccount(accountId string, name string, officialName NullableString, type_ AccountType, subtype NullableAccountSubtype, transactions []CraVoeReportTransaction) *CraVoeReportAccount {
	this := CraVoeReportAccount{}
	this.AccountId = accountId
	this.Name = name
	this.OfficialName = officialName
	this.Type = type_
	this.Subtype = subtype
	this.Transactions = transactions
	return &this
}

// NewCraVoeReportAccountWithDefaults instantiates a new CraVoeReportAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCraVoeReportAccountWithDefaults() *CraVoeReportAccount {
	this := CraVoeReportAccount{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *CraVoeReportAccount) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *CraVoeReportAccount) GetAccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *CraVoeReportAccount) SetAccountId(v string) {
	o.AccountId = v
}

// GetName returns the Name field value
func (o *CraVoeReportAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CraVoeReportAccount) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CraVoeReportAccount) SetName(v string) {
	o.Name = v
}

// GetOfficialName returns the OfficialName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CraVoeReportAccount) GetOfficialName() string {
	if o == nil || o.OfficialName.Get() == nil {
		var ret string
		return ret
	}

	return *o.OfficialName.Get()
}

// GetOfficialNameOk returns a tuple with the OfficialName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraVoeReportAccount) GetOfficialNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OfficialName.Get(), o.OfficialName.IsSet()
}

// SetOfficialName sets field value
func (o *CraVoeReportAccount) SetOfficialName(v string) {
	o.OfficialName.Set(&v)
}

// GetType returns the Type field value
func (o *CraVoeReportAccount) GetType() AccountType {
	if o == nil {
		var ret AccountType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CraVoeReportAccount) GetTypeOk() (*AccountType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CraVoeReportAccount) SetType(v AccountType) {
	o.Type = v
}

// GetSubtype returns the Subtype field value
// If the value is explicit nil, the zero value for AccountSubtype will be returned
func (o *CraVoeReportAccount) GetSubtype() AccountSubtype {
	if o == nil || o.Subtype.Get() == nil {
		var ret AccountSubtype
		return ret
	}

	return *o.Subtype.Get()
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CraVoeReportAccount) GetSubtypeOk() (*AccountSubtype, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subtype.Get(), o.Subtype.IsSet()
}

// SetSubtype sets field value
func (o *CraVoeReportAccount) SetSubtype(v AccountSubtype) {
	o.Subtype.Set(&v)
}

// GetTransactions returns the Transactions field value
func (o *CraVoeReportAccount) GetTransactions() []CraVoeReportTransaction {
	if o == nil {
		var ret []CraVoeReportTransaction
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *CraVoeReportAccount) GetTransactionsOk() (*[]CraVoeReportTransaction, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Transactions, true
}

// SetTransactions sets field value
func (o *CraVoeReportAccount) SetTransactions(v []CraVoeReportTransaction) {
	o.Transactions = v
}

func (o CraVoeReportAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_id"] = o.AccountId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["official_name"] = o.OfficialName.Get()
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["subtype"] = o.Subtype.Get()
	}
	if true {
		toSerialize["transactions"] = o.Transactions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CraVoeReportAccount) UnmarshalJSON(bytes []byte) (err error) {
	varCraVoeReportAccount := _CraVoeReportAccount{}

	if err = json.Unmarshal(bytes, &varCraVoeReportAccount); err == nil {
		*o = CraVoeReportAccount(varCraVoeReportAccount)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "official_name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "subtype")
		delete(additionalProperties, "transactions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCraVoeReportAccount struct {
	value *CraVoeReportAccount
	isSet bool
}

func (v NullableCraVoeReportAccount) Get() *CraVoeReportAccount {
	return v.value
}

func (v *NullableCraVoeReportAccount) Set(val *CraVoeReportAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableCraVoeReportAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableCraVoeReportAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraVoeReportAccount(val *CraVoeReportAccount) *NullableCraVoeReportAccount {
	return &NullableCraVoeReportAccount{value: val, isSet: true}
}

func (v NullableCraVoeReportAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraVoeReportAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


