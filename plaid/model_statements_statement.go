/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.413.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// StatementsStatement A statement's metadata associated with an account
type StatementsStatement struct {
	// Plaid's unique identifier for the statement.
	StatementId string `json:"statement_id"`
	// Month of the year. Possible values: 1 through 12 (January through December).
	Month int32 `json:"month"`
	// Year. Possible values: 2010-{current_year}.
	Year int32 `json:"year"`
	AdditionalProperties map[string]interface{}
}

type _StatementsStatement StatementsStatement

// NewStatementsStatement instantiates a new StatementsStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementsStatement(statementId string, month int32, year int32) *StatementsStatement {
	this := StatementsStatement{}
	this.StatementId = statementId
	this.Month = month
	this.Year = year
	return &this
}

// NewStatementsStatementWithDefaults instantiates a new StatementsStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementsStatementWithDefaults() *StatementsStatement {
	this := StatementsStatement{}
	return &this
}

// GetStatementId returns the StatementId field value
func (o *StatementsStatement) GetStatementId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatementId
}

// GetStatementIdOk returns a tuple with the StatementId field value
// and a boolean to check if the value has been set.
func (o *StatementsStatement) GetStatementIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StatementId, true
}

// SetStatementId sets field value
func (o *StatementsStatement) SetStatementId(v string) {
	o.StatementId = v
}

// GetMonth returns the Month field value
func (o *StatementsStatement) GetMonth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *StatementsStatement) GetMonthOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *StatementsStatement) SetMonth(v int32) {
	o.Month = v
}

// GetYear returns the Year field value
func (o *StatementsStatement) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *StatementsStatement) GetYearOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *StatementsStatement) SetYear(v int32) {
	o.Year = v
}

func (o StatementsStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["statement_id"] = o.StatementId
	}
	if true {
		toSerialize["month"] = o.Month
	}
	if true {
		toSerialize["year"] = o.Year
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StatementsStatement) UnmarshalJSON(bytes []byte) (err error) {
	varStatementsStatement := _StatementsStatement{}

	if err = json.Unmarshal(bytes, &varStatementsStatement); err == nil {
		*o = StatementsStatement(varStatementsStatement)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "statement_id")
		delete(additionalProperties, "month")
		delete(additionalProperties, "year")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStatementsStatement struct {
	value *StatementsStatement
	isSet bool
}

func (v NullableStatementsStatement) Get() *StatementsStatement {
	return v.value
}

func (v *NullableStatementsStatement) Set(val *StatementsStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementsStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementsStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementsStatement(val *StatementsStatement) *NullableStatementsStatement {
	return &NullableStatementsStatement{value: val, isSet: true}
}

func (v NullableStatementsStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementsStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


