/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.565.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// CraLoanApplicationDecision The decision of the loan application.
type CraLoanApplicationDecision string

var _ = fmt.Printf

// List of CraLoanApplicationDecision
const (
	CRALOANAPPLICATIONDECISION_APPROVED CraLoanApplicationDecision = "APPROVED"
	CRALOANAPPLICATIONDECISION_DECLINED CraLoanApplicationDecision = "DECLINED"
	CRALOANAPPLICATIONDECISION_OTHER CraLoanApplicationDecision = "OTHER"
)

var allowedCraLoanApplicationDecisionEnumValues = []CraLoanApplicationDecision{
	"APPROVED",
	"DECLINED",
	"OTHER",
}

func (v *CraLoanApplicationDecision) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := CraLoanApplicationDecision(value)


	*v = enumTypeValue
	return nil
}

// NewCraLoanApplicationDecisionFromValue returns a pointer to a valid CraLoanApplicationDecision
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCraLoanApplicationDecisionFromValue(v string) (*CraLoanApplicationDecision, error) {
	ev := CraLoanApplicationDecision(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CraLoanApplicationDecision) IsValid() bool {
	for _, existing := range allowedCraLoanApplicationDecisionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CraLoanApplicationDecision value
func (v CraLoanApplicationDecision) Ptr() *CraLoanApplicationDecision {
	return &v
}

type NullableCraLoanApplicationDecision struct {
	value *CraLoanApplicationDecision
	isSet bool
}

func (v NullableCraLoanApplicationDecision) Get() *CraLoanApplicationDecision {
	return v.value
}

func (v *NullableCraLoanApplicationDecision) Set(val *CraLoanApplicationDecision) {
	v.value = val
	v.isSet = true
}

func (v NullableCraLoanApplicationDecision) IsSet() bool {
	return v.isSet
}

func (v *NullableCraLoanApplicationDecision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraLoanApplicationDecision(val *CraLoanApplicationDecision) *NullableCraLoanApplicationDecision {
	return &NullableCraLoanApplicationDecision{value: val, isSet: true}
}

func (v NullableCraLoanApplicationDecision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraLoanApplicationDecision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

