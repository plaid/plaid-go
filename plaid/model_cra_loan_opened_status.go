/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.517.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CraLoanOpenedStatus Contains the status and date information of the loan when registering.
type CraLoanOpenedStatus struct {
	Status CraLoanStatus `json:"status"`
	// The effective date for the status of the loan. The date should be in ISO 8601 format (YYYY-MM-DD).
	Date string `json:"date"`
	AdditionalProperties map[string]interface{}
}

type _CraLoanOpenedStatus CraLoanOpenedStatus

// NewCraLoanOpenedStatus instantiates a new CraLoanOpenedStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCraLoanOpenedStatus(status CraLoanStatus, date string) *CraLoanOpenedStatus {
	this := CraLoanOpenedStatus{}
	this.Status = status
	this.Date = date
	return &this
}

// NewCraLoanOpenedStatusWithDefaults instantiates a new CraLoanOpenedStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCraLoanOpenedStatusWithDefaults() *CraLoanOpenedStatus {
	this := CraLoanOpenedStatus{}
	return &this
}

// GetStatus returns the Status field value
func (o *CraLoanOpenedStatus) GetStatus() CraLoanStatus {
	if o == nil {
		var ret CraLoanStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *CraLoanOpenedStatus) GetStatusOk() (*CraLoanStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *CraLoanOpenedStatus) SetStatus(v CraLoanStatus) {
	o.Status = v
}

// GetDate returns the Date field value
func (o *CraLoanOpenedStatus) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *CraLoanOpenedStatus) GetDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *CraLoanOpenedStatus) SetDate(v string) {
	o.Date = v
}

func (o CraLoanOpenedStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["date"] = o.Date
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CraLoanOpenedStatus) UnmarshalJSON(bytes []byte) (err error) {
	varCraLoanOpenedStatus := _CraLoanOpenedStatus{}

	if err = json.Unmarshal(bytes, &varCraLoanOpenedStatus); err == nil {
		*o = CraLoanOpenedStatus(varCraLoanOpenedStatus)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		delete(additionalProperties, "date")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCraLoanOpenedStatus struct {
	value *CraLoanOpenedStatus
	isSet bool
}

func (v NullableCraLoanOpenedStatus) Get() *CraLoanOpenedStatus {
	return v.value
}

func (v *NullableCraLoanOpenedStatus) Set(val *CraLoanOpenedStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCraLoanOpenedStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCraLoanOpenedStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraLoanOpenedStatus(val *CraLoanOpenedStatus) *NullableCraLoanOpenedStatus {
	return &NullableCraLoanOpenedStatus{value: val, isSet: true}
}

func (v NullableCraLoanOpenedStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraLoanOpenedStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


