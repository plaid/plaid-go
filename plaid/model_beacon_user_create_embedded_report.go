/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.410.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BeaconUserCreateEmbeddedReport Data for creating a Beacon Report as part of an initial Beacon User creation. Providing a fraud report as part of an initial Beacon User creation will omit the Beacon User from any billing charges.
type BeaconUserCreateEmbeddedReport struct {
	Type BeaconReportType `json:"type"`
	// A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
	FraudDate string `json:"fraud_date"`
	FraudAmount NullableFraudAmountNullable `json:"fraud_amount,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BeaconUserCreateEmbeddedReport BeaconUserCreateEmbeddedReport

// NewBeaconUserCreateEmbeddedReport instantiates a new BeaconUserCreateEmbeddedReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconUserCreateEmbeddedReport(type_ BeaconReportType, fraudDate string) *BeaconUserCreateEmbeddedReport {
	this := BeaconUserCreateEmbeddedReport{}
	this.Type = type_
	this.FraudDate = fraudDate
	return &this
}

// NewBeaconUserCreateEmbeddedReportWithDefaults instantiates a new BeaconUserCreateEmbeddedReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconUserCreateEmbeddedReportWithDefaults() *BeaconUserCreateEmbeddedReport {
	this := BeaconUserCreateEmbeddedReport{}
	return &this
}

// GetType returns the Type field value
func (o *BeaconUserCreateEmbeddedReport) GetType() BeaconReportType {
	if o == nil {
		var ret BeaconReportType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BeaconUserCreateEmbeddedReport) GetTypeOk() (*BeaconReportType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BeaconUserCreateEmbeddedReport) SetType(v BeaconReportType) {
	o.Type = v
}

// GetFraudDate returns the FraudDate field value
func (o *BeaconUserCreateEmbeddedReport) GetFraudDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FraudDate
}

// GetFraudDateOk returns a tuple with the FraudDate field value
// and a boolean to check if the value has been set.
func (o *BeaconUserCreateEmbeddedReport) GetFraudDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FraudDate, true
}

// SetFraudDate sets field value
func (o *BeaconUserCreateEmbeddedReport) SetFraudDate(v string) {
	o.FraudDate = v
}

// GetFraudAmount returns the FraudAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BeaconUserCreateEmbeddedReport) GetFraudAmount() FraudAmountNullable {
	if o == nil || o.FraudAmount.Get() == nil {
		var ret FraudAmountNullable
		return ret
	}
	return *o.FraudAmount.Get()
}

// GetFraudAmountOk returns a tuple with the FraudAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BeaconUserCreateEmbeddedReport) GetFraudAmountOk() (*FraudAmountNullable, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FraudAmount.Get(), o.FraudAmount.IsSet()
}

// HasFraudAmount returns a boolean if a field has been set.
func (o *BeaconUserCreateEmbeddedReport) HasFraudAmount() bool {
	if o != nil && o.FraudAmount.IsSet() {
		return true
	}

	return false
}

// SetFraudAmount gets a reference to the given NullableFraudAmountNullable and assigns it to the FraudAmount field.
func (o *BeaconUserCreateEmbeddedReport) SetFraudAmount(v FraudAmountNullable) {
	o.FraudAmount.Set(&v)
}
// SetFraudAmountNil sets the value for FraudAmount to be an explicit nil
func (o *BeaconUserCreateEmbeddedReport) SetFraudAmountNil() {
	o.FraudAmount.Set(nil)
}

// UnsetFraudAmount ensures that no value is present for FraudAmount, not even an explicit nil
func (o *BeaconUserCreateEmbeddedReport) UnsetFraudAmount() {
	o.FraudAmount.Unset()
}

func (o BeaconUserCreateEmbeddedReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["fraud_date"] = o.FraudDate
	}
	if o.FraudAmount.IsSet() {
		toSerialize["fraud_amount"] = o.FraudAmount.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BeaconUserCreateEmbeddedReport) UnmarshalJSON(bytes []byte) (err error) {
	varBeaconUserCreateEmbeddedReport := _BeaconUserCreateEmbeddedReport{}

	if err = json.Unmarshal(bytes, &varBeaconUserCreateEmbeddedReport); err == nil {
		*o = BeaconUserCreateEmbeddedReport(varBeaconUserCreateEmbeddedReport)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "fraud_date")
		delete(additionalProperties, "fraud_amount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBeaconUserCreateEmbeddedReport struct {
	value *BeaconUserCreateEmbeddedReport
	isSet bool
}

func (v NullableBeaconUserCreateEmbeddedReport) Get() *BeaconUserCreateEmbeddedReport {
	return v.value
}

func (v *NullableBeaconUserCreateEmbeddedReport) Set(val *BeaconUserCreateEmbeddedReport) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconUserCreateEmbeddedReport) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconUserCreateEmbeddedReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconUserCreateEmbeddedReport(val *BeaconUserCreateEmbeddedReport) *NullableBeaconUserCreateEmbeddedReport {
	return &NullableBeaconUserCreateEmbeddedReport{value: val, isSet: true}
}

func (v NullableBeaconUserCreateEmbeddedReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconUserCreateEmbeddedReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


