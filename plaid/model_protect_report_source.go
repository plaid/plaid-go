/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// ProtectReportSource The source that identified or reported the incident.  `INTERNAL_REVIEW` - Incident was identified through internal fraud investigations or review processes.  `USER_SELF_REPORTED` - Incident was reported directly by the affected user.  `BANK_FEEDBACK` - Incident was identified through bank feedback, including ACH returns and connection revocations.  `NETWORK_FEEDBACK` - Incident was identified through card network alerts or chargebacks.  `AUTOMATED_SYSTEM` - Incident was detected by automated systems such as fraud models or rule engines.  `THIRD_PARTY_ALERT` - Incident was identified through external vendor or consortium alerts.  `OTHER` - Incident was identified through a source not covered by other categories.
type ProtectReportSource string

var _ = fmt.Printf

// List of ProtectReportSource
const (
	PROTECTREPORTSOURCE_INTERNAL_REVIEW ProtectReportSource = "INTERNAL_REVIEW"
	PROTECTREPORTSOURCE_USER_SELF_REPORTED ProtectReportSource = "USER_SELF_REPORTED"
	PROTECTREPORTSOURCE_BANK_FEEDBACK ProtectReportSource = "BANK_FEEDBACK"
	PROTECTREPORTSOURCE_NETWORK_FEEDBACK ProtectReportSource = "NETWORK_FEEDBACK"
	PROTECTREPORTSOURCE_AUTOMATED_SYSTEM ProtectReportSource = "AUTOMATED_SYSTEM"
	PROTECTREPORTSOURCE_THIRD_PARTY_ALERT ProtectReportSource = "THIRD_PARTY_ALERT"
	PROTECTREPORTSOURCE_OTHER ProtectReportSource = "OTHER"
)

var allowedProtectReportSourceEnumValues = []ProtectReportSource{
	"INTERNAL_REVIEW",
	"USER_SELF_REPORTED",
	"BANK_FEEDBACK",
	"NETWORK_FEEDBACK",
	"AUTOMATED_SYSTEM",
	"THIRD_PARTY_ALERT",
	"OTHER",
}

func (v *ProtectReportSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := ProtectReportSource(value)


	*v = enumTypeValue
	return nil
}

// NewProtectReportSourceFromValue returns a pointer to a valid ProtectReportSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtectReportSourceFromValue(v string) (*ProtectReportSource, error) {
	ev := ProtectReportSource(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtectReportSource) IsValid() bool {
	for _, existing := range allowedProtectReportSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProtectReportSource value
func (v ProtectReportSource) Ptr() *ProtectReportSource {
	return &v
}

type NullableProtectReportSource struct {
	value *ProtectReportSource
	isSet bool
}

func (v NullableProtectReportSource) Get() *ProtectReportSource {
	return v.value
}

func (v *NullableProtectReportSource) Set(val *ProtectReportSource) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectReportSource) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectReportSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectReportSource(val *ProtectReportSource) *NullableProtectReportSource {
	return &NullableProtectReportSource{value: val, isSet: true}
}

func (v NullableProtectReportSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectReportSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

