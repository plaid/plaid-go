/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.413.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BeaconUserCreateRequest Request input for creating a Beacon User.  The primary use for this endpoint is to add a new end user to Beacon for fraud and duplicate scanning. This endpoint can also be used to import historical fraud cases into the Beacon Network without being charged for creating a Beacon User. To import historical fraud cases, embed the fraud report in the optional `report` section of the request payload.
type BeaconUserCreateRequest struct {
	// ID of the associated Beacon Program.
	ProgramId string `json:"program_id"`
	// A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the `/link/token/create` `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
	ClientUserId string `json:"client_user_id"`
	User BeaconUserRequestData `json:"user"`
	Report NullableBeaconUserCreateEmbeddedReport `json:"report,omitempty"`
	// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
	ClientId *string `json:"client_id,omitempty"`
	// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
	Secret *string `json:"secret,omitempty"`
}

// NewBeaconUserCreateRequest instantiates a new BeaconUserCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconUserCreateRequest(programId string, clientUserId string, user BeaconUserRequestData) *BeaconUserCreateRequest {
	this := BeaconUserCreateRequest{}
	this.ProgramId = programId
	this.ClientUserId = clientUserId
	this.User = user
	return &this
}

// NewBeaconUserCreateRequestWithDefaults instantiates a new BeaconUserCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconUserCreateRequestWithDefaults() *BeaconUserCreateRequest {
	this := BeaconUserCreateRequest{}
	return &this
}

// GetProgramId returns the ProgramId field value
func (o *BeaconUserCreateRequest) GetProgramId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProgramId
}

// GetProgramIdOk returns a tuple with the ProgramId field value
// and a boolean to check if the value has been set.
func (o *BeaconUserCreateRequest) GetProgramIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ProgramId, true
}

// SetProgramId sets field value
func (o *BeaconUserCreateRequest) SetProgramId(v string) {
	o.ProgramId = v
}

// GetClientUserId returns the ClientUserId field value
func (o *BeaconUserCreateRequest) GetClientUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientUserId
}

// GetClientUserIdOk returns a tuple with the ClientUserId field value
// and a boolean to check if the value has been set.
func (o *BeaconUserCreateRequest) GetClientUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ClientUserId, true
}

// SetClientUserId sets field value
func (o *BeaconUserCreateRequest) SetClientUserId(v string) {
	o.ClientUserId = v
}

// GetUser returns the User field value
func (o *BeaconUserCreateRequest) GetUser() BeaconUserRequestData {
	if o == nil {
		var ret BeaconUserRequestData
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *BeaconUserCreateRequest) GetUserOk() (*BeaconUserRequestData, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *BeaconUserCreateRequest) SetUser(v BeaconUserRequestData) {
	o.User = v
}

// GetReport returns the Report field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BeaconUserCreateRequest) GetReport() BeaconUserCreateEmbeddedReport {
	if o == nil || o.Report.Get() == nil {
		var ret BeaconUserCreateEmbeddedReport
		return ret
	}
	return *o.Report.Get()
}

// GetReportOk returns a tuple with the Report field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BeaconUserCreateRequest) GetReportOk() (*BeaconUserCreateEmbeddedReport, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Report.Get(), o.Report.IsSet()
}

// HasReport returns a boolean if a field has been set.
func (o *BeaconUserCreateRequest) HasReport() bool {
	if o != nil && o.Report.IsSet() {
		return true
	}

	return false
}

// SetReport gets a reference to the given NullableBeaconUserCreateEmbeddedReport and assigns it to the Report field.
func (o *BeaconUserCreateRequest) SetReport(v BeaconUserCreateEmbeddedReport) {
	o.Report.Set(&v)
}
// SetReportNil sets the value for Report to be an explicit nil
func (o *BeaconUserCreateRequest) SetReportNil() {
	o.Report.Set(nil)
}

// UnsetReport ensures that no value is present for Report, not even an explicit nil
func (o *BeaconUserCreateRequest) UnsetReport() {
	o.Report.Unset()
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *BeaconUserCreateRequest) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeaconUserCreateRequest) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *BeaconUserCreateRequest) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *BeaconUserCreateRequest) SetClientId(v string) {
	o.ClientId = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *BeaconUserCreateRequest) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BeaconUserCreateRequest) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *BeaconUserCreateRequest) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *BeaconUserCreateRequest) SetSecret(v string) {
	o.Secret = &v
}

func (o BeaconUserCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["program_id"] = o.ProgramId
	}
	if true {
		toSerialize["client_user_id"] = o.ClientUserId
	}
	if true {
		toSerialize["user"] = o.User
	}
	if o.Report.IsSet() {
		toSerialize["report"] = o.Report.Get()
	}
	if o.ClientId != nil {
		toSerialize["client_id"] = o.ClientId
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableBeaconUserCreateRequest struct {
	value *BeaconUserCreateRequest
	isSet bool
}

func (v NullableBeaconUserCreateRequest) Get() *BeaconUserCreateRequest {
	return v.value
}

func (v *NullableBeaconUserCreateRequest) Set(val *BeaconUserCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconUserCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconUserCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconUserCreateRequest(val *BeaconUserCreateRequest) *NullableBeaconUserCreateRequest {
	return &NullableBeaconUserCreateRequest{value: val, isSet: true}
}

func (v NullableBeaconUserCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconUserCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


