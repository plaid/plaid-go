/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// ConsentEventInitiator The entity that initiated collection of consent.
type ConsentEventInitiator string

var _ = fmt.Printf

// List of ConsentEventInitiator
const (
	CONSENTEVENTINITIATOR_PLAID ConsentEventInitiator = "PLAID"
	CONSENTEVENTINITIATOR_DATA_PROVIDER ConsentEventInitiator = "DATA_PROVIDER"
	CONSENTEVENTINITIATOR_CUSTOMER ConsentEventInitiator = "CUSTOMER"
	CONSENTEVENTINITIATOR_END_USER ConsentEventInitiator = "END_USER"
)

var allowedConsentEventInitiatorEnumValues = []ConsentEventInitiator{
	"PLAID",
	"DATA_PROVIDER",
	"CUSTOMER",
	"END_USER",
}

func (v *ConsentEventInitiator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := ConsentEventInitiator(value)


	*v = enumTypeValue
	return nil
}

// NewConsentEventInitiatorFromValue returns a pointer to a valid ConsentEventInitiator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConsentEventInitiatorFromValue(v string) (*ConsentEventInitiator, error) {
	ev := ConsentEventInitiator(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConsentEventInitiator) IsValid() bool {
	for _, existing := range allowedConsentEventInitiatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConsentEventInitiator value
func (v ConsentEventInitiator) Ptr() *ConsentEventInitiator {
	return &v
}

type NullableConsentEventInitiator struct {
	value *ConsentEventInitiator
	isSet bool
}

func (v NullableConsentEventInitiator) Get() *ConsentEventInitiator {
	return v.value
}

func (v *NullableConsentEventInitiator) Set(val *ConsentEventInitiator) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentEventInitiator) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentEventInitiator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentEventInitiator(val *ConsentEventInitiator) *NullableConsentEventInitiator {
	return &NullableConsentEventInitiator{value: val, isSet: true}
}

func (v NullableConsentEventInitiator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentEventInitiator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

