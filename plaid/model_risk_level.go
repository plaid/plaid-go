/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.645.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// RiskLevel Risk level for the given risk check type.
type RiskLevel string

var _ = fmt.Printf

// List of RiskLevel
const (
	RISKLEVEL_LOW RiskLevel = "low"
	RISKLEVEL_MEDIUM RiskLevel = "medium"
	RISKLEVEL_HIGH RiskLevel = "high"
)

var allowedRiskLevelEnumValues = []RiskLevel{
	"low",
	"medium",
	"high",
}

func (v *RiskLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := RiskLevel(value)


	*v = enumTypeValue
	return nil
}

// NewRiskLevelFromValue returns a pointer to a valid RiskLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRiskLevelFromValue(v string) (*RiskLevel, error) {
	ev := RiskLevel(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RiskLevel) IsValid() bool {
	for _, existing := range allowedRiskLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RiskLevel value
func (v RiskLevel) Ptr() *RiskLevel {
	return &v
}

type NullableRiskLevel struct {
	value *RiskLevel
	isSet bool
}

func (v NullableRiskLevel) Get() *RiskLevel {
	return v.value
}

func (v *NullableRiskLevel) Set(val *RiskLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskLevel(val *RiskLevel) *NullableRiskLevel {
	return &NullableRiskLevel{value: val, isSet: true}
}

func (v NullableRiskLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

