/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.385.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// LinkEventMetadata Metadata about an event that occured while the user was going through Link
type LinkEventMetadata struct {
	// The error code that the user encountered. Emitted by `ERROR`, `EXIT`.
	ErrorCode *string `json:"error_code,omitempty"`
	// The error message that the user encountered. Emitted by: `ERROR`, `EXIT`.
	ErrorMessage *string `json:"error_message,omitempty"`
	// The error type that the user encountered. Emitted by: `ERROR`, `EXIT`.
	ErrorType *string `json:"error_type,omitempty"`
	// The status key indicates the point at which the user exited the Link flow. Emitted by: `EXIT`.
	ExitStatus *string `json:"exit_status,omitempty"`
	// The ID of the selected institution. Emitted by: all events.
	InstitutionId *string `json:"institution_id,omitempty"`
	// The name of the selected institution. Emitted by: all events.
	InstitutionName *string `json:"institution_name,omitempty"`
	// The query used to search for institutions. Emitted by: `SEARCH_INSTITUTION`.
	InstitutionSearchQuery *string `json:"institution_search_query,omitempty"`
	// The request ID for the last request made by Link. This can be shared with Plaid Support to expedite investigation. Emitted by: all events.
	RequestId string `json:"request_id"`
	// If set, the user has encountered one of the following MFA types: code, device, questions, selections. Emitted by: `SUBMIT_MFA` and `TRANSITION_VIEW` when view_name is `MFA`.
	MfaType *string `json:"mfa_type,omitempty"`
	// The name of the view that is being transitioned to. Emitted by: `TRANSITION_VIEW`.
	ViewName *string `json:"view_name,omitempty"`
	// Either the verification method for a matched institution selected by the user or the Auth Type Select flow type selected by the user. If selection is used to describe selected verification method, then possible values are `phoneotp` or `password`;  if selection is used to describe the selected Auth Type Select flow, then possible values are `flow_type_manual` or `flow_type_instant`. Emitted by: `MATCHED_SELECT_VERIFY_METHOD` and `SELECT_AUTH_TYPE`.
	Selection *string `json:"selection,omitempty"`
	// The name of the selected brand.
	BrandName *string `json:"brand_name,omitempty"`
	// The reason this institution was matched, which will be either `returning_user` or `routing_number`. Emitted by: `MATCHED_SELECT_INSTITUTION`.
	MatchReason *string `json:"match_reason,omitempty"`
	// The routing number submitted by user at the micro-deposits routing number pane. Emitted by `SUBMIT_ROUTING_NUMBER`.
	RoutingNumber *string `json:"routing_number,omitempty"`
	// The account number mask extracted from the user-provided account number. If the user-inputted account number is four digits long, `account_number_mask` is empty. Emitted by `SUBMIT_ACCOUNT_NUMBER`.
	AccountNumberMask *string `json:"account_number_mask,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LinkEventMetadata LinkEventMetadata

// NewLinkEventMetadata instantiates a new LinkEventMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkEventMetadata(requestId string) *LinkEventMetadata {
	this := LinkEventMetadata{}
	this.RequestId = requestId
	return &this
}

// NewLinkEventMetadataWithDefaults instantiates a new LinkEventMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkEventMetadataWithDefaults() *LinkEventMetadata {
	this := LinkEventMetadata{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetErrorCode() string {
	if o == nil || o.ErrorCode == nil {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetErrorCodeOk() (*string, bool) {
	if o == nil || o.ErrorCode == nil {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *LinkEventMetadata) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *LinkEventMetadata) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetErrorType() string {
	if o == nil || o.ErrorType == nil {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetErrorTypeOk() (*string, bool) {
	if o == nil || o.ErrorType == nil {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasErrorType() bool {
	if o != nil && o.ErrorType != nil {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *LinkEventMetadata) SetErrorType(v string) {
	o.ErrorType = &v
}

// GetExitStatus returns the ExitStatus field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetExitStatus() string {
	if o == nil || o.ExitStatus == nil {
		var ret string
		return ret
	}
	return *o.ExitStatus
}

// GetExitStatusOk returns a tuple with the ExitStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetExitStatusOk() (*string, bool) {
	if o == nil || o.ExitStatus == nil {
		return nil, false
	}
	return o.ExitStatus, true
}

// HasExitStatus returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasExitStatus() bool {
	if o != nil && o.ExitStatus != nil {
		return true
	}

	return false
}

// SetExitStatus gets a reference to the given string and assigns it to the ExitStatus field.
func (o *LinkEventMetadata) SetExitStatus(v string) {
	o.ExitStatus = &v
}

// GetInstitutionId returns the InstitutionId field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetInstitutionId() string {
	if o == nil || o.InstitutionId == nil {
		var ret string
		return ret
	}
	return *o.InstitutionId
}

// GetInstitutionIdOk returns a tuple with the InstitutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetInstitutionIdOk() (*string, bool) {
	if o == nil || o.InstitutionId == nil {
		return nil, false
	}
	return o.InstitutionId, true
}

// HasInstitutionId returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasInstitutionId() bool {
	if o != nil && o.InstitutionId != nil {
		return true
	}

	return false
}

// SetInstitutionId gets a reference to the given string and assigns it to the InstitutionId field.
func (o *LinkEventMetadata) SetInstitutionId(v string) {
	o.InstitutionId = &v
}

// GetInstitutionName returns the InstitutionName field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetInstitutionName() string {
	if o == nil || o.InstitutionName == nil {
		var ret string
		return ret
	}
	return *o.InstitutionName
}

// GetInstitutionNameOk returns a tuple with the InstitutionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetInstitutionNameOk() (*string, bool) {
	if o == nil || o.InstitutionName == nil {
		return nil, false
	}
	return o.InstitutionName, true
}

// HasInstitutionName returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasInstitutionName() bool {
	if o != nil && o.InstitutionName != nil {
		return true
	}

	return false
}

// SetInstitutionName gets a reference to the given string and assigns it to the InstitutionName field.
func (o *LinkEventMetadata) SetInstitutionName(v string) {
	o.InstitutionName = &v
}

// GetInstitutionSearchQuery returns the InstitutionSearchQuery field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetInstitutionSearchQuery() string {
	if o == nil || o.InstitutionSearchQuery == nil {
		var ret string
		return ret
	}
	return *o.InstitutionSearchQuery
}

// GetInstitutionSearchQueryOk returns a tuple with the InstitutionSearchQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetInstitutionSearchQueryOk() (*string, bool) {
	if o == nil || o.InstitutionSearchQuery == nil {
		return nil, false
	}
	return o.InstitutionSearchQuery, true
}

// HasInstitutionSearchQuery returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasInstitutionSearchQuery() bool {
	if o != nil && o.InstitutionSearchQuery != nil {
		return true
	}

	return false
}

// SetInstitutionSearchQuery gets a reference to the given string and assigns it to the InstitutionSearchQuery field.
func (o *LinkEventMetadata) SetInstitutionSearchQuery(v string) {
	o.InstitutionSearchQuery = &v
}

// GetRequestId returns the RequestId field value
func (o *LinkEventMetadata) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *LinkEventMetadata) SetRequestId(v string) {
	o.RequestId = v
}

// GetMfaType returns the MfaType field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetMfaType() string {
	if o == nil || o.MfaType == nil {
		var ret string
		return ret
	}
	return *o.MfaType
}

// GetMfaTypeOk returns a tuple with the MfaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetMfaTypeOk() (*string, bool) {
	if o == nil || o.MfaType == nil {
		return nil, false
	}
	return o.MfaType, true
}

// HasMfaType returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasMfaType() bool {
	if o != nil && o.MfaType != nil {
		return true
	}

	return false
}

// SetMfaType gets a reference to the given string and assigns it to the MfaType field.
func (o *LinkEventMetadata) SetMfaType(v string) {
	o.MfaType = &v
}

// GetViewName returns the ViewName field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetViewName() string {
	if o == nil || o.ViewName == nil {
		var ret string
		return ret
	}
	return *o.ViewName
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetViewNameOk() (*string, bool) {
	if o == nil || o.ViewName == nil {
		return nil, false
	}
	return o.ViewName, true
}

// HasViewName returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasViewName() bool {
	if o != nil && o.ViewName != nil {
		return true
	}

	return false
}

// SetViewName gets a reference to the given string and assigns it to the ViewName field.
func (o *LinkEventMetadata) SetViewName(v string) {
	o.ViewName = &v
}

// GetSelection returns the Selection field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetSelection() string {
	if o == nil || o.Selection == nil {
		var ret string
		return ret
	}
	return *o.Selection
}

// GetSelectionOk returns a tuple with the Selection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetSelectionOk() (*string, bool) {
	if o == nil || o.Selection == nil {
		return nil, false
	}
	return o.Selection, true
}

// HasSelection returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasSelection() bool {
	if o != nil && o.Selection != nil {
		return true
	}

	return false
}

// SetSelection gets a reference to the given string and assigns it to the Selection field.
func (o *LinkEventMetadata) SetSelection(v string) {
	o.Selection = &v
}

// GetBrandName returns the BrandName field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetBrandName() string {
	if o == nil || o.BrandName == nil {
		var ret string
		return ret
	}
	return *o.BrandName
}

// GetBrandNameOk returns a tuple with the BrandName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetBrandNameOk() (*string, bool) {
	if o == nil || o.BrandName == nil {
		return nil, false
	}
	return o.BrandName, true
}

// HasBrandName returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasBrandName() bool {
	if o != nil && o.BrandName != nil {
		return true
	}

	return false
}

// SetBrandName gets a reference to the given string and assigns it to the BrandName field.
func (o *LinkEventMetadata) SetBrandName(v string) {
	o.BrandName = &v
}

// GetMatchReason returns the MatchReason field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetMatchReason() string {
	if o == nil || o.MatchReason == nil {
		var ret string
		return ret
	}
	return *o.MatchReason
}

// GetMatchReasonOk returns a tuple with the MatchReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetMatchReasonOk() (*string, bool) {
	if o == nil || o.MatchReason == nil {
		return nil, false
	}
	return o.MatchReason, true
}

// HasMatchReason returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasMatchReason() bool {
	if o != nil && o.MatchReason != nil {
		return true
	}

	return false
}

// SetMatchReason gets a reference to the given string and assigns it to the MatchReason field.
func (o *LinkEventMetadata) SetMatchReason(v string) {
	o.MatchReason = &v
}

// GetRoutingNumber returns the RoutingNumber field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetRoutingNumber() string {
	if o == nil || o.RoutingNumber == nil {
		var ret string
		return ret
	}
	return *o.RoutingNumber
}

// GetRoutingNumberOk returns a tuple with the RoutingNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetRoutingNumberOk() (*string, bool) {
	if o == nil || o.RoutingNumber == nil {
		return nil, false
	}
	return o.RoutingNumber, true
}

// HasRoutingNumber returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasRoutingNumber() bool {
	if o != nil && o.RoutingNumber != nil {
		return true
	}

	return false
}

// SetRoutingNumber gets a reference to the given string and assigns it to the RoutingNumber field.
func (o *LinkEventMetadata) SetRoutingNumber(v string) {
	o.RoutingNumber = &v
}

// GetAccountNumberMask returns the AccountNumberMask field value if set, zero value otherwise.
func (o *LinkEventMetadata) GetAccountNumberMask() string {
	if o == nil || o.AccountNumberMask == nil {
		var ret string
		return ret
	}
	return *o.AccountNumberMask
}

// GetAccountNumberMaskOk returns a tuple with the AccountNumberMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkEventMetadata) GetAccountNumberMaskOk() (*string, bool) {
	if o == nil || o.AccountNumberMask == nil {
		return nil, false
	}
	return o.AccountNumberMask, true
}

// HasAccountNumberMask returns a boolean if a field has been set.
func (o *LinkEventMetadata) HasAccountNumberMask() bool {
	if o != nil && o.AccountNumberMask != nil {
		return true
	}

	return false
}

// SetAccountNumberMask gets a reference to the given string and assigns it to the AccountNumberMask field.
func (o *LinkEventMetadata) SetAccountNumberMask(v string) {
	o.AccountNumberMask = &v
}

func (o LinkEventMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorCode != nil {
		toSerialize["error_code"] = o.ErrorCode
	}
	if o.ErrorMessage != nil {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if o.ErrorType != nil {
		toSerialize["error_type"] = o.ErrorType
	}
	if o.ExitStatus != nil {
		toSerialize["exit_status"] = o.ExitStatus
	}
	if o.InstitutionId != nil {
		toSerialize["institution_id"] = o.InstitutionId
	}
	if o.InstitutionName != nil {
		toSerialize["institution_name"] = o.InstitutionName
	}
	if o.InstitutionSearchQuery != nil {
		toSerialize["institution_search_query"] = o.InstitutionSearchQuery
	}
	if true {
		toSerialize["request_id"] = o.RequestId
	}
	if o.MfaType != nil {
		toSerialize["mfa_type"] = o.MfaType
	}
	if o.ViewName != nil {
		toSerialize["view_name"] = o.ViewName
	}
	if o.Selection != nil {
		toSerialize["selection"] = o.Selection
	}
	if o.BrandName != nil {
		toSerialize["brand_name"] = o.BrandName
	}
	if o.MatchReason != nil {
		toSerialize["match_reason"] = o.MatchReason
	}
	if o.RoutingNumber != nil {
		toSerialize["routing_number"] = o.RoutingNumber
	}
	if o.AccountNumberMask != nil {
		toSerialize["account_number_mask"] = o.AccountNumberMask
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LinkEventMetadata) UnmarshalJSON(bytes []byte) (err error) {
	varLinkEventMetadata := _LinkEventMetadata{}

	if err = json.Unmarshal(bytes, &varLinkEventMetadata); err == nil {
		*o = LinkEventMetadata(varLinkEventMetadata)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "error_code")
		delete(additionalProperties, "error_message")
		delete(additionalProperties, "error_type")
		delete(additionalProperties, "exit_status")
		delete(additionalProperties, "institution_id")
		delete(additionalProperties, "institution_name")
		delete(additionalProperties, "institution_search_query")
		delete(additionalProperties, "request_id")
		delete(additionalProperties, "mfa_type")
		delete(additionalProperties, "view_name")
		delete(additionalProperties, "selection")
		delete(additionalProperties, "brand_name")
		delete(additionalProperties, "match_reason")
		delete(additionalProperties, "routing_number")
		delete(additionalProperties, "account_number_mask")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinkEventMetadata struct {
	value *LinkEventMetadata
	isSet bool
}

func (v NullableLinkEventMetadata) Get() *LinkEventMetadata {
	return v.value
}

func (v *NullableLinkEventMetadata) Set(val *LinkEventMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkEventMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkEventMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkEventMetadata(val *LinkEventMetadata) *NullableLinkEventMetadata {
	return &NullableLinkEventMetadata{value: val, isSet: true}
}

func (v NullableLinkEventMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkEventMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


