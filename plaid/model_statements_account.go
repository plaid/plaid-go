/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.413.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// StatementsAccount Account associated with the item.
type StatementsAccount struct {
	// Plaid's unique identifier for the account.
	AccountId string `json:"account_id"`
	// The name of the account, either assigned by the user or by the financial institution itself.
	AccountName string `json:"account_name"`
	// The type of account. Possible values are investment, credit, depository, loan, brokerage, other.
	AccountType string `json:"account_type"`
	// The list of statements' metadata associated with this account.
	Statements []StatementsStatement `json:"statements"`
	AdditionalProperties map[string]interface{}
}

type _StatementsAccount StatementsAccount

// NewStatementsAccount instantiates a new StatementsAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementsAccount(accountId string, accountName string, accountType string, statements []StatementsStatement) *StatementsAccount {
	this := StatementsAccount{}
	this.AccountId = accountId
	this.AccountName = accountName
	this.AccountType = accountType
	this.Statements = statements
	return &this
}

// NewStatementsAccountWithDefaults instantiates a new StatementsAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementsAccountWithDefaults() *StatementsAccount {
	this := StatementsAccount{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *StatementsAccount) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *StatementsAccount) GetAccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *StatementsAccount) SetAccountId(v string) {
	o.AccountId = v
}

// GetAccountName returns the AccountName field value
func (o *StatementsAccount) GetAccountName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value
// and a boolean to check if the value has been set.
func (o *StatementsAccount) GetAccountNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountName, true
}

// SetAccountName sets field value
func (o *StatementsAccount) SetAccountName(v string) {
	o.AccountName = v
}

// GetAccountType returns the AccountType field value
func (o *StatementsAccount) GetAccountType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value
// and a boolean to check if the value has been set.
func (o *StatementsAccount) GetAccountTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountType, true
}

// SetAccountType sets field value
func (o *StatementsAccount) SetAccountType(v string) {
	o.AccountType = v
}

// GetStatements returns the Statements field value
func (o *StatementsAccount) GetStatements() []StatementsStatement {
	if o == nil {
		var ret []StatementsStatement
		return ret
	}

	return o.Statements
}

// GetStatementsOk returns a tuple with the Statements field value
// and a boolean to check if the value has been set.
func (o *StatementsAccount) GetStatementsOk() (*[]StatementsStatement, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Statements, true
}

// SetStatements sets field value
func (o *StatementsAccount) SetStatements(v []StatementsStatement) {
	o.Statements = v
}

func (o StatementsAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_id"] = o.AccountId
	}
	if true {
		toSerialize["account_name"] = o.AccountName
	}
	if true {
		toSerialize["account_type"] = o.AccountType
	}
	if true {
		toSerialize["statements"] = o.Statements
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StatementsAccount) UnmarshalJSON(bytes []byte) (err error) {
	varStatementsAccount := _StatementsAccount{}

	if err = json.Unmarshal(bytes, &varStatementsAccount); err == nil {
		*o = StatementsAccount(varStatementsAccount)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "account_name")
		delete(additionalProperties, "account_type")
		delete(additionalProperties, "statements")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStatementsAccount struct {
	value *StatementsAccount
	isSet bool
}

func (v NullableStatementsAccount) Get() *StatementsAccount {
	return v.value
}

func (v *NullableStatementsAccount) Set(val *StatementsAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementsAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementsAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementsAccount(val *StatementsAccount) *NullableStatementsAccount {
	return &NullableStatementsAccount{value: val, isSet: true}
}

func (v NullableStatementsAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementsAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


