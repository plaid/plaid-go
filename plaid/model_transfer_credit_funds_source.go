/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.385.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// TransferCreditFundsSource Specifies the source of funds for the transfer. Only valid for `credit` transfers, and defaults to `sweep` if not specified. This field is not specified for `debit` transfers.  `sweep` - Sweep funds from your funding account `prefunded_rtp_credits` - Use your prefunded RTP credit balance with Plaid `prefunded_ach_credits` - Use your prefunded ACH credit balance with Plaid
type TransferCreditFundsSource string

var _ = fmt.Printf

// List of TransferCreditFundsSource
const (
	TRANSFERCREDITFUNDSSOURCE_SWEEP TransferCreditFundsSource = "sweep"
	TRANSFERCREDITFUNDSSOURCE_PREFUNDED_RTP_CREDITS TransferCreditFundsSource = "prefunded_rtp_credits"
	TRANSFERCREDITFUNDSSOURCE_PREFUNDED_ACH_CREDITS TransferCreditFundsSource = "prefunded_ach_credits"
	TRANSFERCREDITFUNDSSOURCE_NULL TransferCreditFundsSource = "null"
)

var allowedTransferCreditFundsSourceEnumValues = []TransferCreditFundsSource{
	"sweep",
	"prefunded_rtp_credits",
	"prefunded_ach_credits",
	"null",
}

func (v *TransferCreditFundsSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := TransferCreditFundsSource(value)


	*v = enumTypeValue
	return nil
}

// NewTransferCreditFundsSourceFromValue returns a pointer to a valid TransferCreditFundsSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferCreditFundsSourceFromValue(v string) (*TransferCreditFundsSource, error) {
	ev := TransferCreditFundsSource(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferCreditFundsSource) IsValid() bool {
	for _, existing := range allowedTransferCreditFundsSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferCreditFundsSource value
func (v TransferCreditFundsSource) Ptr() *TransferCreditFundsSource {
	return &v
}

type NullableTransferCreditFundsSource struct {
	value *TransferCreditFundsSource
	isSet bool
}

func (v NullableTransferCreditFundsSource) Get() *TransferCreditFundsSource {
	return v.value
}

func (v *NullableTransferCreditFundsSource) Set(val *TransferCreditFundsSource) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferCreditFundsSource) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferCreditFundsSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferCreditFundsSource(val *TransferCreditFundsSource) *NullableTransferCreditFundsSource {
	return &NullableTransferCreditFundsSource{value: val, isSet: true}
}

func (v NullableTransferCreditFundsSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferCreditFundsSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

