/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.641.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// ACHClass Specifies the use case of the transfer. Required for transfers on an ACH network. For more details, see [ACH SEC codes](https://plaid.com/docs/transfer/creating-transfers/#ach-sec-codes).  Codes supported for credits: `ccd`, `ppd` Codes supported for debits: `ccd`, `tel`, `web`  `\"ccd\"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts  `\"ppd\"` - Prearranged Payment or Deposit - The transfer is part of a pre-existing relationship with a consumer. Authorization was obtained in writing either in person or via an electronic document signing, e.g. Docusign, by the consumer. Can be used for credits or debits.  `\"web\"` - Internet-Initiated Entry. The transfer debits a consumerâ€™s bank account. Authorization from the consumer is obtained over the Internet (e.g. a web or mobile application). Can be used for single debits or recurring debits.  `\"tel\"` - Telephone-Initiated Entry. The transfer debits a consumer. Debit authorization has been received orally over the telephone via a recorded call.
type ACHClass string

var _ = fmt.Printf

// List of ACHClass
const (
	ACHCLASS_CCD ACHClass = "ccd"
	ACHCLASS_PPD ACHClass = "ppd"
	ACHCLASS_TEL ACHClass = "tel"
	ACHCLASS_WEB ACHClass = "web"
)

var allowedACHClassEnumValues = []ACHClass{
	"ccd",
	"ppd",
	"tel",
	"web",
}

func (v *ACHClass) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := ACHClass(value)


	*v = enumTypeValue
	return nil
}

// NewACHClassFromValue returns a pointer to a valid ACHClass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewACHClassFromValue(v string) (*ACHClass, error) {
	ev := ACHClass(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ACHClass) IsValid() bool {
	for _, existing := range allowedACHClassEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ACHClass value
func (v ACHClass) Ptr() *ACHClass {
	return &v
}

type NullableACHClass struct {
	value *ACHClass
	isSet bool
}

func (v NullableACHClass) Get() *ACHClass {
	return v.value
}

func (v *NullableACHClass) Set(val *ACHClass) {
	v.value = val
	v.isSet = true
}

func (v NullableACHClass) IsSet() bool {
	return v.isSet
}

func (v *NullableACHClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACHClass(val *ACHClass) *NullableACHClass {
	return &NullableACHClass{value: val, isSet: true}
}

func (v NullableACHClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACHClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

