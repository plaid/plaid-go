/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.205.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// DisbursementLimits Requested disbursement (i.e. sending money) limits for the end customer.
type DisbursementLimits struct {
	// Average disbursement amount in a single transaction, in dollars.
	AverageAmount int32 `json:"average_amount"`
	// Maximum disbursement amount in a single transaction, in dollars.
	MaximumAmount int32 `json:"maximum_amount"`
	// Monthly disbursement amount, in dollars.
	MonthlyAmount int32 `json:"monthly_amount"`
	AdditionalProperties map[string]interface{}
}

type _DisbursementLimits DisbursementLimits

// NewDisbursementLimits instantiates a new DisbursementLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisbursementLimits(averageAmount int32, maximumAmount int32, monthlyAmount int32) *DisbursementLimits {
	this := DisbursementLimits{}
	this.AverageAmount = averageAmount
	this.MaximumAmount = maximumAmount
	this.MonthlyAmount = monthlyAmount
	return &this
}

// NewDisbursementLimitsWithDefaults instantiates a new DisbursementLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisbursementLimitsWithDefaults() *DisbursementLimits {
	this := DisbursementLimits{}
	return &this
}

// GetAverageAmount returns the AverageAmount field value
func (o *DisbursementLimits) GetAverageAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AverageAmount
}

// GetAverageAmountOk returns a tuple with the AverageAmount field value
// and a boolean to check if the value has been set.
func (o *DisbursementLimits) GetAverageAmountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AverageAmount, true
}

// SetAverageAmount sets field value
func (o *DisbursementLimits) SetAverageAmount(v int32) {
	o.AverageAmount = v
}

// GetMaximumAmount returns the MaximumAmount field value
func (o *DisbursementLimits) GetMaximumAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaximumAmount
}

// GetMaximumAmountOk returns a tuple with the MaximumAmount field value
// and a boolean to check if the value has been set.
func (o *DisbursementLimits) GetMaximumAmountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MaximumAmount, true
}

// SetMaximumAmount sets field value
func (o *DisbursementLimits) SetMaximumAmount(v int32) {
	o.MaximumAmount = v
}

// GetMonthlyAmount returns the MonthlyAmount field value
func (o *DisbursementLimits) GetMonthlyAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MonthlyAmount
}

// GetMonthlyAmountOk returns a tuple with the MonthlyAmount field value
// and a boolean to check if the value has been set.
func (o *DisbursementLimits) GetMonthlyAmountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MonthlyAmount, true
}

// SetMonthlyAmount sets field value
func (o *DisbursementLimits) SetMonthlyAmount(v int32) {
	o.MonthlyAmount = v
}

func (o DisbursementLimits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["average_amount"] = o.AverageAmount
	}
	if true {
		toSerialize["maximum_amount"] = o.MaximumAmount
	}
	if true {
		toSerialize["monthly_amount"] = o.MonthlyAmount
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DisbursementLimits) UnmarshalJSON(bytes []byte) (err error) {
	varDisbursementLimits := _DisbursementLimits{}

	if err = json.Unmarshal(bytes, &varDisbursementLimits); err == nil {
		*o = DisbursementLimits(varDisbursementLimits)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "average_amount")
		delete(additionalProperties, "maximum_amount")
		delete(additionalProperties, "monthly_amount")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDisbursementLimits struct {
	value *DisbursementLimits
	isSet bool
}

func (v NullableDisbursementLimits) Get() *DisbursementLimits {
	return v.value
}

func (v *NullableDisbursementLimits) Set(val *DisbursementLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableDisbursementLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableDisbursementLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisbursementLimits(val *DisbursementLimits) *NullableDisbursementLimits {
	return &NullableDisbursementLimits{value: val, isSet: true}
}

func (v NullableDisbursementLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisbursementLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


