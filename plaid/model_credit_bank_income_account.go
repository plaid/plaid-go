/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.128.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CreditBankIncomeAccount The Item's accounts that have Bank Income data.
type CreditBankIncomeAccount struct {
	// Plaid's unique identifier for the account.
	AccountId *string `json:"account_id,omitempty"`
	// The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
	Mask NullableString `json:"mask,omitempty"`
	// The name of the bank account.
	Name *string `json:"name,omitempty"`
	// The official name of the bank account.
	OfficialName NullableString `json:"official_name,omitempty"`
	Subtype *DepositoryAccountSubtype `json:"subtype,omitempty"`
	Type *CreditBankIncomeAccountType `json:"type,omitempty"`
	Owners *[]Owner `json:"owners,omitempty"`
}

// NewCreditBankIncomeAccount instantiates a new CreditBankIncomeAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditBankIncomeAccount() *CreditBankIncomeAccount {
	this := CreditBankIncomeAccount{}
	return &this
}

// NewCreditBankIncomeAccountWithDefaults instantiates a new CreditBankIncomeAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditBankIncomeAccountWithDefaults() *CreditBankIncomeAccount {
	this := CreditBankIncomeAccount{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *CreditBankIncomeAccount) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditBankIncomeAccount) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *CreditBankIncomeAccount) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *CreditBankIncomeAccount) SetAccountId(v string) {
	o.AccountId = &v
}

// GetMask returns the Mask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreditBankIncomeAccount) GetMask() string {
	if o == nil || o.Mask.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mask.Get()
}

// GetMaskOk returns a tuple with the Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditBankIncomeAccount) GetMaskOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mask.Get(), o.Mask.IsSet()
}

// HasMask returns a boolean if a field has been set.
func (o *CreditBankIncomeAccount) HasMask() bool {
	if o != nil && o.Mask.IsSet() {
		return true
	}

	return false
}

// SetMask gets a reference to the given NullableString and assigns it to the Mask field.
func (o *CreditBankIncomeAccount) SetMask(v string) {
	o.Mask.Set(&v)
}
// SetMaskNil sets the value for Mask to be an explicit nil
func (o *CreditBankIncomeAccount) SetMaskNil() {
	o.Mask.Set(nil)
}

// UnsetMask ensures that no value is present for Mask, not even an explicit nil
func (o *CreditBankIncomeAccount) UnsetMask() {
	o.Mask.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreditBankIncomeAccount) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditBankIncomeAccount) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreditBankIncomeAccount) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreditBankIncomeAccount) SetName(v string) {
	o.Name = &v
}

// GetOfficialName returns the OfficialName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreditBankIncomeAccount) GetOfficialName() string {
	if o == nil || o.OfficialName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OfficialName.Get()
}

// GetOfficialNameOk returns a tuple with the OfficialName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreditBankIncomeAccount) GetOfficialNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OfficialName.Get(), o.OfficialName.IsSet()
}

// HasOfficialName returns a boolean if a field has been set.
func (o *CreditBankIncomeAccount) HasOfficialName() bool {
	if o != nil && o.OfficialName.IsSet() {
		return true
	}

	return false
}

// SetOfficialName gets a reference to the given NullableString and assigns it to the OfficialName field.
func (o *CreditBankIncomeAccount) SetOfficialName(v string) {
	o.OfficialName.Set(&v)
}
// SetOfficialNameNil sets the value for OfficialName to be an explicit nil
func (o *CreditBankIncomeAccount) SetOfficialNameNil() {
	o.OfficialName.Set(nil)
}

// UnsetOfficialName ensures that no value is present for OfficialName, not even an explicit nil
func (o *CreditBankIncomeAccount) UnsetOfficialName() {
	o.OfficialName.Unset()
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *CreditBankIncomeAccount) GetSubtype() DepositoryAccountSubtype {
	if o == nil || o.Subtype == nil {
		var ret DepositoryAccountSubtype
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditBankIncomeAccount) GetSubtypeOk() (*DepositoryAccountSubtype, bool) {
	if o == nil || o.Subtype == nil {
		return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *CreditBankIncomeAccount) HasSubtype() bool {
	if o != nil && o.Subtype != nil {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given DepositoryAccountSubtype and assigns it to the Subtype field.
func (o *CreditBankIncomeAccount) SetSubtype(v DepositoryAccountSubtype) {
	o.Subtype = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreditBankIncomeAccount) GetType() CreditBankIncomeAccountType {
	if o == nil || o.Type == nil {
		var ret CreditBankIncomeAccountType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditBankIncomeAccount) GetTypeOk() (*CreditBankIncomeAccountType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreditBankIncomeAccount) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given CreditBankIncomeAccountType and assigns it to the Type field.
func (o *CreditBankIncomeAccount) SetType(v CreditBankIncomeAccountType) {
	o.Type = &v
}

// GetOwners returns the Owners field value if set, zero value otherwise.
func (o *CreditBankIncomeAccount) GetOwners() []Owner {
	if o == nil || o.Owners == nil {
		var ret []Owner
		return ret
	}
	return *o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditBankIncomeAccount) GetOwnersOk() (*[]Owner, bool) {
	if o == nil || o.Owners == nil {
		return nil, false
	}
	return o.Owners, true
}

// HasOwners returns a boolean if a field has been set.
func (o *CreditBankIncomeAccount) HasOwners() bool {
	if o != nil && o.Owners != nil {
		return true
	}

	return false
}

// SetOwners gets a reference to the given []Owner and assigns it to the Owners field.
func (o *CreditBankIncomeAccount) SetOwners(v []Owner) {
	o.Owners = &v
}

func (o CreditBankIncomeAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.Mask.IsSet() {
		toSerialize["mask"] = o.Mask.Get()
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OfficialName.IsSet() {
		toSerialize["official_name"] = o.OfficialName.Get()
	}
	if o.Subtype != nil {
		toSerialize["subtype"] = o.Subtype
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Owners != nil {
		toSerialize["owners"] = o.Owners
	}
	return json.Marshal(toSerialize)
}

type NullableCreditBankIncomeAccount struct {
	value *CreditBankIncomeAccount
	isSet bool
}

func (v NullableCreditBankIncomeAccount) Get() *CreditBankIncomeAccount {
	return v.value
}

func (v *NullableCreditBankIncomeAccount) Set(val *CreditBankIncomeAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditBankIncomeAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditBankIncomeAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditBankIncomeAccount(val *CreditBankIncomeAccount) *NullableCreditBankIncomeAccount {
	return &NullableCreditBankIncomeAccount{value: val, isSet: true}
}

func (v NullableCreditBankIncomeAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditBankIncomeAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


