/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.482.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// TransactionsRecurringUpdateInput TransactionsRecurringUpdateInput defines a single operation to the `/transactions/recurring/streams/update` endpoint.
type TransactionsRecurringUpdateInput struct {
	// ID of the stream that all the transactions will be added in to.
	StreamId string `json:"stream_id"`
	// IDs of all the transactions that will be added into the stream. If any transaction currently exist in another stream, it will be removed from the other stream.
	TransactionIds []string `json:"transaction_ids"`
}

// NewTransactionsRecurringUpdateInput instantiates a new TransactionsRecurringUpdateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionsRecurringUpdateInput(streamId string, transactionIds []string) *TransactionsRecurringUpdateInput {
	this := TransactionsRecurringUpdateInput{}
	this.StreamId = streamId
	this.TransactionIds = transactionIds
	return &this
}

// NewTransactionsRecurringUpdateInputWithDefaults instantiates a new TransactionsRecurringUpdateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsRecurringUpdateInputWithDefaults() *TransactionsRecurringUpdateInput {
	this := TransactionsRecurringUpdateInput{}
	return &this
}

// GetStreamId returns the StreamId field value
func (o *TransactionsRecurringUpdateInput) GetStreamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamId
}

// GetStreamIdOk returns a tuple with the StreamId field value
// and a boolean to check if the value has been set.
func (o *TransactionsRecurringUpdateInput) GetStreamIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StreamId, true
}

// SetStreamId sets field value
func (o *TransactionsRecurringUpdateInput) SetStreamId(v string) {
	o.StreamId = v
}

// GetTransactionIds returns the TransactionIds field value
func (o *TransactionsRecurringUpdateInput) GetTransactionIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TransactionIds
}

// GetTransactionIdsOk returns a tuple with the TransactionIds field value
// and a boolean to check if the value has been set.
func (o *TransactionsRecurringUpdateInput) GetTransactionIdsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransactionIds, true
}

// SetTransactionIds sets field value
func (o *TransactionsRecurringUpdateInput) SetTransactionIds(v []string) {
	o.TransactionIds = v
}

func (o TransactionsRecurringUpdateInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["stream_id"] = o.StreamId
	}
	if true {
		toSerialize["transaction_ids"] = o.TransactionIds
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionsRecurringUpdateInput struct {
	value *TransactionsRecurringUpdateInput
	isSet bool
}

func (v NullableTransactionsRecurringUpdateInput) Get() *TransactionsRecurringUpdateInput {
	return v.value
}

func (v *NullableTransactionsRecurringUpdateInput) Set(val *TransactionsRecurringUpdateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionsRecurringUpdateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionsRecurringUpdateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionsRecurringUpdateInput(val *TransactionsRecurringUpdateInput) *NullableTransactionsRecurringUpdateInput {
	return &NullableTransactionsRecurringUpdateInput{value: val, isSet: true}
}

func (v NullableTransactionsRecurringUpdateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionsRecurringUpdateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


