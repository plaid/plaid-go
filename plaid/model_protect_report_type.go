/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// ProtectReportType The type of incident being reported.  `USER_ACCOUNT_TAKEOVER` - Indicates that a legitimate user's account was accessed or controlled by an unauthorized party.  `FALSE_IDENTITY` - Indicates that a user created an account using stolen or fabricated identity information.  `STOLEN_IDENTITY` - Indicates that a user created an account using identity information belonging to a real individual without their consent.  `SYNTHETIC_IDENTITY` - Indicates that a user created an account using a fake or partially fabricated identity (e.g., combining real and fake information to form a new persona).  `MULTIPLE_USER_ACCOUNTS` - Indicates that the same individual is operating multiple accounts in violation of policy.  `SCAM_VICTIM` - Indicates that the user was tricked into authorizing or sending funds as part of a scam.  `BANK_ACCOUNT_TAKEOVER` - Indicates that a user's linked bank account was accessed or misused by an unauthorized party.  `BANK_CONNECTION_REVOKED` - Indicates that a linked bank account connection was revoked by the financial institution, often due to suspected misuse, fraud, or security concerns.  `CARD_TESTING` - Indicates that a card was used in small or repeated transactions to test its validity.  `UNAUTHORIZED_TRANSACTION` - Indicates that a transaction was made without the user's consent or authorization.  `CARD_CHARGEBACK` - Indicates that a card transaction was reversed via a chargeback claim.  `ACH_RETURN` - Indicates that an ACH transaction was returned or reversed by the bank.  `DISPUTE` - Indicates that a user filed a dispute regarding a transaction or account activity.  `FIRST_PARTY_FRAUD` - Indicates that a user intentionally misrepresented themselves or their actions for financial gain.  `MISSED_PAYMENT` - Indicates that a user failed to make a required payment on time.  `LOAN_STACKING` - Indicates that a user applied for or took out multiple loans simultaneously beyond their ability to repay.  `MONEY_LAUNDERING` - Indicates that funds are being moved through accounts to obscure their illicit origin.  `NO_FRAUD` - Indicates that an investigation determined no fraudulent activity occurred on user/event (positive label)  `OTHER` - Indicates that the case involves fraud or financial risk not covered by other report types. Requires notes describing the report.
type ProtectReportType string

var _ = fmt.Printf

// List of ProtectReportType
const (
	PROTECTREPORTTYPE_USER_ACCOUNT_TAKEOVER ProtectReportType = "USER_ACCOUNT_TAKEOVER"
	PROTECTREPORTTYPE_FALSE_IDENTITY ProtectReportType = "FALSE_IDENTITY"
	PROTECTREPORTTYPE_STOLEN_IDENTITY ProtectReportType = "STOLEN_IDENTITY"
	PROTECTREPORTTYPE_SYNTHETIC_IDENTITY ProtectReportType = "SYNTHETIC_IDENTITY"
	PROTECTREPORTTYPE_MULTIPLE_USER_ACCOUNTS ProtectReportType = "MULTIPLE_USER_ACCOUNTS"
	PROTECTREPORTTYPE_SCAM_VICTIM ProtectReportType = "SCAM_VICTIM"
	PROTECTREPORTTYPE_BANK_ACCOUNT_TAKEOVER ProtectReportType = "BANK_ACCOUNT_TAKEOVER"
	PROTECTREPORTTYPE_BANK_CONNECTION_REVOKED ProtectReportType = "BANK_CONNECTION_REVOKED"
	PROTECTREPORTTYPE_CARD_TESTING ProtectReportType = "CARD_TESTING"
	PROTECTREPORTTYPE_UNAUTHORIZED_TRANSACTION ProtectReportType = "UNAUTHORIZED_TRANSACTION"
	PROTECTREPORTTYPE_CARD_CHARGEBACK ProtectReportType = "CARD_CHARGEBACK"
	PROTECTREPORTTYPE_ACH_RETURN ProtectReportType = "ACH_RETURN"
	PROTECTREPORTTYPE_DISPUTE ProtectReportType = "DISPUTE"
	PROTECTREPORTTYPE_FIRST_PARTY_FRAUD ProtectReportType = "FIRST_PARTY_FRAUD"
	PROTECTREPORTTYPE_MISSED_PAYMENT ProtectReportType = "MISSED_PAYMENT"
	PROTECTREPORTTYPE_LOAN_STACKING ProtectReportType = "LOAN_STACKING"
	PROTECTREPORTTYPE_MONEY_LAUNDERING ProtectReportType = "MONEY_LAUNDERING"
	PROTECTREPORTTYPE_NO_FRAUD ProtectReportType = "NO_FRAUD"
	PROTECTREPORTTYPE_OTHER ProtectReportType = "OTHER"
)

var allowedProtectReportTypeEnumValues = []ProtectReportType{
	"USER_ACCOUNT_TAKEOVER",
	"FALSE_IDENTITY",
	"STOLEN_IDENTITY",
	"SYNTHETIC_IDENTITY",
	"MULTIPLE_USER_ACCOUNTS",
	"SCAM_VICTIM",
	"BANK_ACCOUNT_TAKEOVER",
	"BANK_CONNECTION_REVOKED",
	"CARD_TESTING",
	"UNAUTHORIZED_TRANSACTION",
	"CARD_CHARGEBACK",
	"ACH_RETURN",
	"DISPUTE",
	"FIRST_PARTY_FRAUD",
	"MISSED_PAYMENT",
	"LOAN_STACKING",
	"MONEY_LAUNDERING",
	"NO_FRAUD",
	"OTHER",
}

func (v *ProtectReportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := ProtectReportType(value)


	*v = enumTypeValue
	return nil
}

// NewProtectReportTypeFromValue returns a pointer to a valid ProtectReportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtectReportTypeFromValue(v string) (*ProtectReportType, error) {
	ev := ProtectReportType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtectReportType) IsValid() bool {
	for _, existing := range allowedProtectReportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProtectReportType value
func (v ProtectReportType) Ptr() *ProtectReportType {
	return &v
}

type NullableProtectReportType struct {
	value *ProtectReportType
	isSet bool
}

func (v NullableProtectReportType) Get() *ProtectReportType {
	return v.value
}

func (v *NullableProtectReportType) Set(val *ProtectReportType) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectReportType) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectReportType(val *ProtectReportType) *NullableProtectReportType {
	return &NullableProtectReportType{value: val, isSet: true}
}

func (v NullableProtectReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

