/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// ItemWithConsentFields Metadata about the Item
type ItemWithConsentFields struct {
	// The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive.
	ItemId string `json:"item_id"`
	// The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits.
	InstitutionId NullableString `json:"institution_id,omitempty"`
	// The URL registered to receive webhooks for the Item.
	Webhook NullableString `json:"webhook"`
	Error NullablePlaidError `json:"error"`
	// A list of products available for the Item that have not yet been accessed. The contents of this array will be mutually exclusive with `billed_products`.
	AvailableProducts []Products `json:"available_products"`
	// A list of products that have been billed for the Item. The contents of this array will be mutually exclusive with `available_products`. Note - `billed_products` is populated in all environments but only requests in Production are billed. Also note that products that are billed on a pay-per-call basis rather than a pay-per-Item basis, such as `balance`, will not appear here. 
	BilledProducts []Products `json:"billed_products"`
	// A list of products added to the Item. In almost all cases, this will be the same as the `billed_products` field. For some products, it is possible for the product to be added to an Item but not yet billed (e.g. Assets, before `/asset_report/create` has been called, or Auth or Identity when added as Optional Products but before their endpoints have been called), in which case the product may appear in `products` but not in `billed_products`. 
	Products *[]Products `json:"products,omitempty"`
	// A list of products that the user has consented to for the Item via [Data Transparency Messaging](/docs/link/data-transparency-messaging-migration-guide). This will consist of all products where both of the following are true: the user has consented to the required data scopes for that product and you have Production access for that product. 
	ConsentedProducts *[]Products `json:"consented_products,omitempty"`
	// The date and time at which the Item's access consent will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format
	ConsentExpirationTime NullableTime `json:"consent_expiration_time"`
	// Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.  `background` - Item can be updated in the background  `user_present_required` - Item requires user interaction to be updated
	UpdateType string `json:"update_type"`
	// The date and time when the Item was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A list of use cases that the user has consented to for the Item via [Data Transparency Messaging](/docs/link/data-transparency-messaging-migration-guide).   You can see the full list of use cases or update the list of use cases to request at any time via the Link Customization section of the [Plaid Dashboard](https://dashboard.plaid.com/link/data-transparency-v5).
	ConsentedUseCases *[]string `json:"consented_use_cases,omitempty"`
	// A list of data scopes that the user has consented to for the Item via [Data Transparency Messaging](/docs/link/data-transparency-messaging-migration-guide). These are based on the `consented_products`; see the [full mapping](/docs/link/data-transparency-messaging-migration-guide/#data-scopes-by-product) of data scopes and products.
	ConsentedDataScopes *[]ItemConsentedDataScope `json:"consented_data_scopes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ItemWithConsentFields ItemWithConsentFields

// NewItemWithConsentFields instantiates a new ItemWithConsentFields object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemWithConsentFields(itemId string, webhook NullableString, error_ NullablePlaidError, availableProducts []Products, billedProducts []Products, consentExpirationTime NullableTime, updateType string) *ItemWithConsentFields {
	this := ItemWithConsentFields{}
	this.ItemId = itemId
	this.Webhook = webhook
	this.Error = error_
	this.AvailableProducts = availableProducts
	this.BilledProducts = billedProducts
	this.ConsentExpirationTime = consentExpirationTime
	this.UpdateType = updateType
	return &this
}

// NewItemWithConsentFieldsWithDefaults instantiates a new ItemWithConsentFields object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemWithConsentFieldsWithDefaults() *ItemWithConsentFields {
	this := ItemWithConsentFields{}
	return &this
}

// GetItemId returns the ItemId field value
func (o *ItemWithConsentFields) GetItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFields) GetItemIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *ItemWithConsentFields) SetItemId(v string) {
	o.ItemId = v
}

// GetInstitutionId returns the InstitutionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemWithConsentFields) GetInstitutionId() string {
	if o == nil || o.InstitutionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.InstitutionId.Get()
}

// GetInstitutionIdOk returns a tuple with the InstitutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemWithConsentFields) GetInstitutionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstitutionId.Get(), o.InstitutionId.IsSet()
}

// HasInstitutionId returns a boolean if a field has been set.
func (o *ItemWithConsentFields) HasInstitutionId() bool {
	if o != nil && o.InstitutionId.IsSet() {
		return true
	}

	return false
}

// SetInstitutionId gets a reference to the given NullableString and assigns it to the InstitutionId field.
func (o *ItemWithConsentFields) SetInstitutionId(v string) {
	o.InstitutionId.Set(&v)
}
// SetInstitutionIdNil sets the value for InstitutionId to be an explicit nil
func (o *ItemWithConsentFields) SetInstitutionIdNil() {
	o.InstitutionId.Set(nil)
}

// UnsetInstitutionId ensures that no value is present for InstitutionId, not even an explicit nil
func (o *ItemWithConsentFields) UnsetInstitutionId() {
	o.InstitutionId.Unset()
}

// GetWebhook returns the Webhook field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ItemWithConsentFields) GetWebhook() string {
	if o == nil || o.Webhook.Get() == nil {
		var ret string
		return ret
	}

	return *o.Webhook.Get()
}

// GetWebhookOk returns a tuple with the Webhook field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemWithConsentFields) GetWebhookOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Webhook.Get(), o.Webhook.IsSet()
}

// SetWebhook sets field value
func (o *ItemWithConsentFields) SetWebhook(v string) {
	o.Webhook.Set(&v)
}

// GetError returns the Error field value
// If the value is explicit nil, the zero value for PlaidError will be returned
func (o *ItemWithConsentFields) GetError() PlaidError {
	if o == nil || o.Error.Get() == nil {
		var ret PlaidError
		return ret
	}

	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemWithConsentFields) GetErrorOk() (*PlaidError, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// SetError sets field value
func (o *ItemWithConsentFields) SetError(v PlaidError) {
	o.Error.Set(&v)
}

// GetAvailableProducts returns the AvailableProducts field value
func (o *ItemWithConsentFields) GetAvailableProducts() []Products {
	if o == nil {
		var ret []Products
		return ret
	}

	return o.AvailableProducts
}

// GetAvailableProductsOk returns a tuple with the AvailableProducts field value
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFields) GetAvailableProductsOk() (*[]Products, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AvailableProducts, true
}

// SetAvailableProducts sets field value
func (o *ItemWithConsentFields) SetAvailableProducts(v []Products) {
	o.AvailableProducts = v
}

// GetBilledProducts returns the BilledProducts field value
func (o *ItemWithConsentFields) GetBilledProducts() []Products {
	if o == nil {
		var ret []Products
		return ret
	}

	return o.BilledProducts
}

// GetBilledProductsOk returns a tuple with the BilledProducts field value
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFields) GetBilledProductsOk() (*[]Products, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BilledProducts, true
}

// SetBilledProducts sets field value
func (o *ItemWithConsentFields) SetBilledProducts(v []Products) {
	o.BilledProducts = v
}

// GetProducts returns the Products field value if set, zero value otherwise.
func (o *ItemWithConsentFields) GetProducts() []Products {
	if o == nil || o.Products == nil {
		var ret []Products
		return ret
	}
	return *o.Products
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFields) GetProductsOk() (*[]Products, bool) {
	if o == nil || o.Products == nil {
		return nil, false
	}
	return o.Products, true
}

// HasProducts returns a boolean if a field has been set.
func (o *ItemWithConsentFields) HasProducts() bool {
	if o != nil && o.Products != nil {
		return true
	}

	return false
}

// SetProducts gets a reference to the given []Products and assigns it to the Products field.
func (o *ItemWithConsentFields) SetProducts(v []Products) {
	o.Products = &v
}

// GetConsentedProducts returns the ConsentedProducts field value if set, zero value otherwise.
func (o *ItemWithConsentFields) GetConsentedProducts() []Products {
	if o == nil || o.ConsentedProducts == nil {
		var ret []Products
		return ret
	}
	return *o.ConsentedProducts
}

// GetConsentedProductsOk returns a tuple with the ConsentedProducts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFields) GetConsentedProductsOk() (*[]Products, bool) {
	if o == nil || o.ConsentedProducts == nil {
		return nil, false
	}
	return o.ConsentedProducts, true
}

// HasConsentedProducts returns a boolean if a field has been set.
func (o *ItemWithConsentFields) HasConsentedProducts() bool {
	if o != nil && o.ConsentedProducts != nil {
		return true
	}

	return false
}

// SetConsentedProducts gets a reference to the given []Products and assigns it to the ConsentedProducts field.
func (o *ItemWithConsentFields) SetConsentedProducts(v []Products) {
	o.ConsentedProducts = &v
}

// GetConsentExpirationTime returns the ConsentExpirationTime field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ItemWithConsentFields) GetConsentExpirationTime() time.Time {
	if o == nil || o.ConsentExpirationTime.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.ConsentExpirationTime.Get()
}

// GetConsentExpirationTimeOk returns a tuple with the ConsentExpirationTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemWithConsentFields) GetConsentExpirationTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConsentExpirationTime.Get(), o.ConsentExpirationTime.IsSet()
}

// SetConsentExpirationTime sets field value
func (o *ItemWithConsentFields) SetConsentExpirationTime(v time.Time) {
	o.ConsentExpirationTime.Set(&v)
}

// GetUpdateType returns the UpdateType field value
func (o *ItemWithConsentFields) GetUpdateType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdateType
}

// GetUpdateTypeOk returns a tuple with the UpdateType field value
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFields) GetUpdateTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpdateType, true
}

// SetUpdateType sets field value
func (o *ItemWithConsentFields) SetUpdateType(v string) {
	o.UpdateType = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ItemWithConsentFields) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFields) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ItemWithConsentFields) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ItemWithConsentFields) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetConsentedUseCases returns the ConsentedUseCases field value if set, zero value otherwise.
func (o *ItemWithConsentFields) GetConsentedUseCases() []string {
	if o == nil || o.ConsentedUseCases == nil {
		var ret []string
		return ret
	}
	return *o.ConsentedUseCases
}

// GetConsentedUseCasesOk returns a tuple with the ConsentedUseCases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFields) GetConsentedUseCasesOk() (*[]string, bool) {
	if o == nil || o.ConsentedUseCases == nil {
		return nil, false
	}
	return o.ConsentedUseCases, true
}

// HasConsentedUseCases returns a boolean if a field has been set.
func (o *ItemWithConsentFields) HasConsentedUseCases() bool {
	if o != nil && o.ConsentedUseCases != nil {
		return true
	}

	return false
}

// SetConsentedUseCases gets a reference to the given []string and assigns it to the ConsentedUseCases field.
func (o *ItemWithConsentFields) SetConsentedUseCases(v []string) {
	o.ConsentedUseCases = &v
}

// GetConsentedDataScopes returns the ConsentedDataScopes field value if set, zero value otherwise.
func (o *ItemWithConsentFields) GetConsentedDataScopes() []ItemConsentedDataScope {
	if o == nil || o.ConsentedDataScopes == nil {
		var ret []ItemConsentedDataScope
		return ret
	}
	return *o.ConsentedDataScopes
}

// GetConsentedDataScopesOk returns a tuple with the ConsentedDataScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFields) GetConsentedDataScopesOk() (*[]ItemConsentedDataScope, bool) {
	if o == nil || o.ConsentedDataScopes == nil {
		return nil, false
	}
	return o.ConsentedDataScopes, true
}

// HasConsentedDataScopes returns a boolean if a field has been set.
func (o *ItemWithConsentFields) HasConsentedDataScopes() bool {
	if o != nil && o.ConsentedDataScopes != nil {
		return true
	}

	return false
}

// SetConsentedDataScopes gets a reference to the given []ItemConsentedDataScope and assigns it to the ConsentedDataScopes field.
func (o *ItemWithConsentFields) SetConsentedDataScopes(v []ItemConsentedDataScope) {
	o.ConsentedDataScopes = &v
}

func (o ItemWithConsentFields) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["item_id"] = o.ItemId
	}
	if o.InstitutionId.IsSet() {
		toSerialize["institution_id"] = o.InstitutionId.Get()
	}
	if true {
		toSerialize["webhook"] = o.Webhook.Get()
	}
	if true {
		toSerialize["error"] = o.Error.Get()
	}
	if true {
		toSerialize["available_products"] = o.AvailableProducts
	}
	if true {
		toSerialize["billed_products"] = o.BilledProducts
	}
	if o.Products != nil {
		toSerialize["products"] = o.Products
	}
	if o.ConsentedProducts != nil {
		toSerialize["consented_products"] = o.ConsentedProducts
	}
	if true {
		toSerialize["consent_expiration_time"] = o.ConsentExpirationTime.Get()
	}
	if true {
		toSerialize["update_type"] = o.UpdateType
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.ConsentedUseCases != nil {
		toSerialize["consented_use_cases"] = o.ConsentedUseCases
	}
	if o.ConsentedDataScopes != nil {
		toSerialize["consented_data_scopes"] = o.ConsentedDataScopes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ItemWithConsentFields) UnmarshalJSON(bytes []byte) (err error) {
	varItemWithConsentFields := _ItemWithConsentFields{}

	if err = json.Unmarshal(bytes, &varItemWithConsentFields); err == nil {
		*o = ItemWithConsentFields(varItemWithConsentFields)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "item_id")
		delete(additionalProperties, "institution_id")
		delete(additionalProperties, "webhook")
		delete(additionalProperties, "error")
		delete(additionalProperties, "available_products")
		delete(additionalProperties, "billed_products")
		delete(additionalProperties, "products")
		delete(additionalProperties, "consented_products")
		delete(additionalProperties, "consent_expiration_time")
		delete(additionalProperties, "update_type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "consented_use_cases")
		delete(additionalProperties, "consented_data_scopes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableItemWithConsentFields struct {
	value *ItemWithConsentFields
	isSet bool
}

func (v NullableItemWithConsentFields) Get() *ItemWithConsentFields {
	return v.value
}

func (v *NullableItemWithConsentFields) Set(val *ItemWithConsentFields) {
	v.value = val
	v.isSet = true
}

func (v NullableItemWithConsentFields) IsSet() bool {
	return v.isSet
}

func (v *NullableItemWithConsentFields) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemWithConsentFields(val *ItemWithConsentFields) *NullableItemWithConsentFields {
	return &NullableItemWithConsentFields{value: val, isSet: true}
}

func (v NullableItemWithConsentFields) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemWithConsentFields) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


