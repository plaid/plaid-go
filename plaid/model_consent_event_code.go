/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// ConsentEventCode Codes describing the object of a consent event.
type ConsentEventCode string

var _ = fmt.Printf

// List of ConsentEventCode
const (
	CONSENTEVENTCODE_PLAID_END_USER_PRIVACY_POLICY ConsentEventCode = "PLAID_END_USER_PRIVACY_POLICY"
	CONSENTEVENTCODE_USE_CASES ConsentEventCode = "USE_CASES"
	CONSENTEVENTCODE_DATA_SCOPES ConsentEventCode = "DATA_SCOPES"
	CONSENTEVENTCODE_ACCOUNT_SCOPES ConsentEventCode = "ACCOUNT_SCOPES"
)

var allowedConsentEventCodeEnumValues = []ConsentEventCode{
	"PLAID_END_USER_PRIVACY_POLICY",
	"USE_CASES",
	"DATA_SCOPES",
	"ACCOUNT_SCOPES",
}

func (v *ConsentEventCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := ConsentEventCode(value)


	*v = enumTypeValue
	return nil
}

// NewConsentEventCodeFromValue returns a pointer to a valid ConsentEventCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConsentEventCodeFromValue(v string) (*ConsentEventCode, error) {
	ev := ConsentEventCode(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConsentEventCode) IsValid() bool {
	for _, existing := range allowedConsentEventCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConsentEventCode value
func (v ConsentEventCode) Ptr() *ConsentEventCode {
	return &v
}

type NullableConsentEventCode struct {
	value *ConsentEventCode
	isSet bool
}

func (v NullableConsentEventCode) Get() *ConsentEventCode {
	return v.value
}

func (v *NullableConsentEventCode) Set(val *ConsentEventCode) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentEventCode) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentEventCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentEventCode(val *ConsentEventCode) *NullableConsentEventCode {
	return &NullableConsentEventCode{value: val, isSet: true}
}

func (v NullableConsentEventCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentEventCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

