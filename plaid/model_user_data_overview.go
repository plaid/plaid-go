/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.496.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// UserDataOverview metadata for the set of insights provided in `TransactionsUserInsightsGetResponse`
type UserDataOverview struct {
	// The total number of transactions.
	TransactionCount int32 `json:"transaction_count"`
	// The date of the oldest transaction processed to generate insights.
	OldestTransactionDate *string `json:"oldest_transaction_date,omitempty"`
	// The date of the newest transaction processed to generate insights.
	NewestTransactionDate *string `json:"newest_transaction_date,omitempty"`
	// The range of days of transactions available.
	DaysAvailable int32 `json:"days_available"`
	// Sum of outflow amounts.
	TotalOutflows float64 `json:"total_outflows"`
	// Sum of inflow amounts.
	TotalInflows float64 `json:"total_inflows"`
	AdditionalProperties map[string]interface{}
}

type _UserDataOverview UserDataOverview

// NewUserDataOverview instantiates a new UserDataOverview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDataOverview(transactionCount int32, daysAvailable int32, totalOutflows float64, totalInflows float64) *UserDataOverview {
	this := UserDataOverview{}
	this.TransactionCount = transactionCount
	this.DaysAvailable = daysAvailable
	this.TotalOutflows = totalOutflows
	this.TotalInflows = totalInflows
	return &this
}

// NewUserDataOverviewWithDefaults instantiates a new UserDataOverview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDataOverviewWithDefaults() *UserDataOverview {
	this := UserDataOverview{}
	return &this
}

// GetTransactionCount returns the TransactionCount field value
func (o *UserDataOverview) GetTransactionCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TransactionCount
}

// GetTransactionCountOk returns a tuple with the TransactionCount field value
// and a boolean to check if the value has been set.
func (o *UserDataOverview) GetTransactionCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransactionCount, true
}

// SetTransactionCount sets field value
func (o *UserDataOverview) SetTransactionCount(v int32) {
	o.TransactionCount = v
}

// GetOldestTransactionDate returns the OldestTransactionDate field value if set, zero value otherwise.
func (o *UserDataOverview) GetOldestTransactionDate() string {
	if o == nil || o.OldestTransactionDate == nil {
		var ret string
		return ret
	}
	return *o.OldestTransactionDate
}

// GetOldestTransactionDateOk returns a tuple with the OldestTransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataOverview) GetOldestTransactionDateOk() (*string, bool) {
	if o == nil || o.OldestTransactionDate == nil {
		return nil, false
	}
	return o.OldestTransactionDate, true
}

// HasOldestTransactionDate returns a boolean if a field has been set.
func (o *UserDataOverview) HasOldestTransactionDate() bool {
	if o != nil && o.OldestTransactionDate != nil {
		return true
	}

	return false
}

// SetOldestTransactionDate gets a reference to the given string and assigns it to the OldestTransactionDate field.
func (o *UserDataOverview) SetOldestTransactionDate(v string) {
	o.OldestTransactionDate = &v
}

// GetNewestTransactionDate returns the NewestTransactionDate field value if set, zero value otherwise.
func (o *UserDataOverview) GetNewestTransactionDate() string {
	if o == nil || o.NewestTransactionDate == nil {
		var ret string
		return ret
	}
	return *o.NewestTransactionDate
}

// GetNewestTransactionDateOk returns a tuple with the NewestTransactionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDataOverview) GetNewestTransactionDateOk() (*string, bool) {
	if o == nil || o.NewestTransactionDate == nil {
		return nil, false
	}
	return o.NewestTransactionDate, true
}

// HasNewestTransactionDate returns a boolean if a field has been set.
func (o *UserDataOverview) HasNewestTransactionDate() bool {
	if o != nil && o.NewestTransactionDate != nil {
		return true
	}

	return false
}

// SetNewestTransactionDate gets a reference to the given string and assigns it to the NewestTransactionDate field.
func (o *UserDataOverview) SetNewestTransactionDate(v string) {
	o.NewestTransactionDate = &v
}

// GetDaysAvailable returns the DaysAvailable field value
func (o *UserDataOverview) GetDaysAvailable() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DaysAvailable
}

// GetDaysAvailableOk returns a tuple with the DaysAvailable field value
// and a boolean to check if the value has been set.
func (o *UserDataOverview) GetDaysAvailableOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DaysAvailable, true
}

// SetDaysAvailable sets field value
func (o *UserDataOverview) SetDaysAvailable(v int32) {
	o.DaysAvailable = v
}

// GetTotalOutflows returns the TotalOutflows field value
func (o *UserDataOverview) GetTotalOutflows() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalOutflows
}

// GetTotalOutflowsOk returns a tuple with the TotalOutflows field value
// and a boolean to check if the value has been set.
func (o *UserDataOverview) GetTotalOutflowsOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TotalOutflows, true
}

// SetTotalOutflows sets field value
func (o *UserDataOverview) SetTotalOutflows(v float64) {
	o.TotalOutflows = v
}

// GetTotalInflows returns the TotalInflows field value
func (o *UserDataOverview) GetTotalInflows() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalInflows
}

// GetTotalInflowsOk returns a tuple with the TotalInflows field value
// and a boolean to check if the value has been set.
func (o *UserDataOverview) GetTotalInflowsOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TotalInflows, true
}

// SetTotalInflows sets field value
func (o *UserDataOverview) SetTotalInflows(v float64) {
	o.TotalInflows = v
}

func (o UserDataOverview) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["transaction_count"] = o.TransactionCount
	}
	if o.OldestTransactionDate != nil {
		toSerialize["oldest_transaction_date"] = o.OldestTransactionDate
	}
	if o.NewestTransactionDate != nil {
		toSerialize["newest_transaction_date"] = o.NewestTransactionDate
	}
	if true {
		toSerialize["days_available"] = o.DaysAvailable
	}
	if true {
		toSerialize["total_outflows"] = o.TotalOutflows
	}
	if true {
		toSerialize["total_inflows"] = o.TotalInflows
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserDataOverview) UnmarshalJSON(bytes []byte) (err error) {
	varUserDataOverview := _UserDataOverview{}

	if err = json.Unmarshal(bytes, &varUserDataOverview); err == nil {
		*o = UserDataOverview(varUserDataOverview)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "transaction_count")
		delete(additionalProperties, "oldest_transaction_date")
		delete(additionalProperties, "newest_transaction_date")
		delete(additionalProperties, "days_available")
		delete(additionalProperties, "total_outflows")
		delete(additionalProperties, "total_inflows")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserDataOverview struct {
	value *UserDataOverview
	isSet bool
}

func (v NullableUserDataOverview) Get() *UserDataOverview {
	return v.value
}

func (v *NullableUserDataOverview) Set(val *UserDataOverview) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDataOverview) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDataOverview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDataOverview(val *UserDataOverview) *NullableUserDataOverview {
	return &NullableUserDataOverview{value: val, isSet: true}
}

func (v NullableUserDataOverview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDataOverview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


