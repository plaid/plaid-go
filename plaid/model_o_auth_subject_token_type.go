/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.641.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// OAuthSubjectTokenType The type of the subject token.  - `urn:plaid:params:tokensdb:user-token` allows exchanging a Plaid-issued user token for an OAuth token. When using this token type, `audience` must be the same as the `client_id`. `subject_token` must be a Plaid-issued user token issued from the `/user/create` endpoint. - `urn:plaid:params:oauth:user-token` allows exchanging a refresh token for an OAuth token to another `client_id`. The other `client_id` is provided in `audience`. `subject_token` must be an OAuth refresh token issued from the `/oauth/token` endpoint.
type OAuthSubjectTokenType string

var _ = fmt.Printf

// List of OAuthSubjectTokenType
const (
	OAUTHSUBJECTTOKENTYPE_TOKENSDBUSER_TOKEN OAuthSubjectTokenType = "urn:plaid:params:tokensdb:user-token"
	OAUTHSUBJECTTOKENTYPE_OAUTHUSER_TOKEN OAuthSubjectTokenType = "urn:plaid:params:oauth:user-token"
)

var allowedOAuthSubjectTokenTypeEnumValues = []OAuthSubjectTokenType{
	"urn:plaid:params:tokensdb:user-token",
	"urn:plaid:params:oauth:user-token",
}

func (v *OAuthSubjectTokenType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := OAuthSubjectTokenType(value)


	*v = enumTypeValue
	return nil
}

// NewOAuthSubjectTokenTypeFromValue returns a pointer to a valid OAuthSubjectTokenType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOAuthSubjectTokenTypeFromValue(v string) (*OAuthSubjectTokenType, error) {
	ev := OAuthSubjectTokenType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OAuthSubjectTokenType) IsValid() bool {
	for _, existing := range allowedOAuthSubjectTokenTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OAuthSubjectTokenType value
func (v OAuthSubjectTokenType) Ptr() *OAuthSubjectTokenType {
	return &v
}

type NullableOAuthSubjectTokenType struct {
	value *OAuthSubjectTokenType
	isSet bool
}

func (v NullableOAuthSubjectTokenType) Get() *OAuthSubjectTokenType {
	return v.value
}

func (v *NullableOAuthSubjectTokenType) Set(val *OAuthSubjectTokenType) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthSubjectTokenType) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthSubjectTokenType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthSubjectTokenType(val *OAuthSubjectTokenType) *NullableOAuthSubjectTokenType {
	return &NullableOAuthSubjectTokenType{value: val, isSet: true}
}

func (v NullableOAuthSubjectTokenType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthSubjectTokenType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

