/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.641.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// HumanReviewStatus The outcome of the human review check, when available. The following values are possible:   `success` - The document passed the check.  `failed` - The document failed the check.  `no_data` - The document was submitted, but the document specialist review was not completed in time.
type HumanReviewStatus string

var _ = fmt.Printf

// List of HumanReviewStatus
const (
	HUMANREVIEWSTATUS_SUCCESS HumanReviewStatus = "success"
	HUMANREVIEWSTATUS_FAILED HumanReviewStatus = "failed"
	HUMANREVIEWSTATUS_NO_DATA HumanReviewStatus = "no_data"
)

var allowedHumanReviewStatusEnumValues = []HumanReviewStatus{
	"success",
	"failed",
	"no_data",
}

func (v *HumanReviewStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := HumanReviewStatus(value)


	*v = enumTypeValue
	return nil
}

// NewHumanReviewStatusFromValue returns a pointer to a valid HumanReviewStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHumanReviewStatusFromValue(v string) (*HumanReviewStatus, error) {
	ev := HumanReviewStatus(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HumanReviewStatus) IsValid() bool {
	for _, existing := range allowedHumanReviewStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HumanReviewStatus value
func (v HumanReviewStatus) Ptr() *HumanReviewStatus {
	return &v
}

type NullableHumanReviewStatus struct {
	value *HumanReviewStatus
	isSet bool
}

func (v NullableHumanReviewStatus) Get() *HumanReviewStatus {
	return v.value
}

func (v *NullableHumanReviewStatus) Set(val *HumanReviewStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableHumanReviewStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableHumanReviewStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHumanReviewStatus(val *HumanReviewStatus) *NullableHumanReviewStatus {
	return &NullableHumanReviewStatus{value: val, isSet: true}
}

func (v NullableHumanReviewStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHumanReviewStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

