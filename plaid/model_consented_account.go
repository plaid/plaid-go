/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// ConsentedAccount A financial institution account.
type ConsentedAccount struct {
	// Plaidâ€™s unique identifier for the account. Like all Plaid identifiers, the `account_id` is case sensitive.
	AccountId *string `json:"account_id,omitempty"`
	// The last 2-4 alphanumeric characters of an account's official account number
	Mask *string `json:"mask,omitempty"`
	// The name of the account, either assigned by the user or by the financial institution itself
	Name *string `json:"name,omitempty"`
	// The official name of the account as given by the financial institution
	OfficialName *string `json:"official_name,omitempty"`
	Type *AccountType `json:"type,omitempty"`
	Subtype NullableAccountSubtype `json:"subtype,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConsentedAccount ConsentedAccount

// NewConsentedAccount instantiates a new ConsentedAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsentedAccount() *ConsentedAccount {
	this := ConsentedAccount{}
	return &this
}

// NewConsentedAccountWithDefaults instantiates a new ConsentedAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsentedAccountWithDefaults() *ConsentedAccount {
	this := ConsentedAccount{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *ConsentedAccount) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentedAccount) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *ConsentedAccount) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *ConsentedAccount) SetAccountId(v string) {
	o.AccountId = &v
}

// GetMask returns the Mask field value if set, zero value otherwise.
func (o *ConsentedAccount) GetMask() string {
	if o == nil || o.Mask == nil {
		var ret string
		return ret
	}
	return *o.Mask
}

// GetMaskOk returns a tuple with the Mask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentedAccount) GetMaskOk() (*string, bool) {
	if o == nil || o.Mask == nil {
		return nil, false
	}
	return o.Mask, true
}

// HasMask returns a boolean if a field has been set.
func (o *ConsentedAccount) HasMask() bool {
	if o != nil && o.Mask != nil {
		return true
	}

	return false
}

// SetMask gets a reference to the given string and assigns it to the Mask field.
func (o *ConsentedAccount) SetMask(v string) {
	o.Mask = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConsentedAccount) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentedAccount) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConsentedAccount) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConsentedAccount) SetName(v string) {
	o.Name = &v
}

// GetOfficialName returns the OfficialName field value if set, zero value otherwise.
func (o *ConsentedAccount) GetOfficialName() string {
	if o == nil || o.OfficialName == nil {
		var ret string
		return ret
	}
	return *o.OfficialName
}

// GetOfficialNameOk returns a tuple with the OfficialName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentedAccount) GetOfficialNameOk() (*string, bool) {
	if o == nil || o.OfficialName == nil {
		return nil, false
	}
	return o.OfficialName, true
}

// HasOfficialName returns a boolean if a field has been set.
func (o *ConsentedAccount) HasOfficialName() bool {
	if o != nil && o.OfficialName != nil {
		return true
	}

	return false
}

// SetOfficialName gets a reference to the given string and assigns it to the OfficialName field.
func (o *ConsentedAccount) SetOfficialName(v string) {
	o.OfficialName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConsentedAccount) GetType() AccountType {
	if o == nil || o.Type == nil {
		var ret AccountType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsentedAccount) GetTypeOk() (*AccountType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConsentedAccount) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given AccountType and assigns it to the Type field.
func (o *ConsentedAccount) SetType(v AccountType) {
	o.Type = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsentedAccount) GetSubtype() AccountSubtype {
	if o == nil || o.Subtype.Get() == nil {
		var ret AccountSubtype
		return ret
	}
	return *o.Subtype.Get()
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsentedAccount) GetSubtypeOk() (*AccountSubtype, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subtype.Get(), o.Subtype.IsSet()
}

// HasSubtype returns a boolean if a field has been set.
func (o *ConsentedAccount) HasSubtype() bool {
	if o != nil && o.Subtype.IsSet() {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given NullableAccountSubtype and assigns it to the Subtype field.
func (o *ConsentedAccount) SetSubtype(v AccountSubtype) {
	o.Subtype.Set(&v)
}
// SetSubtypeNil sets the value for Subtype to be an explicit nil
func (o *ConsentedAccount) SetSubtypeNil() {
	o.Subtype.Set(nil)
}

// UnsetSubtype ensures that no value is present for Subtype, not even an explicit nil
func (o *ConsentedAccount) UnsetSubtype() {
	o.Subtype.Unset()
}

func (o ConsentedAccount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.Mask != nil {
		toSerialize["mask"] = o.Mask
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OfficialName != nil {
		toSerialize["official_name"] = o.OfficialName
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Subtype.IsSet() {
		toSerialize["subtype"] = o.Subtype.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ConsentedAccount) UnmarshalJSON(bytes []byte) (err error) {
	varConsentedAccount := _ConsentedAccount{}

	if err = json.Unmarshal(bytes, &varConsentedAccount); err == nil {
		*o = ConsentedAccount(varConsentedAccount)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "mask")
		delete(additionalProperties, "name")
		delete(additionalProperties, "official_name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "subtype")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConsentedAccount struct {
	value *ConsentedAccount
	isSet bool
}

func (v NullableConsentedAccount) Get() *ConsentedAccount {
	return v.value
}

func (v *NullableConsentedAccount) Set(val *ConsentedAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableConsentedAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableConsentedAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsentedAccount(val *ConsentedAccount) *NullableConsentedAccount {
	return &NullableConsentedAccount{value: val, isSet: true}
}

func (v NullableConsentedAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsentedAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


