/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.620.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// SignalScheduleDefaultPaymentMethod The payment method specified in the `default_payment_method` field directly impacts the timing recommendations provided by the API for submitting the debit entry to your processor or ODFI. If unspecified, Signal defaults to `STANDARD_ACH`.  `SAME_DAY_ACH`: Same Day ACH (as defined by Nacha). The Signal API assumes the settlement will occur on the same business day if the `/signal/schedule` request is submitted by 6:00 PM UTC. Note: The actual cutoff time can vary depending on your payment processor or ODFI. NACHA has established three processing windows for Same Day ACH (UTC): 2:30 PM, 6:45 PM, and 8:45 PM.  `STANDARD_ACH`: Standard ACH (as defined by Nacha), typically settled one to three business days after submission.  `REAL_TIME_PAYMENTS`: Real-time payments via Request for Payment through networks such as RTP (The Clearing House) and FedNow, where the consumer can authorize the payment in response to a RFP, and the transaction is processed and settled immediately.  `DEBIT_CARD`: Payments processed over debit card networks, leveraging the card-based infrastructure for real-time or near-real-time settlement.  `MULTIPLE_PAYMENT_METHODS`: Indicates that there is no default debit rail or multiple payment methods are available, and the transaction could use any of them based on customer policy or availability.
type SignalScheduleDefaultPaymentMethod string

var _ = fmt.Printf

// List of SignalScheduleDefaultPaymentMethod
const (
	SIGNALSCHEDULEDEFAULTPAYMENTMETHOD_SAME_DAY_ACH SignalScheduleDefaultPaymentMethod = "SAME_DAY_ACH"
	SIGNALSCHEDULEDEFAULTPAYMENTMETHOD_STANDARD_ACH SignalScheduleDefaultPaymentMethod = "STANDARD_ACH"
	SIGNALSCHEDULEDEFAULTPAYMENTMETHOD_REAL_TIME_PAYMENTS SignalScheduleDefaultPaymentMethod = "REAL_TIME_PAYMENTS"
	SIGNALSCHEDULEDEFAULTPAYMENTMETHOD_DEBIT_CARD SignalScheduleDefaultPaymentMethod = "DEBIT_CARD"
	SIGNALSCHEDULEDEFAULTPAYMENTMETHOD_MULTIPLE_PAYMENT_METHODS SignalScheduleDefaultPaymentMethod = "MULTIPLE_PAYMENT_METHODS"
)

var allowedSignalScheduleDefaultPaymentMethodEnumValues = []SignalScheduleDefaultPaymentMethod{
	"SAME_DAY_ACH",
	"STANDARD_ACH",
	"REAL_TIME_PAYMENTS",
	"DEBIT_CARD",
	"MULTIPLE_PAYMENT_METHODS",
}

func (v *SignalScheduleDefaultPaymentMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := SignalScheduleDefaultPaymentMethod(value)


	*v = enumTypeValue
	return nil
}

// NewSignalScheduleDefaultPaymentMethodFromValue returns a pointer to a valid SignalScheduleDefaultPaymentMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSignalScheduleDefaultPaymentMethodFromValue(v string) (*SignalScheduleDefaultPaymentMethod, error) {
	ev := SignalScheduleDefaultPaymentMethod(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SignalScheduleDefaultPaymentMethod) IsValid() bool {
	for _, existing := range allowedSignalScheduleDefaultPaymentMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SignalScheduleDefaultPaymentMethod value
func (v SignalScheduleDefaultPaymentMethod) Ptr() *SignalScheduleDefaultPaymentMethod {
	return &v
}

type NullableSignalScheduleDefaultPaymentMethod struct {
	value *SignalScheduleDefaultPaymentMethod
	isSet bool
}

func (v NullableSignalScheduleDefaultPaymentMethod) Get() *SignalScheduleDefaultPaymentMethod {
	return v.value
}

func (v *NullableSignalScheduleDefaultPaymentMethod) Set(val *SignalScheduleDefaultPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalScheduleDefaultPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalScheduleDefaultPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalScheduleDefaultPaymentMethod(val *SignalScheduleDefaultPaymentMethod) *NullableSignalScheduleDefaultPaymentMethod {
	return &NullableSignalScheduleDefaultPaymentMethod{value: val, isSet: true}
}

func (v NullableSignalScheduleDefaultPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalScheduleDefaultPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

