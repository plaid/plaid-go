/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.556.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// RiskSignalFileType The file type for risk signal analysis
type RiskSignalFileType string

var _ = fmt.Printf

// List of RiskSignalFileType
const (
	RISKSIGNALFILETYPE_UNKNOWN RiskSignalFileType = "UNKNOWN"
	RISKSIGNALFILETYPE_IMAGE_PDF RiskSignalFileType = "IMAGE_PDF"
	RISKSIGNALFILETYPE_SCAN_OCR RiskSignalFileType = "SCAN_OCR"
	RISKSIGNALFILETYPE_TRUE_PDF RiskSignalFileType = "TRUE_PDF"
	RISKSIGNALFILETYPE_IMAGE RiskSignalFileType = "IMAGE"
	RISKSIGNALFILETYPE_MIXED_PAGE_PDF RiskSignalFileType = "MIXED_PAGE_PDF"
	RISKSIGNALFILETYPE_EMPTY_PDF RiskSignalFileType = "EMPTY_PDF"
	RISKSIGNALFILETYPE_FLATTENED_PDF RiskSignalFileType = "FLATTENED_PDF"
)

var allowedRiskSignalFileTypeEnumValues = []RiskSignalFileType{
	"UNKNOWN",
	"IMAGE_PDF",
	"SCAN_OCR",
	"TRUE_PDF",
	"IMAGE",
	"MIXED_PAGE_PDF",
	"EMPTY_PDF",
	"FLATTENED_PDF",
}

func (v *RiskSignalFileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := RiskSignalFileType(value)


	*v = enumTypeValue
	return nil
}

// NewRiskSignalFileTypeFromValue returns a pointer to a valid RiskSignalFileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRiskSignalFileTypeFromValue(v string) (*RiskSignalFileType, error) {
	ev := RiskSignalFileType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RiskSignalFileType) IsValid() bool {
	for _, existing := range allowedRiskSignalFileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RiskSignalFileType value
func (v RiskSignalFileType) Ptr() *RiskSignalFileType {
	return &v
}

type NullableRiskSignalFileType struct {
	value *RiskSignalFileType
	isSet bool
}

func (v NullableRiskSignalFileType) Get() *RiskSignalFileType {
	return v.value
}

func (v *NullableRiskSignalFileType) Set(val *RiskSignalFileType) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskSignalFileType) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskSignalFileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskSignalFileType(val *RiskSignalFileType) *NullableRiskSignalFileType {
	return &NullableRiskSignalFileType{value: val, isSet: true}
}

func (v NullableRiskSignalFileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskSignalFileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

