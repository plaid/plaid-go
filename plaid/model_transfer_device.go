/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.391.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// TransferDevice Information about the device being used to initiate the authorization.
type TransferDevice struct {
	// The IP address of the device being used to initiate the authorization.
	IpAddress string `json:"ip_address"`
	// The user agent of the device being used to initiate the authorization.
	UserAgent string `json:"user_agent"`
	AdditionalProperties map[string]interface{}
}

type _TransferDevice TransferDevice

// NewTransferDevice instantiates a new TransferDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferDevice(ipAddress string, userAgent string) *TransferDevice {
	this := TransferDevice{}
	this.IpAddress = ipAddress
	this.UserAgent = userAgent
	return &this
}

// NewTransferDeviceWithDefaults instantiates a new TransferDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferDeviceWithDefaults() *TransferDevice {
	this := TransferDevice{}
	return &this
}

// GetIpAddress returns the IpAddress field value
func (o *TransferDevice) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *TransferDevice) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *TransferDevice) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetUserAgent returns the UserAgent field value
func (o *TransferDevice) GetUserAgent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value
// and a boolean to check if the value has been set.
func (o *TransferDevice) GetUserAgentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserAgent, true
}

// SetUserAgent sets field value
func (o *TransferDevice) SetUserAgent(v string) {
	o.UserAgent = v
}

func (o TransferDevice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ip_address"] = o.IpAddress
	}
	if true {
		toSerialize["user_agent"] = o.UserAgent
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TransferDevice) UnmarshalJSON(bytes []byte) (err error) {
	varTransferDevice := _TransferDevice{}

	if err = json.Unmarshal(bytes, &varTransferDevice); err == nil {
		*o = TransferDevice(varTransferDevice)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ip_address")
		delete(additionalProperties, "user_agent")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransferDevice struct {
	value *TransferDevice
	isSet bool
}

func (v NullableTransferDevice) Get() *TransferDevice {
	return v.value
}

func (v *NullableTransferDevice) Set(val *TransferDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferDevice(val *TransferDevice) *NullableTransferDevice {
	return &NullableTransferDevice{value: val, isSet: true}
}

func (v NullableTransferDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


