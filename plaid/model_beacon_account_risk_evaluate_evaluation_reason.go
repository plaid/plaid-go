/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// BeaconAccountRiskEvaluateEvaluationReason Description of the reason you want to evaluate risk. `ONBOARDING`: user links a first bank account as part of the onboarding flow of your platform. `NEW_ACCOUNT`: user links another bank account or replaces the currently linked bank account on your platform. `INFORMATION_CHANGE`: user changes their information on your platform, e.g., updating their phone number. `DORMANT_USER`:  you decide to re-evaluate a user that becomes active after a period of inactivity.   `OTHER`: any other reasons not listed here Possible values:  `ONBOARDING`, `NEW_ACCOUNT`, `INFORMATION_CHANGE`, `DORMANT_USER`, `OTHER` 
type BeaconAccountRiskEvaluateEvaluationReason string

var _ = fmt.Printf

// List of BeaconAccountRiskEvaluateEvaluationReason
const (
	BEACONACCOUNTRISKEVALUATEEVALUATIONREASON_ONBOARDING BeaconAccountRiskEvaluateEvaluationReason = "ONBOARDING"
	BEACONACCOUNTRISKEVALUATEEVALUATIONREASON_NEW_ACCOUNT BeaconAccountRiskEvaluateEvaluationReason = "NEW_ACCOUNT"
	BEACONACCOUNTRISKEVALUATEEVALUATIONREASON_INFORMATION_CHANGE BeaconAccountRiskEvaluateEvaluationReason = "INFORMATION_CHANGE"
	BEACONACCOUNTRISKEVALUATEEVALUATIONREASON_DORMANT_USER BeaconAccountRiskEvaluateEvaluationReason = "DORMANT_USER"
	BEACONACCOUNTRISKEVALUATEEVALUATIONREASON_OTHER BeaconAccountRiskEvaluateEvaluationReason = "OTHER"
)

var allowedBeaconAccountRiskEvaluateEvaluationReasonEnumValues = []BeaconAccountRiskEvaluateEvaluationReason{
	"ONBOARDING",
	"NEW_ACCOUNT",
	"INFORMATION_CHANGE",
	"DORMANT_USER",
	"OTHER",
}

func (v *BeaconAccountRiskEvaluateEvaluationReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := BeaconAccountRiskEvaluateEvaluationReason(value)


	*v = enumTypeValue
	return nil
}

// NewBeaconAccountRiskEvaluateEvaluationReasonFromValue returns a pointer to a valid BeaconAccountRiskEvaluateEvaluationReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBeaconAccountRiskEvaluateEvaluationReasonFromValue(v string) (*BeaconAccountRiskEvaluateEvaluationReason, error) {
	ev := BeaconAccountRiskEvaluateEvaluationReason(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BeaconAccountRiskEvaluateEvaluationReason) IsValid() bool {
	for _, existing := range allowedBeaconAccountRiskEvaluateEvaluationReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BeaconAccountRiskEvaluateEvaluationReason value
func (v BeaconAccountRiskEvaluateEvaluationReason) Ptr() *BeaconAccountRiskEvaluateEvaluationReason {
	return &v
}

type NullableBeaconAccountRiskEvaluateEvaluationReason struct {
	value *BeaconAccountRiskEvaluateEvaluationReason
	isSet bool
}

func (v NullableBeaconAccountRiskEvaluateEvaluationReason) Get() *BeaconAccountRiskEvaluateEvaluationReason {
	return v.value
}

func (v *NullableBeaconAccountRiskEvaluateEvaluationReason) Set(val *BeaconAccountRiskEvaluateEvaluationReason) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconAccountRiskEvaluateEvaluationReason) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconAccountRiskEvaluateEvaluationReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconAccountRiskEvaluateEvaluationReason(val *BeaconAccountRiskEvaluateEvaluationReason) *NullableBeaconAccountRiskEvaluateEvaluationReason {
	return &NullableBeaconAccountRiskEvaluateEvaluationReason{value: val, isSet: true}
}

func (v NullableBeaconAccountRiskEvaluateEvaluationReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconAccountRiskEvaluateEvaluationReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

