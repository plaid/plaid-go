/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.658.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// AAMVAMatchResult The outcome of checking the particular field against state databases.   `match` - The field is an exact match with the state database.  `no_match` - The field is not an exact match with the state database.  `no_data` - The field was unable to be checked against state databases.
type AAMVAMatchResult string

var _ = fmt.Printf

// List of AAMVAMatchResult
const (
	AAMVAMATCHRESULT_MATCH AAMVAMatchResult = "match"
	AAMVAMATCHRESULT_NO_MATCH AAMVAMatchResult = "no_match"
	AAMVAMATCHRESULT_NO_DATA AAMVAMatchResult = "no_data"
)

var allowedAAMVAMatchResultEnumValues = []AAMVAMatchResult{
	"match",
	"no_match",
	"no_data",
}

func (v *AAMVAMatchResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := AAMVAMatchResult(value)


	*v = enumTypeValue
	return nil
}

// NewAAMVAMatchResultFromValue returns a pointer to a valid AAMVAMatchResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAAMVAMatchResultFromValue(v string) (*AAMVAMatchResult, error) {
	ev := AAMVAMatchResult(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AAMVAMatchResult) IsValid() bool {
	for _, existing := range allowedAAMVAMatchResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AAMVAMatchResult value
func (v AAMVAMatchResult) Ptr() *AAMVAMatchResult {
	return &v
}

type NullableAAMVAMatchResult struct {
	value *AAMVAMatchResult
	isSet bool
}

func (v NullableAAMVAMatchResult) Get() *AAMVAMatchResult {
	return v.value
}

func (v *NullableAAMVAMatchResult) Set(val *AAMVAMatchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAAMVAMatchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAAMVAMatchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAAMVAMatchResult(val *AAMVAMatchResult) *NullableAAMVAMatchResult {
	return &NullableAAMVAMatchResult{value: val, isSet: true}
}

func (v NullableAAMVAMatchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAAMVAMatchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

