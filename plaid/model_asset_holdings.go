/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.664.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// AssetHoldings Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
type AssetHoldings struct {
	ASSET_HOLDING []AssetHolding `json:"ASSET_HOLDING"`
	AdditionalProperties map[string]interface{}
}

type _AssetHoldings AssetHoldings

// NewAssetHoldings instantiates a new AssetHoldings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetHoldings(aSSETHOLDING []AssetHolding) *AssetHoldings {
	this := AssetHoldings{}
	this.ASSET_HOLDING = aSSETHOLDING
	return &this
}

// NewAssetHoldingsWithDefaults instantiates a new AssetHoldings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetHoldingsWithDefaults() *AssetHoldings {
	this := AssetHoldings{}
	return &this
}

// GetASSET_HOLDING returns the ASSET_HOLDING field value
func (o *AssetHoldings) GetASSET_HOLDING() []AssetHolding {
	if o == nil {
		var ret []AssetHolding
		return ret
	}

	return o.ASSET_HOLDING
}

// GetASSET_HOLDINGOk returns a tuple with the ASSET_HOLDING field value
// and a boolean to check if the value has been set.
func (o *AssetHoldings) GetASSET_HOLDINGOk() (*[]AssetHolding, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ASSET_HOLDING, true
}

// SetASSET_HOLDING sets field value
func (o *AssetHoldings) SetASSET_HOLDING(v []AssetHolding) {
	o.ASSET_HOLDING = v
}

func (o AssetHoldings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ASSET_HOLDING"] = o.ASSET_HOLDING
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AssetHoldings) UnmarshalJSON(bytes []byte) (err error) {
	varAssetHoldings := _AssetHoldings{}

	if err = json.Unmarshal(bytes, &varAssetHoldings); err == nil {
		*o = AssetHoldings(varAssetHoldings)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ASSET_HOLDING")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetHoldings struct {
	value *AssetHoldings
	isSet bool
}

func (v NullableAssetHoldings) Get() *AssetHoldings {
	return v.value
}

func (v *NullableAssetHoldings) Set(val *AssetHoldings) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetHoldings) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetHoldings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetHoldings(val *AssetHoldings) *NullableAssetHoldings {
	return &NullableAssetHoldings{value: val, isSet: true}
}

func (v NullableAssetHoldings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetHoldings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


