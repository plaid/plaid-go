/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// IssueResolvedWebhook Webhook notifications are sent only when a subscribed issue is marked as resolved. The payload contains details about the issue at the time of its resolution, focusing on the most essential information.
type IssueResolvedWebhook struct {
	// `ISSUES`
	WebhookType string `json:"webhook_type"`
	// `ISSUE_RESOLVED`
	WebhookCode string `json:"webhook_code"`
	// The unique identifier of the connectivity issue.
	IssueId string `json:"issue_id"`
	// A simple description of the error for the end user.
	IssueDescription string `json:"issue_description"`
	// The time when the issue was marked as resolved.
	IssueResolvedAt time.Time `json:"issue_resolved_at"`
	// The unique identifier of the financial institution involved.
	InstitutionId string `json:"institution_id"`
	// The name of the financial institution involved.
	InstitutionName string `json:"institution_name"`
	AdditionalProperties map[string]interface{}
}

type _IssueResolvedWebhook IssueResolvedWebhook

// NewIssueResolvedWebhook instantiates a new IssueResolvedWebhook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssueResolvedWebhook(webhookType string, webhookCode string, issueId string, issueDescription string, issueResolvedAt time.Time, institutionId string, institutionName string) *IssueResolvedWebhook {
	this := IssueResolvedWebhook{}
	this.WebhookType = webhookType
	this.WebhookCode = webhookCode
	this.IssueId = issueId
	this.IssueDescription = issueDescription
	this.IssueResolvedAt = issueResolvedAt
	this.InstitutionId = institutionId
	this.InstitutionName = institutionName
	return &this
}

// NewIssueResolvedWebhookWithDefaults instantiates a new IssueResolvedWebhook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssueResolvedWebhookWithDefaults() *IssueResolvedWebhook {
	this := IssueResolvedWebhook{}
	return &this
}

// GetWebhookType returns the WebhookType field value
func (o *IssueResolvedWebhook) GetWebhookType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookType
}

// GetWebhookTypeOk returns a tuple with the WebhookType field value
// and a boolean to check if the value has been set.
func (o *IssueResolvedWebhook) GetWebhookTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WebhookType, true
}

// SetWebhookType sets field value
func (o *IssueResolvedWebhook) SetWebhookType(v string) {
	o.WebhookType = v
}

// GetWebhookCode returns the WebhookCode field value
func (o *IssueResolvedWebhook) GetWebhookCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WebhookCode
}

// GetWebhookCodeOk returns a tuple with the WebhookCode field value
// and a boolean to check if the value has been set.
func (o *IssueResolvedWebhook) GetWebhookCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WebhookCode, true
}

// SetWebhookCode sets field value
func (o *IssueResolvedWebhook) SetWebhookCode(v string) {
	o.WebhookCode = v
}

// GetIssueId returns the IssueId field value
func (o *IssueResolvedWebhook) GetIssueId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueId
}

// GetIssueIdOk returns a tuple with the IssueId field value
// and a boolean to check if the value has been set.
func (o *IssueResolvedWebhook) GetIssueIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IssueId, true
}

// SetIssueId sets field value
func (o *IssueResolvedWebhook) SetIssueId(v string) {
	o.IssueId = v
}

// GetIssueDescription returns the IssueDescription field value
func (o *IssueResolvedWebhook) GetIssueDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IssueDescription
}

// GetIssueDescriptionOk returns a tuple with the IssueDescription field value
// and a boolean to check if the value has been set.
func (o *IssueResolvedWebhook) GetIssueDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IssueDescription, true
}

// SetIssueDescription sets field value
func (o *IssueResolvedWebhook) SetIssueDescription(v string) {
	o.IssueDescription = v
}

// GetIssueResolvedAt returns the IssueResolvedAt field value
func (o *IssueResolvedWebhook) GetIssueResolvedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.IssueResolvedAt
}

// GetIssueResolvedAtOk returns a tuple with the IssueResolvedAt field value
// and a boolean to check if the value has been set.
func (o *IssueResolvedWebhook) GetIssueResolvedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IssueResolvedAt, true
}

// SetIssueResolvedAt sets field value
func (o *IssueResolvedWebhook) SetIssueResolvedAt(v time.Time) {
	o.IssueResolvedAt = v
}

// GetInstitutionId returns the InstitutionId field value
func (o *IssueResolvedWebhook) GetInstitutionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstitutionId
}

// GetInstitutionIdOk returns a tuple with the InstitutionId field value
// and a boolean to check if the value has been set.
func (o *IssueResolvedWebhook) GetInstitutionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InstitutionId, true
}

// SetInstitutionId sets field value
func (o *IssueResolvedWebhook) SetInstitutionId(v string) {
	o.InstitutionId = v
}

// GetInstitutionName returns the InstitutionName field value
func (o *IssueResolvedWebhook) GetInstitutionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstitutionName
}

// GetInstitutionNameOk returns a tuple with the InstitutionName field value
// and a boolean to check if the value has been set.
func (o *IssueResolvedWebhook) GetInstitutionNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InstitutionName, true
}

// SetInstitutionName sets field value
func (o *IssueResolvedWebhook) SetInstitutionName(v string) {
	o.InstitutionName = v
}

func (o IssueResolvedWebhook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["webhook_type"] = o.WebhookType
	}
	if true {
		toSerialize["webhook_code"] = o.WebhookCode
	}
	if true {
		toSerialize["issue_id"] = o.IssueId
	}
	if true {
		toSerialize["issue_description"] = o.IssueDescription
	}
	if true {
		toSerialize["issue_resolved_at"] = o.IssueResolvedAt
	}
	if true {
		toSerialize["institution_id"] = o.InstitutionId
	}
	if true {
		toSerialize["institution_name"] = o.InstitutionName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IssueResolvedWebhook) UnmarshalJSON(bytes []byte) (err error) {
	varIssueResolvedWebhook := _IssueResolvedWebhook{}

	if err = json.Unmarshal(bytes, &varIssueResolvedWebhook); err == nil {
		*o = IssueResolvedWebhook(varIssueResolvedWebhook)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "webhook_type")
		delete(additionalProperties, "webhook_code")
		delete(additionalProperties, "issue_id")
		delete(additionalProperties, "issue_description")
		delete(additionalProperties, "issue_resolved_at")
		delete(additionalProperties, "institution_id")
		delete(additionalProperties, "institution_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIssueResolvedWebhook struct {
	value *IssueResolvedWebhook
	isSet bool
}

func (v NullableIssueResolvedWebhook) Get() *IssueResolvedWebhook {
	return v.value
}

func (v *NullableIssueResolvedWebhook) Set(val *IssueResolvedWebhook) {
	v.value = val
	v.isSet = true
}

func (v NullableIssueResolvedWebhook) IsSet() bool {
	return v.isSet
}

func (v *NullableIssueResolvedWebhook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssueResolvedWebhook(val *IssueResolvedWebhook) *NullableIssueResolvedWebhook {
	return &NullableIssueResolvedWebhook{value: val, isSet: true}
}

func (v NullableIssueResolvedWebhook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssueResolvedWebhook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


