/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.128.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// InvestmentTransactionSubtype For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
type InvestmentTransactionSubtype string

// List of InvestmentTransactionSubtype
const (
	INVESTMENTTRANSACTIONSUBTYPE_ACCOUNT_FEE InvestmentTransactionSubtype = "account fee"
	INVESTMENTTRANSACTIONSUBTYPE_ADJUSTMENT InvestmentTransactionSubtype = "adjustment"
	INVESTMENTTRANSACTIONSUBTYPE_ASSIGNMENT InvestmentTransactionSubtype = "assignment"
	INVESTMENTTRANSACTIONSUBTYPE_BUY InvestmentTransactionSubtype = "buy"
	INVESTMENTTRANSACTIONSUBTYPE_BUY_TO_COVER InvestmentTransactionSubtype = "buy to cover"
	INVESTMENTTRANSACTIONSUBTYPE_CONTRIBUTION InvestmentTransactionSubtype = "contribution"
	INVESTMENTTRANSACTIONSUBTYPE_DEPOSIT InvestmentTransactionSubtype = "deposit"
	INVESTMENTTRANSACTIONSUBTYPE_DISTRIBUTION InvestmentTransactionSubtype = "distribution"
	INVESTMENTTRANSACTIONSUBTYPE_DIVIDEND InvestmentTransactionSubtype = "dividend"
	INVESTMENTTRANSACTIONSUBTYPE_DIVIDEND_REINVESTMENT InvestmentTransactionSubtype = "dividend reinvestment"
	INVESTMENTTRANSACTIONSUBTYPE_EXERCISE InvestmentTransactionSubtype = "exercise"
	INVESTMENTTRANSACTIONSUBTYPE_EXPIRE InvestmentTransactionSubtype = "expire"
	INVESTMENTTRANSACTIONSUBTYPE_FUND_FEE InvestmentTransactionSubtype = "fund fee"
	INVESTMENTTRANSACTIONSUBTYPE_INTEREST InvestmentTransactionSubtype = "interest"
	INVESTMENTTRANSACTIONSUBTYPE_INTEREST_RECEIVABLE InvestmentTransactionSubtype = "interest receivable"
	INVESTMENTTRANSACTIONSUBTYPE_INTEREST_REINVESTMENT InvestmentTransactionSubtype = "interest reinvestment"
	INVESTMENTTRANSACTIONSUBTYPE_LEGAL_FEE InvestmentTransactionSubtype = "legal fee"
	INVESTMENTTRANSACTIONSUBTYPE_LOAN_PAYMENT InvestmentTransactionSubtype = "loan payment"
	INVESTMENTTRANSACTIONSUBTYPE_LONG_TERM_CAPITAL_GAIN InvestmentTransactionSubtype = "long-term capital gain"
	INVESTMENTTRANSACTIONSUBTYPE_LONG_TERM_CAPITAL_GAIN_REINVESTMENT InvestmentTransactionSubtype = "long-term capital gain reinvestment"
	INVESTMENTTRANSACTIONSUBTYPE_MANAGEMENT_FEE InvestmentTransactionSubtype = "management fee"
	INVESTMENTTRANSACTIONSUBTYPE_MARGIN_EXPENSE InvestmentTransactionSubtype = "margin expense"
	INVESTMENTTRANSACTIONSUBTYPE_MERGER InvestmentTransactionSubtype = "merger"
	INVESTMENTTRANSACTIONSUBTYPE_MISCELLANEOUS_FEE InvestmentTransactionSubtype = "miscellaneous fee"
	INVESTMENTTRANSACTIONSUBTYPE_NON_QUALIFIED_DIVIDEND InvestmentTransactionSubtype = "non-qualified dividend"
	INVESTMENTTRANSACTIONSUBTYPE_NON_RESIDENT_TAX InvestmentTransactionSubtype = "non-resident tax"
	INVESTMENTTRANSACTIONSUBTYPE_PENDING_CREDIT InvestmentTransactionSubtype = "pending credit"
	INVESTMENTTRANSACTIONSUBTYPE_PENDING_DEBIT InvestmentTransactionSubtype = "pending debit"
	INVESTMENTTRANSACTIONSUBTYPE_QUALIFIED_DIVIDEND InvestmentTransactionSubtype = "qualified dividend"
	INVESTMENTTRANSACTIONSUBTYPE_REBALANCE InvestmentTransactionSubtype = "rebalance"
	INVESTMENTTRANSACTIONSUBTYPE_RETURN_OF_PRINCIPAL InvestmentTransactionSubtype = "return of principal"
	INVESTMENTTRANSACTIONSUBTYPE_SELL InvestmentTransactionSubtype = "sell"
	INVESTMENTTRANSACTIONSUBTYPE_SELL_SHORT InvestmentTransactionSubtype = "sell short"
	INVESTMENTTRANSACTIONSUBTYPE_SHORT_TERM_CAPITAL_GAIN InvestmentTransactionSubtype = "short-term capital gain"
	INVESTMENTTRANSACTIONSUBTYPE_SHORT_TERM_CAPITAL_GAIN_REINVESTMENT InvestmentTransactionSubtype = "short-term capital gain reinvestment"
	INVESTMENTTRANSACTIONSUBTYPE_SPIN_OFF InvestmentTransactionSubtype = "spin off"
	INVESTMENTTRANSACTIONSUBTYPE_SPLIT InvestmentTransactionSubtype = "split"
	INVESTMENTTRANSACTIONSUBTYPE_STOCK_DISTRIBUTION InvestmentTransactionSubtype = "stock distribution"
	INVESTMENTTRANSACTIONSUBTYPE_TAX InvestmentTransactionSubtype = "tax"
	INVESTMENTTRANSACTIONSUBTYPE_TAX_WITHHELD InvestmentTransactionSubtype = "tax withheld"
	INVESTMENTTRANSACTIONSUBTYPE_TRANSFER InvestmentTransactionSubtype = "transfer"
	INVESTMENTTRANSACTIONSUBTYPE_TRANSFER_FEE InvestmentTransactionSubtype = "transfer fee"
	INVESTMENTTRANSACTIONSUBTYPE_TRUST_FEE InvestmentTransactionSubtype = "trust fee"
	INVESTMENTTRANSACTIONSUBTYPE_UNQUALIFIED_GAIN InvestmentTransactionSubtype = "unqualified gain"
	INVESTMENTTRANSACTIONSUBTYPE_WITHDRAWAL InvestmentTransactionSubtype = "withdrawal"
)

var allowedInvestmentTransactionSubtypeEnumValues = []InvestmentTransactionSubtype{
	"account fee",
	"adjustment",
	"assignment",
	"buy",
	"buy to cover",
	"contribution",
	"deposit",
	"distribution",
	"dividend",
	"dividend reinvestment",
	"exercise",
	"expire",
	"fund fee",
	"interest",
	"interest receivable",
	"interest reinvestment",
	"legal fee",
	"loan payment",
	"long-term capital gain",
	"long-term capital gain reinvestment",
	"management fee",
	"margin expense",
	"merger",
	"miscellaneous fee",
	"non-qualified dividend",
	"non-resident tax",
	"pending credit",
	"pending debit",
	"qualified dividend",
	"rebalance",
	"return of principal",
	"sell",
	"sell short",
	"short-term capital gain",
	"short-term capital gain reinvestment",
	"spin off",
	"split",
	"stock distribution",
	"tax",
	"tax withheld",
	"transfer",
	"transfer fee",
	"trust fee",
	"unqualified gain",
	"withdrawal",
}

func (v *InvestmentTransactionSubtype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := InvestmentTransactionSubtype(value)
	for _, existing := range allowedInvestmentTransactionSubtypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid InvestmentTransactionSubtype", value)
}

// NewInvestmentTransactionSubtypeFromValue returns a pointer to a valid InvestmentTransactionSubtype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewInvestmentTransactionSubtypeFromValue(v string) (*InvestmentTransactionSubtype, error) {
	ev := InvestmentTransactionSubtype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for InvestmentTransactionSubtype: valid values are %v", v, allowedInvestmentTransactionSubtypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v InvestmentTransactionSubtype) IsValid() bool {
	for _, existing := range allowedInvestmentTransactionSubtypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to InvestmentTransactionSubtype value
func (v InvestmentTransactionSubtype) Ptr() *InvestmentTransactionSubtype {
	return &v
}

type NullableInvestmentTransactionSubtype struct {
	value *InvestmentTransactionSubtype
	isSet bool
}

func (v NullableInvestmentTransactionSubtype) Get() *InvestmentTransactionSubtype {
	return v.value
}

func (v *NullableInvestmentTransactionSubtype) Set(val *InvestmentTransactionSubtype) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestmentTransactionSubtype) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestmentTransactionSubtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestmentTransactionSubtype(val *InvestmentTransactionSubtype) *NullableInvestmentTransactionSubtype {
	return &NullableInvestmentTransactionSubtype{value: val, isSet: true}
}

func (v NullableInvestmentTransactionSubtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestmentTransactionSubtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

