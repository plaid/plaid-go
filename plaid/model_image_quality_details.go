/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.633.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// ImageQualityDetails Details about the image quality of the document.
type ImageQualityDetails struct {
	GlareCheck ImageQualityOutcome `json:"glare_check"`
	DimensionsCheck ImageQualityOutcome `json:"dimensions_check"`
	BlurCheck ImageQualityOutcome `json:"blur_check"`
	AdditionalProperties map[string]interface{}
}

type _ImageQualityDetails ImageQualityDetails

// NewImageQualityDetails instantiates a new ImageQualityDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageQualityDetails(glareCheck ImageQualityOutcome, dimensionsCheck ImageQualityOutcome, blurCheck ImageQualityOutcome) *ImageQualityDetails {
	this := ImageQualityDetails{}
	this.GlareCheck = glareCheck
	this.DimensionsCheck = dimensionsCheck
	this.BlurCheck = blurCheck
	return &this
}

// NewImageQualityDetailsWithDefaults instantiates a new ImageQualityDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageQualityDetailsWithDefaults() *ImageQualityDetails {
	this := ImageQualityDetails{}
	return &this
}

// GetGlareCheck returns the GlareCheck field value
func (o *ImageQualityDetails) GetGlareCheck() ImageQualityOutcome {
	if o == nil {
		var ret ImageQualityOutcome
		return ret
	}

	return o.GlareCheck
}

// GetGlareCheckOk returns a tuple with the GlareCheck field value
// and a boolean to check if the value has been set.
func (o *ImageQualityDetails) GetGlareCheckOk() (*ImageQualityOutcome, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GlareCheck, true
}

// SetGlareCheck sets field value
func (o *ImageQualityDetails) SetGlareCheck(v ImageQualityOutcome) {
	o.GlareCheck = v
}

// GetDimensionsCheck returns the DimensionsCheck field value
func (o *ImageQualityDetails) GetDimensionsCheck() ImageQualityOutcome {
	if o == nil {
		var ret ImageQualityOutcome
		return ret
	}

	return o.DimensionsCheck
}

// GetDimensionsCheckOk returns a tuple with the DimensionsCheck field value
// and a boolean to check if the value has been set.
func (o *ImageQualityDetails) GetDimensionsCheckOk() (*ImageQualityOutcome, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DimensionsCheck, true
}

// SetDimensionsCheck sets field value
func (o *ImageQualityDetails) SetDimensionsCheck(v ImageQualityOutcome) {
	o.DimensionsCheck = v
}

// GetBlurCheck returns the BlurCheck field value
func (o *ImageQualityDetails) GetBlurCheck() ImageQualityOutcome {
	if o == nil {
		var ret ImageQualityOutcome
		return ret
	}

	return o.BlurCheck
}

// GetBlurCheckOk returns a tuple with the BlurCheck field value
// and a boolean to check if the value has been set.
func (o *ImageQualityDetails) GetBlurCheckOk() (*ImageQualityOutcome, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BlurCheck, true
}

// SetBlurCheck sets field value
func (o *ImageQualityDetails) SetBlurCheck(v ImageQualityOutcome) {
	o.BlurCheck = v
}

func (o ImageQualityDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["glare_check"] = o.GlareCheck
	}
	if true {
		toSerialize["dimensions_check"] = o.DimensionsCheck
	}
	if true {
		toSerialize["blur_check"] = o.BlurCheck
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ImageQualityDetails) UnmarshalJSON(bytes []byte) (err error) {
	varImageQualityDetails := _ImageQualityDetails{}

	if err = json.Unmarshal(bytes, &varImageQualityDetails); err == nil {
		*o = ImageQualityDetails(varImageQualityDetails)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "glare_check")
		delete(additionalProperties, "dimensions_check")
		delete(additionalProperties, "blur_check")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableImageQualityDetails struct {
	value *ImageQualityDetails
	isSet bool
}

func (v NullableImageQualityDetails) Get() *ImageQualityDetails {
	return v.value
}

func (v *NullableImageQualityDetails) Set(val *ImageQualityDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableImageQualityDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableImageQualityDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageQualityDetails(val *ImageQualityDetails) *NullableImageQualityDetails {
	return &NullableImageQualityDetails{value: val, isSet: true}
}

func (v NullableImageQualityDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageQualityDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


