/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.664.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// ItemRemoveReasonCode The reason for removing the item  `FRAUD_FIRST_PARTY`: The end user who owns the connected bank account committed fraud `FRAUD_FALSE_IDENTITY`: The end user created the connection using false identity information or stolen credentials `FRAUD_ABUSE`: The end user is abusing the client's service or platform through their connected account `FRAUD_OTHER`: Other fraud-related reasons involving the end user not covered by the specific fraud categories `CONNECTION_IS_NON_FUNCTIONAL`: The connection to the end user's financial institution is broken and cannot be restored `OTHER`: Any other reason for removing the connection not covered by the above categories 
type ItemRemoveReasonCode string

var _ = fmt.Printf

// List of ItemRemoveReasonCode
const (
	ITEMREMOVEREASONCODE_FRAUD_FIRST_PARTY ItemRemoveReasonCode = "FRAUD_FIRST_PARTY"
	ITEMREMOVEREASONCODE_FRAUD_FALSE_IDENTITY ItemRemoveReasonCode = "FRAUD_FALSE_IDENTITY"
	ITEMREMOVEREASONCODE_FRAUD_ABUSE ItemRemoveReasonCode = "FRAUD_ABUSE"
	ITEMREMOVEREASONCODE_FRAUD_OTHER ItemRemoveReasonCode = "FRAUD_OTHER"
	ITEMREMOVEREASONCODE_CONNECTION_IS_NON_FUNCTIONAL ItemRemoveReasonCode = "CONNECTION_IS_NON_FUNCTIONAL"
	ITEMREMOVEREASONCODE_OTHER ItemRemoveReasonCode = "OTHER"
)

var allowedItemRemoveReasonCodeEnumValues = []ItemRemoveReasonCode{
	"FRAUD_FIRST_PARTY",
	"FRAUD_FALSE_IDENTITY",
	"FRAUD_ABUSE",
	"FRAUD_OTHER",
	"CONNECTION_IS_NON_FUNCTIONAL",
	"OTHER",
}

func (v *ItemRemoveReasonCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := ItemRemoveReasonCode(value)


	*v = enumTypeValue
	return nil
}

// NewItemRemoveReasonCodeFromValue returns a pointer to a valid ItemRemoveReasonCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewItemRemoveReasonCodeFromValue(v string) (*ItemRemoveReasonCode, error) {
	ev := ItemRemoveReasonCode(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ItemRemoveReasonCode) IsValid() bool {
	for _, existing := range allowedItemRemoveReasonCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ItemRemoveReasonCode value
func (v ItemRemoveReasonCode) Ptr() *ItemRemoveReasonCode {
	return &v
}

type NullableItemRemoveReasonCode struct {
	value *ItemRemoveReasonCode
	isSet bool
}

func (v NullableItemRemoveReasonCode) Get() *ItemRemoveReasonCode {
	return v.value
}

func (v *NullableItemRemoveReasonCode) Set(val *ItemRemoveReasonCode) {
	v.value = val
	v.isSet = true
}

func (v NullableItemRemoveReasonCode) IsSet() bool {
	return v.isSet
}

func (v *NullableItemRemoveReasonCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemRemoveReasonCode(val *ItemRemoveReasonCode) *NullableItemRemoveReasonCode {
	return &NullableItemRemoveReasonCode{value: val, isSet: true}
}

func (v NullableItemRemoveReasonCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemRemoveReasonCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

