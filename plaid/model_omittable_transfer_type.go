/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.470.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// OmittableTransferType The type of transfer. Valid values are `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account. This field is omitted for Plaid Ledger Sweep events.
type OmittableTransferType string

var _ = fmt.Printf

// List of OmittableTransferType
const (
	OMITTABLETRANSFERTYPE_DEBIT OmittableTransferType = "debit"
	OMITTABLETRANSFERTYPE_CREDIT OmittableTransferType = "credit"
)

var allowedOmittableTransferTypeEnumValues = []OmittableTransferType{
	"debit",
	"credit",
}

func (v *OmittableTransferType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := OmittableTransferType(value)


	*v = enumTypeValue
	return nil
}

// NewOmittableTransferTypeFromValue returns a pointer to a valid OmittableTransferType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOmittableTransferTypeFromValue(v string) (*OmittableTransferType, error) {
	ev := OmittableTransferType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OmittableTransferType) IsValid() bool {
	for _, existing := range allowedOmittableTransferTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OmittableTransferType value
func (v OmittableTransferType) Ptr() *OmittableTransferType {
	return &v
}

type NullableOmittableTransferType struct {
	value *OmittableTransferType
	isSet bool
}

func (v NullableOmittableTransferType) Get() *OmittableTransferType {
	return v.value
}

func (v *NullableOmittableTransferType) Set(val *OmittableTransferType) {
	v.value = val
	v.isSet = true
}

func (v NullableOmittableTransferType) IsSet() bool {
	return v.isSet
}

func (v *NullableOmittableTransferType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOmittableTransferType(val *OmittableTransferType) *NullableOmittableTransferType {
	return &NullableOmittableTransferType{value: val, isSet: true}
}

func (v NullableOmittableTransferType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOmittableTransferType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

