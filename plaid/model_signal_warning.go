/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.343.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// SignalWarning Conveys information about the errors causing missing or stale bank data used to construct the /signal/evaluate scores and response
type SignalWarning struct {
	// Broad categorization of the warning.
	WarningType *string `json:"warning_type,omitempty"`
	// The particular warning code.
	WarningCode *string `json:"warning_code,omitempty"`
	// A developer-friendly representation of the warning code.
	WarningMessage *string `json:"warning_message,omitempty"`
}

// NewSignalWarning instantiates a new SignalWarning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalWarning() *SignalWarning {
	this := SignalWarning{}
	return &this
}

// NewSignalWarningWithDefaults instantiates a new SignalWarning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalWarningWithDefaults() *SignalWarning {
	this := SignalWarning{}
	return &this
}

// GetWarningType returns the WarningType field value if set, zero value otherwise.
func (o *SignalWarning) GetWarningType() string {
	if o == nil || o.WarningType == nil {
		var ret string
		return ret
	}
	return *o.WarningType
}

// GetWarningTypeOk returns a tuple with the WarningType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalWarning) GetWarningTypeOk() (*string, bool) {
	if o == nil || o.WarningType == nil {
		return nil, false
	}
	return o.WarningType, true
}

// HasWarningType returns a boolean if a field has been set.
func (o *SignalWarning) HasWarningType() bool {
	if o != nil && o.WarningType != nil {
		return true
	}

	return false
}

// SetWarningType gets a reference to the given string and assigns it to the WarningType field.
func (o *SignalWarning) SetWarningType(v string) {
	o.WarningType = &v
}

// GetWarningCode returns the WarningCode field value if set, zero value otherwise.
func (o *SignalWarning) GetWarningCode() string {
	if o == nil || o.WarningCode == nil {
		var ret string
		return ret
	}
	return *o.WarningCode
}

// GetWarningCodeOk returns a tuple with the WarningCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalWarning) GetWarningCodeOk() (*string, bool) {
	if o == nil || o.WarningCode == nil {
		return nil, false
	}
	return o.WarningCode, true
}

// HasWarningCode returns a boolean if a field has been set.
func (o *SignalWarning) HasWarningCode() bool {
	if o != nil && o.WarningCode != nil {
		return true
	}

	return false
}

// SetWarningCode gets a reference to the given string and assigns it to the WarningCode field.
func (o *SignalWarning) SetWarningCode(v string) {
	o.WarningCode = &v
}

// GetWarningMessage returns the WarningMessage field value if set, zero value otherwise.
func (o *SignalWarning) GetWarningMessage() string {
	if o == nil || o.WarningMessage == nil {
		var ret string
		return ret
	}
	return *o.WarningMessage
}

// GetWarningMessageOk returns a tuple with the WarningMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalWarning) GetWarningMessageOk() (*string, bool) {
	if o == nil || o.WarningMessage == nil {
		return nil, false
	}
	return o.WarningMessage, true
}

// HasWarningMessage returns a boolean if a field has been set.
func (o *SignalWarning) HasWarningMessage() bool {
	if o != nil && o.WarningMessage != nil {
		return true
	}

	return false
}

// SetWarningMessage gets a reference to the given string and assigns it to the WarningMessage field.
func (o *SignalWarning) SetWarningMessage(v string) {
	o.WarningMessage = &v
}

func (o SignalWarning) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WarningType != nil {
		toSerialize["warning_type"] = o.WarningType
	}
	if o.WarningCode != nil {
		toSerialize["warning_code"] = o.WarningCode
	}
	if o.WarningMessage != nil {
		toSerialize["warning_message"] = o.WarningMessage
	}
	return json.Marshal(toSerialize)
}

type NullableSignalWarning struct {
	value *SignalWarning
	isSet bool
}

func (v NullableSignalWarning) Get() *SignalWarning {
	return v.value
}

func (v *NullableSignalWarning) Set(val *SignalWarning) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalWarning) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalWarning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalWarning(val *SignalWarning) *NullableSignalWarning {
	return &NullableSignalWarning{value: val, isSet: true}
}

func (v NullableSignalWarning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalWarning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


