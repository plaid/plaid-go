/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.565.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BeaconUserNameNullable The full name for a given Beacon User.
type BeaconUserNameNullable struct {
	// A string with at least one non-whitespace character, with a max length of 100 characters.
	GivenName string `json:"given_name"`
	// A string with at least one non-whitespace character, with a max length of 100 characters.
	FamilyName string `json:"family_name"`
	AdditionalProperties map[string]interface{}
}

type _BeaconUserNameNullable BeaconUserNameNullable

// NewBeaconUserNameNullable instantiates a new BeaconUserNameNullable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconUserNameNullable(givenName string, familyName string) *BeaconUserNameNullable {
	this := BeaconUserNameNullable{}
	this.GivenName = givenName
	this.FamilyName = familyName
	return &this
}

// NewBeaconUserNameNullableWithDefaults instantiates a new BeaconUserNameNullable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconUserNameNullableWithDefaults() *BeaconUserNameNullable {
	this := BeaconUserNameNullable{}
	return &this
}

// GetGivenName returns the GivenName field value
func (o *BeaconUserNameNullable) GetGivenName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GivenName
}

// GetGivenNameOk returns a tuple with the GivenName field value
// and a boolean to check if the value has been set.
func (o *BeaconUserNameNullable) GetGivenNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GivenName, true
}

// SetGivenName sets field value
func (o *BeaconUserNameNullable) SetGivenName(v string) {
	o.GivenName = v
}

// GetFamilyName returns the FamilyName field value
func (o *BeaconUserNameNullable) GetFamilyName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FamilyName
}

// GetFamilyNameOk returns a tuple with the FamilyName field value
// and a boolean to check if the value has been set.
func (o *BeaconUserNameNullable) GetFamilyNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FamilyName, true
}

// SetFamilyName sets field value
func (o *BeaconUserNameNullable) SetFamilyName(v string) {
	o.FamilyName = v
}

func (o BeaconUserNameNullable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["given_name"] = o.GivenName
	}
	if true {
		toSerialize["family_name"] = o.FamilyName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BeaconUserNameNullable) UnmarshalJSON(bytes []byte) (err error) {
	varBeaconUserNameNullable := _BeaconUserNameNullable{}

	if err = json.Unmarshal(bytes, &varBeaconUserNameNullable); err == nil {
		*o = BeaconUserNameNullable(varBeaconUserNameNullable)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "given_name")
		delete(additionalProperties, "family_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBeaconUserNameNullable struct {
	value *BeaconUserNameNullable
	isSet bool
}

func (v NullableBeaconUserNameNullable) Get() *BeaconUserNameNullable {
	return v.value
}

func (v *NullableBeaconUserNameNullable) Set(val *BeaconUserNameNullable) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconUserNameNullable) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconUserNameNullable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconUserNameNullable(val *BeaconUserNameNullable) *NullableBeaconUserNameNullable {
	return &NullableBeaconUserNameNullable{value: val, isSet: true}
}

func (v NullableBeaconUserNameNullable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconUserNameNullable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


