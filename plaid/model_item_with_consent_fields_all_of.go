/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// ItemWithConsentFieldsAllOf struct for ItemWithConsentFieldsAllOf
type ItemWithConsentFieldsAllOf struct {
	// The date and time when the Item was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// A list of use cases that the user has consented to for the Item via [Data Transparency Messaging](/docs/link/data-transparency-messaging-migration-guide).   You can see the full list of use cases or update the list of use cases to request at any time via the Link Customization section of the [Plaid Dashboard](https://dashboard.plaid.com/link/data-transparency-v5).
	ConsentedUseCases *[]string `json:"consented_use_cases,omitempty"`
	// A list of data scopes that the user has consented to for the Item via [Data Transparency Messaging](/docs/link/data-transparency-messaging-migration-guide). These are based on the `consented_products`; see the [full mapping](/docs/link/data-transparency-messaging-migration-guide/#data-scopes-by-product) of data scopes and products.
	ConsentedDataScopes *[]ItemConsentedDataScope `json:"consented_data_scopes,omitempty"`
}

// NewItemWithConsentFieldsAllOf instantiates a new ItemWithConsentFieldsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemWithConsentFieldsAllOf() *ItemWithConsentFieldsAllOf {
	this := ItemWithConsentFieldsAllOf{}
	return &this
}

// NewItemWithConsentFieldsAllOfWithDefaults instantiates a new ItemWithConsentFieldsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemWithConsentFieldsAllOfWithDefaults() *ItemWithConsentFieldsAllOf {
	this := ItemWithConsentFieldsAllOf{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ItemWithConsentFieldsAllOf) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFieldsAllOf) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ItemWithConsentFieldsAllOf) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ItemWithConsentFieldsAllOf) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetConsentedUseCases returns the ConsentedUseCases field value if set, zero value otherwise.
func (o *ItemWithConsentFieldsAllOf) GetConsentedUseCases() []string {
	if o == nil || o.ConsentedUseCases == nil {
		var ret []string
		return ret
	}
	return *o.ConsentedUseCases
}

// GetConsentedUseCasesOk returns a tuple with the ConsentedUseCases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFieldsAllOf) GetConsentedUseCasesOk() (*[]string, bool) {
	if o == nil || o.ConsentedUseCases == nil {
		return nil, false
	}
	return o.ConsentedUseCases, true
}

// HasConsentedUseCases returns a boolean if a field has been set.
func (o *ItemWithConsentFieldsAllOf) HasConsentedUseCases() bool {
	if o != nil && o.ConsentedUseCases != nil {
		return true
	}

	return false
}

// SetConsentedUseCases gets a reference to the given []string and assigns it to the ConsentedUseCases field.
func (o *ItemWithConsentFieldsAllOf) SetConsentedUseCases(v []string) {
	o.ConsentedUseCases = &v
}

// GetConsentedDataScopes returns the ConsentedDataScopes field value if set, zero value otherwise.
func (o *ItemWithConsentFieldsAllOf) GetConsentedDataScopes() []ItemConsentedDataScope {
	if o == nil || o.ConsentedDataScopes == nil {
		var ret []ItemConsentedDataScope
		return ret
	}
	return *o.ConsentedDataScopes
}

// GetConsentedDataScopesOk returns a tuple with the ConsentedDataScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemWithConsentFieldsAllOf) GetConsentedDataScopesOk() (*[]ItemConsentedDataScope, bool) {
	if o == nil || o.ConsentedDataScopes == nil {
		return nil, false
	}
	return o.ConsentedDataScopes, true
}

// HasConsentedDataScopes returns a boolean if a field has been set.
func (o *ItemWithConsentFieldsAllOf) HasConsentedDataScopes() bool {
	if o != nil && o.ConsentedDataScopes != nil {
		return true
	}

	return false
}

// SetConsentedDataScopes gets a reference to the given []ItemConsentedDataScope and assigns it to the ConsentedDataScopes field.
func (o *ItemWithConsentFieldsAllOf) SetConsentedDataScopes(v []ItemConsentedDataScope) {
	o.ConsentedDataScopes = &v
}

func (o ItemWithConsentFieldsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.ConsentedUseCases != nil {
		toSerialize["consented_use_cases"] = o.ConsentedUseCases
	}
	if o.ConsentedDataScopes != nil {
		toSerialize["consented_data_scopes"] = o.ConsentedDataScopes
	}
	return json.Marshal(toSerialize)
}

type NullableItemWithConsentFieldsAllOf struct {
	value *ItemWithConsentFieldsAllOf
	isSet bool
}

func (v NullableItemWithConsentFieldsAllOf) Get() *ItemWithConsentFieldsAllOf {
	return v.value
}

func (v *NullableItemWithConsentFieldsAllOf) Set(val *ItemWithConsentFieldsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableItemWithConsentFieldsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableItemWithConsentFieldsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemWithConsentFieldsAllOf(val *ItemWithConsentFieldsAllOf) *NullableItemWithConsentFieldsAllOf {
	return &NullableItemWithConsentFieldsAllOf{value: val, isSet: true}
}

func (v NullableItemWithConsentFieldsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemWithConsentFieldsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


