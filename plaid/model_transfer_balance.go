/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.391.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// TransferBalance Information about the balance held with Plaid.
type TransferBalance struct {
	// The amount of this balance available for use (decimal string with two digits of precision e.g. \"10.00\").
	Available string `json:"available"`
	Type TransferBalanceType `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _TransferBalance TransferBalance

// NewTransferBalance instantiates a new TransferBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferBalance(available string, type_ TransferBalanceType) *TransferBalance {
	this := TransferBalance{}
	this.Available = available
	this.Type = type_
	return &this
}

// NewTransferBalanceWithDefaults instantiates a new TransferBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferBalanceWithDefaults() *TransferBalance {
	this := TransferBalance{}
	return &this
}

// GetAvailable returns the Available field value
func (o *TransferBalance) GetAvailable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *TransferBalance) GetAvailableOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *TransferBalance) SetAvailable(v string) {
	o.Available = v
}

// GetType returns the Type field value
func (o *TransferBalance) GetType() TransferBalanceType {
	if o == nil {
		var ret TransferBalanceType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TransferBalance) GetTypeOk() (*TransferBalanceType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TransferBalance) SetType(v TransferBalanceType) {
	o.Type = v
}

func (o TransferBalance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["available"] = o.Available
	}
	if true {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TransferBalance) UnmarshalJSON(bytes []byte) (err error) {
	varTransferBalance := _TransferBalance{}

	if err = json.Unmarshal(bytes, &varTransferBalance); err == nil {
		*o = TransferBalance(varTransferBalance)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "available")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransferBalance struct {
	value *TransferBalance
	isSet bool
}

func (v NullableTransferBalance) Get() *TransferBalance {
	return v.value
}

func (v *NullableTransferBalance) Set(val *TransferBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferBalance(val *TransferBalance) *NullableTransferBalance {
	return &NullableTransferBalance{value: val, isSet: true}
}

func (v NullableTransferBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


