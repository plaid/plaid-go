/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.345.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// Recurrence Insights relating to expenses and deposits that are predicted to occur on a scheduled basis, such as biweekly, monthly, or annually.  Common examples include loan payments, bill payments, subscriptions, and payroll income.  This is a beta field, available to all users.
type Recurrence struct {
	// Whether or not the transaction is periodically recurring.
	IsRecurring NullableBool `json:"is_recurring,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Recurrence Recurrence

// NewRecurrence instantiates a new Recurrence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurrence() *Recurrence {
	this := Recurrence{}
	return &this
}

// NewRecurrenceWithDefaults instantiates a new Recurrence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurrenceWithDefaults() *Recurrence {
	this := Recurrence{}
	return &this
}

// GetIsRecurring returns the IsRecurring field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Recurrence) GetIsRecurring() bool {
	if o == nil || o.IsRecurring.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsRecurring.Get()
}

// GetIsRecurringOk returns a tuple with the IsRecurring field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Recurrence) GetIsRecurringOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsRecurring.Get(), o.IsRecurring.IsSet()
}

// HasIsRecurring returns a boolean if a field has been set.
func (o *Recurrence) HasIsRecurring() bool {
	if o != nil && o.IsRecurring.IsSet() {
		return true
	}

	return false
}

// SetIsRecurring gets a reference to the given NullableBool and assigns it to the IsRecurring field.
func (o *Recurrence) SetIsRecurring(v bool) {
	o.IsRecurring.Set(&v)
}
// SetIsRecurringNil sets the value for IsRecurring to be an explicit nil
func (o *Recurrence) SetIsRecurringNil() {
	o.IsRecurring.Set(nil)
}

// UnsetIsRecurring ensures that no value is present for IsRecurring, not even an explicit nil
func (o *Recurrence) UnsetIsRecurring() {
	o.IsRecurring.Unset()
}

func (o Recurrence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsRecurring.IsSet() {
		toSerialize["is_recurring"] = o.IsRecurring.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Recurrence) UnmarshalJSON(bytes []byte) (err error) {
	varRecurrence := _Recurrence{}

	if err = json.Unmarshal(bytes, &varRecurrence); err == nil {
		*o = Recurrence(varRecurrence)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "is_recurring")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRecurrence struct {
	value *Recurrence
	isSet bool
}

func (v NullableRecurrence) Get() *Recurrence {
	return v.value
}

func (v *NullableRecurrence) Set(val *Recurrence) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurrence) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurrence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurrence(val *Recurrence) *NullableRecurrence {
	return &NullableRecurrence{value: val, isSet: true}
}

func (v NullableRecurrence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurrence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


