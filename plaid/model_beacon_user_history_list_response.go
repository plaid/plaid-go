/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.525.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BeaconUserHistoryListResponse The response schema for `/beacon/user/history/list`
type BeaconUserHistoryListResponse struct {
	BeaconUsers []BeaconUser `json:"beacon_users"`
	// An identifier that determines which page of results you receive.
	NextCursor NullableString `json:"next_cursor"`
	// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
	RequestId string `json:"request_id"`
	AdditionalProperties map[string]interface{}
}

type _BeaconUserHistoryListResponse BeaconUserHistoryListResponse

// NewBeaconUserHistoryListResponse instantiates a new BeaconUserHistoryListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconUserHistoryListResponse(beaconUsers []BeaconUser, nextCursor NullableString, requestId string) *BeaconUserHistoryListResponse {
	this := BeaconUserHistoryListResponse{}
	this.BeaconUsers = beaconUsers
	this.NextCursor = nextCursor
	this.RequestId = requestId
	return &this
}

// NewBeaconUserHistoryListResponseWithDefaults instantiates a new BeaconUserHistoryListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconUserHistoryListResponseWithDefaults() *BeaconUserHistoryListResponse {
	this := BeaconUserHistoryListResponse{}
	return &this
}

// GetBeaconUsers returns the BeaconUsers field value
func (o *BeaconUserHistoryListResponse) GetBeaconUsers() []BeaconUser {
	if o == nil {
		var ret []BeaconUser
		return ret
	}

	return o.BeaconUsers
}

// GetBeaconUsersOk returns a tuple with the BeaconUsers field value
// and a boolean to check if the value has been set.
func (o *BeaconUserHistoryListResponse) GetBeaconUsersOk() (*[]BeaconUser, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BeaconUsers, true
}

// SetBeaconUsers sets field value
func (o *BeaconUserHistoryListResponse) SetBeaconUsers(v []BeaconUser) {
	o.BeaconUsers = v
}

// GetNextCursor returns the NextCursor field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BeaconUserHistoryListResponse) GetNextCursor() string {
	if o == nil || o.NextCursor.Get() == nil {
		var ret string
		return ret
	}

	return *o.NextCursor.Get()
}

// GetNextCursorOk returns a tuple with the NextCursor field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BeaconUserHistoryListResponse) GetNextCursorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NextCursor.Get(), o.NextCursor.IsSet()
}

// SetNextCursor sets field value
func (o *BeaconUserHistoryListResponse) SetNextCursor(v string) {
	o.NextCursor.Set(&v)
}

// GetRequestId returns the RequestId field value
func (o *BeaconUserHistoryListResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *BeaconUserHistoryListResponse) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *BeaconUserHistoryListResponse) SetRequestId(v string) {
	o.RequestId = v
}

func (o BeaconUserHistoryListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["beacon_users"] = o.BeaconUsers
	}
	if true {
		toSerialize["next_cursor"] = o.NextCursor.Get()
	}
	if true {
		toSerialize["request_id"] = o.RequestId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BeaconUserHistoryListResponse) UnmarshalJSON(bytes []byte) (err error) {
	varBeaconUserHistoryListResponse := _BeaconUserHistoryListResponse{}

	if err = json.Unmarshal(bytes, &varBeaconUserHistoryListResponse); err == nil {
		*o = BeaconUserHistoryListResponse(varBeaconUserHistoryListResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "beacon_users")
		delete(additionalProperties, "next_cursor")
		delete(additionalProperties, "request_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBeaconUserHistoryListResponse struct {
	value *BeaconUserHistoryListResponse
	isSet bool
}

func (v NullableBeaconUserHistoryListResponse) Get() *BeaconUserHistoryListResponse {
	return v.value
}

func (v *NullableBeaconUserHistoryListResponse) Set(val *BeaconUserHistoryListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconUserHistoryListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconUserHistoryListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconUserHistoryListResponse(val *BeaconUserHistoryListResponse) *NullableBeaconUserHistoryListResponse {
	return &NullableBeaconUserHistoryListResponse{value: val, isSet: true}
}

func (v NullableBeaconUserHistoryListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconUserHistoryListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


