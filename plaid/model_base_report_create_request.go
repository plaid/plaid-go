/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.508.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// BaseReportCreateRequest BaseReportCreateRequest defines the request schema for `/cra/base_report/create`
type BaseReportCreateRequest struct {
	// Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
	ClientId *string `json:"client_id,omitempty"`
	// Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
	Secret *string `json:"secret,omitempty"`
	// The user token associated with the User data is being requested for.
	UserToken string `json:"user_token"`
	// The duration of transaction history you requested
	DaysRequested int32 `json:"days_requested"`
	// URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready.
	Webhook NullableString `json:"webhook"`
	ConsumerReportPermissiblePurpose ConsumerReportPermissiblePurpose `json:"consumer_report_permissible_purpose"`
}

// NewBaseReportCreateRequest instantiates a new BaseReportCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseReportCreateRequest(userToken string, daysRequested int32, webhook NullableString, consumerReportPermissiblePurpose ConsumerReportPermissiblePurpose) *BaseReportCreateRequest {
	this := BaseReportCreateRequest{}
	this.UserToken = userToken
	this.DaysRequested = daysRequested
	this.Webhook = webhook
	this.ConsumerReportPermissiblePurpose = consumerReportPermissiblePurpose
	return &this
}

// NewBaseReportCreateRequestWithDefaults instantiates a new BaseReportCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseReportCreateRequestWithDefaults() *BaseReportCreateRequest {
	this := BaseReportCreateRequest{}
	return &this
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *BaseReportCreateRequest) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseReportCreateRequest) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *BaseReportCreateRequest) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *BaseReportCreateRequest) SetClientId(v string) {
	o.ClientId = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *BaseReportCreateRequest) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseReportCreateRequest) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *BaseReportCreateRequest) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *BaseReportCreateRequest) SetSecret(v string) {
	o.Secret = &v
}

// GetUserToken returns the UserToken field value
func (o *BaseReportCreateRequest) GetUserToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserToken
}

// GetUserTokenOk returns a tuple with the UserToken field value
// and a boolean to check if the value has been set.
func (o *BaseReportCreateRequest) GetUserTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserToken, true
}

// SetUserToken sets field value
func (o *BaseReportCreateRequest) SetUserToken(v string) {
	o.UserToken = v
}

// GetDaysRequested returns the DaysRequested field value
func (o *BaseReportCreateRequest) GetDaysRequested() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DaysRequested
}

// GetDaysRequestedOk returns a tuple with the DaysRequested field value
// and a boolean to check if the value has been set.
func (o *BaseReportCreateRequest) GetDaysRequestedOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DaysRequested, true
}

// SetDaysRequested sets field value
func (o *BaseReportCreateRequest) SetDaysRequested(v int32) {
	o.DaysRequested = v
}

// GetWebhook returns the Webhook field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BaseReportCreateRequest) GetWebhook() string {
	if o == nil || o.Webhook.Get() == nil {
		var ret string
		return ret
	}

	return *o.Webhook.Get()
}

// GetWebhookOk returns a tuple with the Webhook field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseReportCreateRequest) GetWebhookOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Webhook.Get(), o.Webhook.IsSet()
}

// SetWebhook sets field value
func (o *BaseReportCreateRequest) SetWebhook(v string) {
	o.Webhook.Set(&v)
}

// GetConsumerReportPermissiblePurpose returns the ConsumerReportPermissiblePurpose field value
func (o *BaseReportCreateRequest) GetConsumerReportPermissiblePurpose() ConsumerReportPermissiblePurpose {
	if o == nil {
		var ret ConsumerReportPermissiblePurpose
		return ret
	}

	return o.ConsumerReportPermissiblePurpose
}

// GetConsumerReportPermissiblePurposeOk returns a tuple with the ConsumerReportPermissiblePurpose field value
// and a boolean to check if the value has been set.
func (o *BaseReportCreateRequest) GetConsumerReportPermissiblePurposeOk() (*ConsumerReportPermissiblePurpose, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConsumerReportPermissiblePurpose, true
}

// SetConsumerReportPermissiblePurpose sets field value
func (o *BaseReportCreateRequest) SetConsumerReportPermissiblePurpose(v ConsumerReportPermissiblePurpose) {
	o.ConsumerReportPermissiblePurpose = v
}

func (o BaseReportCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientId != nil {
		toSerialize["client_id"] = o.ClientId
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if true {
		toSerialize["user_token"] = o.UserToken
	}
	if true {
		toSerialize["days_requested"] = o.DaysRequested
	}
	if true {
		toSerialize["webhook"] = o.Webhook.Get()
	}
	if true {
		toSerialize["consumer_report_permissible_purpose"] = o.ConsumerReportPermissiblePurpose
	}
	return json.Marshal(toSerialize)
}

type NullableBaseReportCreateRequest struct {
	value *BaseReportCreateRequest
	isSet bool
}

func (v NullableBaseReportCreateRequest) Get() *BaseReportCreateRequest {
	return v.value
}

func (v *NullableBaseReportCreateRequest) Set(val *BaseReportCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseReportCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseReportCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseReportCreateRequest(val *BaseReportCreateRequest) *NullableBaseReportCreateRequest {
	return &NullableBaseReportCreateRequest{value: val, isSet: true}
}

func (v NullableBaseReportCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseReportCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


