/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.508.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// BaseReport An object representing a Base Report
type BaseReport struct {
	// A unique ID identifying an Base Report. Like all Plaid identifiers, this ID is case sensitive.
	ReportId string `json:"report_id"`
	// The date and time when the Base Report was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. \"2018-04-12T03:32:11Z\").
	DateGenerated time.Time `json:"date_generated"`
	// The number of days of transaction history requested.
	DaysRequested float32 `json:"days_requested"`
	// Client-generated identifier, which can be used by lenders to track loan applications.
	ClientReportId NullableString `json:"client_report_id,omitempty"`
	// Data returned by Plaid about each of the Items included in the Base Report.
	Items []BaseReportItem `json:"items"`
	AdditionalProperties map[string]interface{}
}

type _BaseReport BaseReport

// NewBaseReport instantiates a new BaseReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseReport(reportId string, dateGenerated time.Time, daysRequested float32, items []BaseReportItem) *BaseReport {
	this := BaseReport{}
	this.ReportId = reportId
	this.DateGenerated = dateGenerated
	this.DaysRequested = daysRequested
	this.Items = items
	return &this
}

// NewBaseReportWithDefaults instantiates a new BaseReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseReportWithDefaults() *BaseReport {
	this := BaseReport{}
	return &this
}

// GetReportId returns the ReportId field value
func (o *BaseReport) GetReportId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReportId
}

// GetReportIdOk returns a tuple with the ReportId field value
// and a boolean to check if the value has been set.
func (o *BaseReport) GetReportIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ReportId, true
}

// SetReportId sets field value
func (o *BaseReport) SetReportId(v string) {
	o.ReportId = v
}

// GetDateGenerated returns the DateGenerated field value
func (o *BaseReport) GetDateGenerated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DateGenerated
}

// GetDateGeneratedOk returns a tuple with the DateGenerated field value
// and a boolean to check if the value has been set.
func (o *BaseReport) GetDateGeneratedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateGenerated, true
}

// SetDateGenerated sets field value
func (o *BaseReport) SetDateGenerated(v time.Time) {
	o.DateGenerated = v
}

// GetDaysRequested returns the DaysRequested field value
func (o *BaseReport) GetDaysRequested() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DaysRequested
}

// GetDaysRequestedOk returns a tuple with the DaysRequested field value
// and a boolean to check if the value has been set.
func (o *BaseReport) GetDaysRequestedOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DaysRequested, true
}

// SetDaysRequested sets field value
func (o *BaseReport) SetDaysRequested(v float32) {
	o.DaysRequested = v
}

// GetClientReportId returns the ClientReportId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BaseReport) GetClientReportId() string {
	if o == nil || o.ClientReportId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClientReportId.Get()
}

// GetClientReportIdOk returns a tuple with the ClientReportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseReport) GetClientReportIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClientReportId.Get(), o.ClientReportId.IsSet()
}

// HasClientReportId returns a boolean if a field has been set.
func (o *BaseReport) HasClientReportId() bool {
	if o != nil && o.ClientReportId.IsSet() {
		return true
	}

	return false
}

// SetClientReportId gets a reference to the given NullableString and assigns it to the ClientReportId field.
func (o *BaseReport) SetClientReportId(v string) {
	o.ClientReportId.Set(&v)
}
// SetClientReportIdNil sets the value for ClientReportId to be an explicit nil
func (o *BaseReport) SetClientReportIdNil() {
	o.ClientReportId.Set(nil)
}

// UnsetClientReportId ensures that no value is present for ClientReportId, not even an explicit nil
func (o *BaseReport) UnsetClientReportId() {
	o.ClientReportId.Unset()
}

// GetItems returns the Items field value
func (o *BaseReport) GetItems() []BaseReportItem {
	if o == nil {
		var ret []BaseReportItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *BaseReport) GetItemsOk() (*[]BaseReportItem, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Items, true
}

// SetItems sets field value
func (o *BaseReport) SetItems(v []BaseReportItem) {
	o.Items = v
}

func (o BaseReport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["report_id"] = o.ReportId
	}
	if true {
		toSerialize["date_generated"] = o.DateGenerated
	}
	if true {
		toSerialize["days_requested"] = o.DaysRequested
	}
	if o.ClientReportId.IsSet() {
		toSerialize["client_report_id"] = o.ClientReportId.Get()
	}
	if true {
		toSerialize["items"] = o.Items
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BaseReport) UnmarshalJSON(bytes []byte) (err error) {
	varBaseReport := _BaseReport{}

	if err = json.Unmarshal(bytes, &varBaseReport); err == nil {
		*o = BaseReport(varBaseReport)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "report_id")
		delete(additionalProperties, "date_generated")
		delete(additionalProperties, "days_requested")
		delete(additionalProperties, "client_report_id")
		delete(additionalProperties, "items")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBaseReport struct {
	value *BaseReport
	isSet bool
}

func (v NullableBaseReport) Get() *BaseReport {
	return v.value
}

func (v *NullableBaseReport) Set(val *BaseReport) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseReport) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseReport(val *BaseReport) *NullableBaseReport {
	return &NullableBaseReport{value: val, isSet: true}
}

func (v NullableBaseReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


