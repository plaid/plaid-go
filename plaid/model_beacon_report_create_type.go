/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.556.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// BeaconReportCreateType The type of Beacon Report.  `first_party`: If this is the same individual as the one who submitted the KYC.  `stolen`: If this is a different individual from the one who submitted the KYC.  `synthetic`: If this is an individual using fabricated information.  `account_takeover`: If this individual's account was compromised.  `unknown`: If you aren't sure who committed the fraud.
type BeaconReportCreateType string

var _ = fmt.Printf

// List of BeaconReportCreateType
const (
	BEACONREPORTCREATETYPE_FIRST_PARTY BeaconReportCreateType = "first_party"
	BEACONREPORTCREATETYPE_STOLEN BeaconReportCreateType = "stolen"
	BEACONREPORTCREATETYPE_SYNTHETIC BeaconReportCreateType = "synthetic"
	BEACONREPORTCREATETYPE_ACCOUNT_TAKEOVER BeaconReportCreateType = "account_takeover"
	BEACONREPORTCREATETYPE_DATA_BREACH BeaconReportCreateType = "data_breach"
	BEACONREPORTCREATETYPE_UNKNOWN BeaconReportCreateType = "unknown"
)

var allowedBeaconReportCreateTypeEnumValues = []BeaconReportCreateType{
	"first_party",
	"stolen",
	"synthetic",
	"account_takeover",
	"data_breach",
	"unknown",
}

func (v *BeaconReportCreateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := BeaconReportCreateType(value)


	*v = enumTypeValue
	return nil
}

// NewBeaconReportCreateTypeFromValue returns a pointer to a valid BeaconReportCreateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBeaconReportCreateTypeFromValue(v string) (*BeaconReportCreateType, error) {
	ev := BeaconReportCreateType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BeaconReportCreateType) IsValid() bool {
	for _, existing := range allowedBeaconReportCreateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BeaconReportCreateType value
func (v BeaconReportCreateType) Ptr() *BeaconReportCreateType {
	return &v
}

type NullableBeaconReportCreateType struct {
	value *BeaconReportCreateType
	isSet bool
}

func (v NullableBeaconReportCreateType) Get() *BeaconReportCreateType {
	return v.value
}

func (v *NullableBeaconReportCreateType) Set(val *BeaconReportCreateType) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconReportCreateType) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconReportCreateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconReportCreateType(val *BeaconReportCreateType) *NullableBeaconReportCreateType {
	return &NullableBeaconReportCreateType{value: val, isSet: true}
}

func (v NullableBeaconReportCreateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconReportCreateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

