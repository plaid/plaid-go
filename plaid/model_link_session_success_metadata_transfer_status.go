/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.413.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// LinkSessionSuccessMetadataTransferStatus The status of a transfer. Returned only when [Transfer UI](/docs/transfer/using-transfer-ui) is implemented.  - `COMPLETE` – The transfer was completed. - `INCOMPLETE` – The transfer could not be completed. For help, see [Troubleshooting transfers](/docs/transfer/using-transfer-ui#troubleshooting-transfers).
type LinkSessionSuccessMetadataTransferStatus string

var _ = fmt.Printf

// List of LinkSessionSuccessMetadataTransferStatus
const (
	LINKSESSIONSUCCESSMETADATATRANSFERSTATUS_COMPLETE LinkSessionSuccessMetadataTransferStatus = "COMPLETE"
	LINKSESSIONSUCCESSMETADATATRANSFERSTATUS_INCOMPLETE LinkSessionSuccessMetadataTransferStatus = "INCOMPLETE"
)

var allowedLinkSessionSuccessMetadataTransferStatusEnumValues = []LinkSessionSuccessMetadataTransferStatus{
	"COMPLETE",
	"INCOMPLETE",
}

func (v *LinkSessionSuccessMetadataTransferStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := LinkSessionSuccessMetadataTransferStatus(value)


	*v = enumTypeValue
	return nil
}

// NewLinkSessionSuccessMetadataTransferStatusFromValue returns a pointer to a valid LinkSessionSuccessMetadataTransferStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLinkSessionSuccessMetadataTransferStatusFromValue(v string) (*LinkSessionSuccessMetadataTransferStatus, error) {
	ev := LinkSessionSuccessMetadataTransferStatus(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LinkSessionSuccessMetadataTransferStatus) IsValid() bool {
	for _, existing := range allowedLinkSessionSuccessMetadataTransferStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LinkSessionSuccessMetadataTransferStatus value
func (v LinkSessionSuccessMetadataTransferStatus) Ptr() *LinkSessionSuccessMetadataTransferStatus {
	return &v
}

type NullableLinkSessionSuccessMetadataTransferStatus struct {
	value *LinkSessionSuccessMetadataTransferStatus
	isSet bool
}

func (v NullableLinkSessionSuccessMetadataTransferStatus) Get() *LinkSessionSuccessMetadataTransferStatus {
	return v.value
}

func (v *NullableLinkSessionSuccessMetadataTransferStatus) Set(val *LinkSessionSuccessMetadataTransferStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkSessionSuccessMetadataTransferStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkSessionSuccessMetadataTransferStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkSessionSuccessMetadataTransferStatus(val *LinkSessionSuccessMetadataTransferStatus) *NullableLinkSessionSuccessMetadataTransferStatus {
	return &NullableLinkSessionSuccessMetadataTransferStatus{value: val, isSet: true}
}

func (v NullableLinkSessionSuccessMetadataTransferStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkSessionSuccessMetadataTransferStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

