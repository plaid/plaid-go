/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.658.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// PaymentInitiationPaymentStatus The status of the payment.  Core lifecycle statuses:  `PAYMENT_STATUS_INPUT_NEEDED`: **Transitional.** The payment is awaiting user input to continue processing. It may re-enter this state if additional input is required.  `PAYMENT_STATUS_AUTHORISING`: **Transitional.** The payment is being authorised by the financial institution. It will automatically move on once authorisation completes.  `PAYMENT_STATUS_INITIATED`: **Transitional.** The payment has been authorised and accepted by the financial institution and is now in transit. A payment should be considered complete once it reaches the `PAYMENT_STATUS_EXECUTED` state or the funds settle in the recipient account.  `PAYMENT_STATUS_EXECUTED`: **Terminal.** The funds have left the payer’s account and the payment is en route to settlement. Support is more common in the UK than in the EU; where unsupported, a successful payment remains in `PAYMENT_STATUS_INITIATED` before settling. When using Plaid Virtual Accounts, `PAYMENT_STATUS_EXECUTED` is not terminal—the payment will continue to `PAYMENT_STATUS_SETTLED` once funds are available.  `PAYMENT_STATUS_SETTLED`: **Terminal.** The funds are available in the recipient’s account. Only available to customers using [Plaid Virtual Accounts](https://plaid.com/docs/payment-initiation/virtual-accounts/).  Failure statuses:  `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: **Terminal.** The payment failed due to insufficient funds. No further retries will succeed until the payer’s balance is replenished.  `PAYMENT_STATUS_FAILED`: **Terminal (retryable).** The payment could not be initiated due to a system error or outage. Retry once the root cause is resolved.  `PAYMENT_STATUS_BLOCKED`: **Terminal (retryable).** The payment was blocked by Plaid (e.g., flagged as risky). Resolve any compliance or risk issues and retry.  `PAYMENT_STATUS_REJECTED`: **Terminal.** The payment was rejected by the financial institution. No automatic retry is possible.  `PAYMENT_STATUS_CANCELLED`: **Terminal.** The end user cancelled the payment during authorisation.  Standing-order statuses:  `PAYMENT_STATUS_ESTABLISHED`: **Terminal.** A recurring/standing order has been successfully created.  Deprecated (to be removed in a future release):  `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.    `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed.    `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established.
type PaymentInitiationPaymentStatus string

var _ = fmt.Printf

// List of PaymentInitiationPaymentStatus
const (
	PAYMENTINITIATIONPAYMENTSTATUS_INPUT_NEEDED PaymentInitiationPaymentStatus = "PAYMENT_STATUS_INPUT_NEEDED"
	PAYMENTINITIATIONPAYMENTSTATUS_PROCESSING PaymentInitiationPaymentStatus = "PAYMENT_STATUS_PROCESSING"
	PAYMENTINITIATIONPAYMENTSTATUS_INITIATED PaymentInitiationPaymentStatus = "PAYMENT_STATUS_INITIATED"
	PAYMENTINITIATIONPAYMENTSTATUS_COMPLETED PaymentInitiationPaymentStatus = "PAYMENT_STATUS_COMPLETED"
	PAYMENTINITIATIONPAYMENTSTATUS_INSUFFICIENT_FUNDS PaymentInitiationPaymentStatus = "PAYMENT_STATUS_INSUFFICIENT_FUNDS"
	PAYMENTINITIATIONPAYMENTSTATUS_FAILED PaymentInitiationPaymentStatus = "PAYMENT_STATUS_FAILED"
	PAYMENTINITIATIONPAYMENTSTATUS_BLOCKED PaymentInitiationPaymentStatus = "PAYMENT_STATUS_BLOCKED"
	PAYMENTINITIATIONPAYMENTSTATUS_UNKNOWN PaymentInitiationPaymentStatus = "PAYMENT_STATUS_UNKNOWN"
	PAYMENTINITIATIONPAYMENTSTATUS_EXECUTED PaymentInitiationPaymentStatus = "PAYMENT_STATUS_EXECUTED"
	PAYMENTINITIATIONPAYMENTSTATUS_SETTLED PaymentInitiationPaymentStatus = "PAYMENT_STATUS_SETTLED"
	PAYMENTINITIATIONPAYMENTSTATUS_AUTHORISING PaymentInitiationPaymentStatus = "PAYMENT_STATUS_AUTHORISING"
	PAYMENTINITIATIONPAYMENTSTATUS_CANCELLED PaymentInitiationPaymentStatus = "PAYMENT_STATUS_CANCELLED"
	PAYMENTINITIATIONPAYMENTSTATUS_ESTABLISHED PaymentInitiationPaymentStatus = "PAYMENT_STATUS_ESTABLISHED"
	PAYMENTINITIATIONPAYMENTSTATUS_REJECTED PaymentInitiationPaymentStatus = "PAYMENT_STATUS_REJECTED"
)

var allowedPaymentInitiationPaymentStatusEnumValues = []PaymentInitiationPaymentStatus{
	"PAYMENT_STATUS_INPUT_NEEDED",
	"PAYMENT_STATUS_PROCESSING",
	"PAYMENT_STATUS_INITIATED",
	"PAYMENT_STATUS_COMPLETED",
	"PAYMENT_STATUS_INSUFFICIENT_FUNDS",
	"PAYMENT_STATUS_FAILED",
	"PAYMENT_STATUS_BLOCKED",
	"PAYMENT_STATUS_UNKNOWN",
	"PAYMENT_STATUS_EXECUTED",
	"PAYMENT_STATUS_SETTLED",
	"PAYMENT_STATUS_AUTHORISING",
	"PAYMENT_STATUS_CANCELLED",
	"PAYMENT_STATUS_ESTABLISHED",
	"PAYMENT_STATUS_REJECTED",
}

func (v *PaymentInitiationPaymentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := PaymentInitiationPaymentStatus(value)


	*v = enumTypeValue
	return nil
}

// NewPaymentInitiationPaymentStatusFromValue returns a pointer to a valid PaymentInitiationPaymentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentInitiationPaymentStatusFromValue(v string) (*PaymentInitiationPaymentStatus, error) {
	ev := PaymentInitiationPaymentStatus(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentInitiationPaymentStatus) IsValid() bool {
	for _, existing := range allowedPaymentInitiationPaymentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PaymentInitiationPaymentStatus value
func (v PaymentInitiationPaymentStatus) Ptr() *PaymentInitiationPaymentStatus {
	return &v
}

type NullablePaymentInitiationPaymentStatus struct {
	value *PaymentInitiationPaymentStatus
	isSet bool
}

func (v NullablePaymentInitiationPaymentStatus) Get() *PaymentInitiationPaymentStatus {
	return v.value
}

func (v *NullablePaymentInitiationPaymentStatus) Set(val *PaymentInitiationPaymentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentInitiationPaymentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentInitiationPaymentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentInitiationPaymentStatus(val *PaymentInitiationPaymentStatus) *NullablePaymentInitiationPaymentStatus {
	return &NullablePaymentInitiationPaymentStatus{value: val, isSet: true}
}

func (v NullablePaymentInitiationPaymentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentInitiationPaymentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

