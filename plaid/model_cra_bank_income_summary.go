/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.413.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CraBankIncomeSummary Summary for bank income across all income sources and items (max history of 730 days).
type CraBankIncomeSummary struct {
	// Total amount of earnings across all the income sources in the end user's Items for the days requested by the client. This can contain multiple amounts, with each amount denominated in one unique currency.
	TotalAmounts *[]CreditAmountWithCurrency `json:"total_amounts,omitempty"`
	// The earliest date within the days requested in which all income sources identified by Plaid appear in a user's account. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
	StartDate *string `json:"start_date,omitempty"`
	// The latest date in which all income sources identified by Plaid appear in the user's account. The date will be returned in an ISO 8601 format (YYYY-MM-DD).
	EndDate *string `json:"end_date,omitempty"`
	// Number of income sources per end user.
	IncomeSourcesCount *int32 `json:"income_sources_count,omitempty"`
	// Number of income categories per end user.
	IncomeCategoriesCount *int32 `json:"income_categories_count,omitempty"`
	// Number of income transactions per end user.
	IncomeTransactionsCount *int32 `json:"income_transactions_count,omitempty"`
	// An estimate of the average gross monthly income based on the historical net amount and income category for the income source(s).
	HistoricalAverageMonthlyGrossIncome *[]CreditAmountWithCurrency `json:"historical_average_monthly_gross_income,omitempty"`
	// The average monthly income amount estimated based on the historical data for the income source(s).
	HistoricalAverageMonthlyIncome *[]CreditAmountWithCurrency `json:"historical_average_monthly_income,omitempty"`
	// The predicted average monthly income amount for the income source(s).
	ForecastedAverageMonthlyIncome *[]CreditAmountWithCurrency `json:"forecasted_average_monthly_income,omitempty"`
	HistoricalSummary *[]CraBankIncomeHistoricalSummary `json:"historical_summary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CraBankIncomeSummary CraBankIncomeSummary

// NewCraBankIncomeSummary instantiates a new CraBankIncomeSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCraBankIncomeSummary() *CraBankIncomeSummary {
	this := CraBankIncomeSummary{}
	return &this
}

// NewCraBankIncomeSummaryWithDefaults instantiates a new CraBankIncomeSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCraBankIncomeSummaryWithDefaults() *CraBankIncomeSummary {
	this := CraBankIncomeSummary{}
	return &this
}

// GetTotalAmounts returns the TotalAmounts field value if set, zero value otherwise.
func (o *CraBankIncomeSummary) GetTotalAmounts() []CreditAmountWithCurrency {
	if o == nil || o.TotalAmounts == nil {
		var ret []CreditAmountWithCurrency
		return ret
	}
	return *o.TotalAmounts
}

// GetTotalAmountsOk returns a tuple with the TotalAmounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraBankIncomeSummary) GetTotalAmountsOk() (*[]CreditAmountWithCurrency, bool) {
	if o == nil || o.TotalAmounts == nil {
		return nil, false
	}
	return o.TotalAmounts, true
}

// HasTotalAmounts returns a boolean if a field has been set.
func (o *CraBankIncomeSummary) HasTotalAmounts() bool {
	if o != nil && o.TotalAmounts != nil {
		return true
	}

	return false
}

// SetTotalAmounts gets a reference to the given []CreditAmountWithCurrency and assigns it to the TotalAmounts field.
func (o *CraBankIncomeSummary) SetTotalAmounts(v []CreditAmountWithCurrency) {
	o.TotalAmounts = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *CraBankIncomeSummary) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraBankIncomeSummary) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *CraBankIncomeSummary) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *CraBankIncomeSummary) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *CraBankIncomeSummary) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraBankIncomeSummary) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *CraBankIncomeSummary) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *CraBankIncomeSummary) SetEndDate(v string) {
	o.EndDate = &v
}

// GetIncomeSourcesCount returns the IncomeSourcesCount field value if set, zero value otherwise.
func (o *CraBankIncomeSummary) GetIncomeSourcesCount() int32 {
	if o == nil || o.IncomeSourcesCount == nil {
		var ret int32
		return ret
	}
	return *o.IncomeSourcesCount
}

// GetIncomeSourcesCountOk returns a tuple with the IncomeSourcesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraBankIncomeSummary) GetIncomeSourcesCountOk() (*int32, bool) {
	if o == nil || o.IncomeSourcesCount == nil {
		return nil, false
	}
	return o.IncomeSourcesCount, true
}

// HasIncomeSourcesCount returns a boolean if a field has been set.
func (o *CraBankIncomeSummary) HasIncomeSourcesCount() bool {
	if o != nil && o.IncomeSourcesCount != nil {
		return true
	}

	return false
}

// SetIncomeSourcesCount gets a reference to the given int32 and assigns it to the IncomeSourcesCount field.
func (o *CraBankIncomeSummary) SetIncomeSourcesCount(v int32) {
	o.IncomeSourcesCount = &v
}

// GetIncomeCategoriesCount returns the IncomeCategoriesCount field value if set, zero value otherwise.
func (o *CraBankIncomeSummary) GetIncomeCategoriesCount() int32 {
	if o == nil || o.IncomeCategoriesCount == nil {
		var ret int32
		return ret
	}
	return *o.IncomeCategoriesCount
}

// GetIncomeCategoriesCountOk returns a tuple with the IncomeCategoriesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraBankIncomeSummary) GetIncomeCategoriesCountOk() (*int32, bool) {
	if o == nil || o.IncomeCategoriesCount == nil {
		return nil, false
	}
	return o.IncomeCategoriesCount, true
}

// HasIncomeCategoriesCount returns a boolean if a field has been set.
func (o *CraBankIncomeSummary) HasIncomeCategoriesCount() bool {
	if o != nil && o.IncomeCategoriesCount != nil {
		return true
	}

	return false
}

// SetIncomeCategoriesCount gets a reference to the given int32 and assigns it to the IncomeCategoriesCount field.
func (o *CraBankIncomeSummary) SetIncomeCategoriesCount(v int32) {
	o.IncomeCategoriesCount = &v
}

// GetIncomeTransactionsCount returns the IncomeTransactionsCount field value if set, zero value otherwise.
func (o *CraBankIncomeSummary) GetIncomeTransactionsCount() int32 {
	if o == nil || o.IncomeTransactionsCount == nil {
		var ret int32
		return ret
	}
	return *o.IncomeTransactionsCount
}

// GetIncomeTransactionsCountOk returns a tuple with the IncomeTransactionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraBankIncomeSummary) GetIncomeTransactionsCountOk() (*int32, bool) {
	if o == nil || o.IncomeTransactionsCount == nil {
		return nil, false
	}
	return o.IncomeTransactionsCount, true
}

// HasIncomeTransactionsCount returns a boolean if a field has been set.
func (o *CraBankIncomeSummary) HasIncomeTransactionsCount() bool {
	if o != nil && o.IncomeTransactionsCount != nil {
		return true
	}

	return false
}

// SetIncomeTransactionsCount gets a reference to the given int32 and assigns it to the IncomeTransactionsCount field.
func (o *CraBankIncomeSummary) SetIncomeTransactionsCount(v int32) {
	o.IncomeTransactionsCount = &v
}

// GetHistoricalAverageMonthlyGrossIncome returns the HistoricalAverageMonthlyGrossIncome field value if set, zero value otherwise.
func (o *CraBankIncomeSummary) GetHistoricalAverageMonthlyGrossIncome() []CreditAmountWithCurrency {
	if o == nil || o.HistoricalAverageMonthlyGrossIncome == nil {
		var ret []CreditAmountWithCurrency
		return ret
	}
	return *o.HistoricalAverageMonthlyGrossIncome
}

// GetHistoricalAverageMonthlyGrossIncomeOk returns a tuple with the HistoricalAverageMonthlyGrossIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraBankIncomeSummary) GetHistoricalAverageMonthlyGrossIncomeOk() (*[]CreditAmountWithCurrency, bool) {
	if o == nil || o.HistoricalAverageMonthlyGrossIncome == nil {
		return nil, false
	}
	return o.HistoricalAverageMonthlyGrossIncome, true
}

// HasHistoricalAverageMonthlyGrossIncome returns a boolean if a field has been set.
func (o *CraBankIncomeSummary) HasHistoricalAverageMonthlyGrossIncome() bool {
	if o != nil && o.HistoricalAverageMonthlyGrossIncome != nil {
		return true
	}

	return false
}

// SetHistoricalAverageMonthlyGrossIncome gets a reference to the given []CreditAmountWithCurrency and assigns it to the HistoricalAverageMonthlyGrossIncome field.
func (o *CraBankIncomeSummary) SetHistoricalAverageMonthlyGrossIncome(v []CreditAmountWithCurrency) {
	o.HistoricalAverageMonthlyGrossIncome = &v
}

// GetHistoricalAverageMonthlyIncome returns the HistoricalAverageMonthlyIncome field value if set, zero value otherwise.
func (o *CraBankIncomeSummary) GetHistoricalAverageMonthlyIncome() []CreditAmountWithCurrency {
	if o == nil || o.HistoricalAverageMonthlyIncome == nil {
		var ret []CreditAmountWithCurrency
		return ret
	}
	return *o.HistoricalAverageMonthlyIncome
}

// GetHistoricalAverageMonthlyIncomeOk returns a tuple with the HistoricalAverageMonthlyIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraBankIncomeSummary) GetHistoricalAverageMonthlyIncomeOk() (*[]CreditAmountWithCurrency, bool) {
	if o == nil || o.HistoricalAverageMonthlyIncome == nil {
		return nil, false
	}
	return o.HistoricalAverageMonthlyIncome, true
}

// HasHistoricalAverageMonthlyIncome returns a boolean if a field has been set.
func (o *CraBankIncomeSummary) HasHistoricalAverageMonthlyIncome() bool {
	if o != nil && o.HistoricalAverageMonthlyIncome != nil {
		return true
	}

	return false
}

// SetHistoricalAverageMonthlyIncome gets a reference to the given []CreditAmountWithCurrency and assigns it to the HistoricalAverageMonthlyIncome field.
func (o *CraBankIncomeSummary) SetHistoricalAverageMonthlyIncome(v []CreditAmountWithCurrency) {
	o.HistoricalAverageMonthlyIncome = &v
}

// GetForecastedAverageMonthlyIncome returns the ForecastedAverageMonthlyIncome field value if set, zero value otherwise.
func (o *CraBankIncomeSummary) GetForecastedAverageMonthlyIncome() []CreditAmountWithCurrency {
	if o == nil || o.ForecastedAverageMonthlyIncome == nil {
		var ret []CreditAmountWithCurrency
		return ret
	}
	return *o.ForecastedAverageMonthlyIncome
}

// GetForecastedAverageMonthlyIncomeOk returns a tuple with the ForecastedAverageMonthlyIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraBankIncomeSummary) GetForecastedAverageMonthlyIncomeOk() (*[]CreditAmountWithCurrency, bool) {
	if o == nil || o.ForecastedAverageMonthlyIncome == nil {
		return nil, false
	}
	return o.ForecastedAverageMonthlyIncome, true
}

// HasForecastedAverageMonthlyIncome returns a boolean if a field has been set.
func (o *CraBankIncomeSummary) HasForecastedAverageMonthlyIncome() bool {
	if o != nil && o.ForecastedAverageMonthlyIncome != nil {
		return true
	}

	return false
}

// SetForecastedAverageMonthlyIncome gets a reference to the given []CreditAmountWithCurrency and assigns it to the ForecastedAverageMonthlyIncome field.
func (o *CraBankIncomeSummary) SetForecastedAverageMonthlyIncome(v []CreditAmountWithCurrency) {
	o.ForecastedAverageMonthlyIncome = &v
}

// GetHistoricalSummary returns the HistoricalSummary field value if set, zero value otherwise.
func (o *CraBankIncomeSummary) GetHistoricalSummary() []CraBankIncomeHistoricalSummary {
	if o == nil || o.HistoricalSummary == nil {
		var ret []CraBankIncomeHistoricalSummary
		return ret
	}
	return *o.HistoricalSummary
}

// GetHistoricalSummaryOk returns a tuple with the HistoricalSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CraBankIncomeSummary) GetHistoricalSummaryOk() (*[]CraBankIncomeHistoricalSummary, bool) {
	if o == nil || o.HistoricalSummary == nil {
		return nil, false
	}
	return o.HistoricalSummary, true
}

// HasHistoricalSummary returns a boolean if a field has been set.
func (o *CraBankIncomeSummary) HasHistoricalSummary() bool {
	if o != nil && o.HistoricalSummary != nil {
		return true
	}

	return false
}

// SetHistoricalSummary gets a reference to the given []CraBankIncomeHistoricalSummary and assigns it to the HistoricalSummary field.
func (o *CraBankIncomeSummary) SetHistoricalSummary(v []CraBankIncomeHistoricalSummary) {
	o.HistoricalSummary = &v
}

func (o CraBankIncomeSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalAmounts != nil {
		toSerialize["total_amounts"] = o.TotalAmounts
	}
	if o.StartDate != nil {
		toSerialize["start_date"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["end_date"] = o.EndDate
	}
	if o.IncomeSourcesCount != nil {
		toSerialize["income_sources_count"] = o.IncomeSourcesCount
	}
	if o.IncomeCategoriesCount != nil {
		toSerialize["income_categories_count"] = o.IncomeCategoriesCount
	}
	if o.IncomeTransactionsCount != nil {
		toSerialize["income_transactions_count"] = o.IncomeTransactionsCount
	}
	if o.HistoricalAverageMonthlyGrossIncome != nil {
		toSerialize["historical_average_monthly_gross_income"] = o.HistoricalAverageMonthlyGrossIncome
	}
	if o.HistoricalAverageMonthlyIncome != nil {
		toSerialize["historical_average_monthly_income"] = o.HistoricalAverageMonthlyIncome
	}
	if o.ForecastedAverageMonthlyIncome != nil {
		toSerialize["forecasted_average_monthly_income"] = o.ForecastedAverageMonthlyIncome
	}
	if o.HistoricalSummary != nil {
		toSerialize["historical_summary"] = o.HistoricalSummary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CraBankIncomeSummary) UnmarshalJSON(bytes []byte) (err error) {
	varCraBankIncomeSummary := _CraBankIncomeSummary{}

	if err = json.Unmarshal(bytes, &varCraBankIncomeSummary); err == nil {
		*o = CraBankIncomeSummary(varCraBankIncomeSummary)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "total_amounts")
		delete(additionalProperties, "start_date")
		delete(additionalProperties, "end_date")
		delete(additionalProperties, "income_sources_count")
		delete(additionalProperties, "income_categories_count")
		delete(additionalProperties, "income_transactions_count")
		delete(additionalProperties, "historical_average_monthly_gross_income")
		delete(additionalProperties, "historical_average_monthly_income")
		delete(additionalProperties, "forecasted_average_monthly_income")
		delete(additionalProperties, "historical_summary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCraBankIncomeSummary struct {
	value *CraBankIncomeSummary
	isSet bool
}

func (v NullableCraBankIncomeSummary) Get() *CraBankIncomeSummary {
	return v.value
}

func (v *NullableCraBankIncomeSummary) Set(val *CraBankIncomeSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableCraBankIncomeSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableCraBankIncomeSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraBankIncomeSummary(val *CraBankIncomeSummary) *NullableCraBankIncomeSummary {
	return &NullableCraBankIncomeSummary{value: val, isSet: true}
}

func (v NullableCraBankIncomeSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraBankIncomeSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


