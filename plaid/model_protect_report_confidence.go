/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// ProtectReportConfidence The confidence level of the incident report. `CONFIRMED` indicates the incident has been verified and definitively occurred.  `SUSPECTED` indicates the incident is believed to have occurred but has not been fully verified.
type ProtectReportConfidence string

var _ = fmt.Printf

// List of ProtectReportConfidence
const (
	PROTECTREPORTCONFIDENCE_CONFIRMED ProtectReportConfidence = "CONFIRMED"
	PROTECTREPORTCONFIDENCE_SUSPECTED ProtectReportConfidence = "SUSPECTED"
)

var allowedProtectReportConfidenceEnumValues = []ProtectReportConfidence{
	"CONFIRMED",
	"SUSPECTED",
}

func (v *ProtectReportConfidence) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := ProtectReportConfidence(value)


	*v = enumTypeValue
	return nil
}

// NewProtectReportConfidenceFromValue returns a pointer to a valid ProtectReportConfidence
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProtectReportConfidenceFromValue(v string) (*ProtectReportConfidence, error) {
	ev := ProtectReportConfidence(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProtectReportConfidence) IsValid() bool {
	for _, existing := range allowedProtectReportConfidenceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProtectReportConfidence value
func (v ProtectReportConfidence) Ptr() *ProtectReportConfidence {
	return &v
}

type NullableProtectReportConfidence struct {
	value *ProtectReportConfidence
	isSet bool
}

func (v NullableProtectReportConfidence) Get() *ProtectReportConfidence {
	return v.value
}

func (v *NullableProtectReportConfidence) Set(val *ProtectReportConfidence) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectReportConfidence) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectReportConfidence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectReportConfidence(val *ProtectReportConfidence) *NullableProtectReportConfidence {
	return &NullableProtectReportConfidence{value: val, isSet: true}
}

func (v NullableProtectReportConfidence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectReportConfidence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

