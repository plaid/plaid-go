/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.641.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// AssetReportInvestments A set of fields describing the investments data on an account.
type AssetReportInvestments struct {
	// Quantities and values of securities held in the investment account. Map to the `securities` array for security details.
	Holdings *[]AssetReportInvestmentHolding `json:"holdings,omitempty"`
	// Details of specific securities held in on the investment account.
	Securities *[]AssetReportInvestmentSecurity `json:"securities,omitempty"`
	// Transaction history on the investment account.
	Transactions *[]AssetReportInvestmentTransaction `json:"transactions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AssetReportInvestments AssetReportInvestments

// NewAssetReportInvestments instantiates a new AssetReportInvestments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetReportInvestments() *AssetReportInvestments {
	this := AssetReportInvestments{}
	return &this
}

// NewAssetReportInvestmentsWithDefaults instantiates a new AssetReportInvestments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetReportInvestmentsWithDefaults() *AssetReportInvestments {
	this := AssetReportInvestments{}
	return &this
}

// GetHoldings returns the Holdings field value if set, zero value otherwise.
func (o *AssetReportInvestments) GetHoldings() []AssetReportInvestmentHolding {
	if o == nil || o.Holdings == nil {
		var ret []AssetReportInvestmentHolding
		return ret
	}
	return *o.Holdings
}

// GetHoldingsOk returns a tuple with the Holdings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetHoldingsOk() (*[]AssetReportInvestmentHolding, bool) {
	if o == nil || o.Holdings == nil {
		return nil, false
	}
	return o.Holdings, true
}

// HasHoldings returns a boolean if a field has been set.
func (o *AssetReportInvestments) HasHoldings() bool {
	if o != nil && o.Holdings != nil {
		return true
	}

	return false
}

// SetHoldings gets a reference to the given []AssetReportInvestmentHolding and assigns it to the Holdings field.
func (o *AssetReportInvestments) SetHoldings(v []AssetReportInvestmentHolding) {
	o.Holdings = &v
}

// GetSecurities returns the Securities field value if set, zero value otherwise.
func (o *AssetReportInvestments) GetSecurities() []AssetReportInvestmentSecurity {
	if o == nil || o.Securities == nil {
		var ret []AssetReportInvestmentSecurity
		return ret
	}
	return *o.Securities
}

// GetSecuritiesOk returns a tuple with the Securities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetSecuritiesOk() (*[]AssetReportInvestmentSecurity, bool) {
	if o == nil || o.Securities == nil {
		return nil, false
	}
	return o.Securities, true
}

// HasSecurities returns a boolean if a field has been set.
func (o *AssetReportInvestments) HasSecurities() bool {
	if o != nil && o.Securities != nil {
		return true
	}

	return false
}

// SetSecurities gets a reference to the given []AssetReportInvestmentSecurity and assigns it to the Securities field.
func (o *AssetReportInvestments) SetSecurities(v []AssetReportInvestmentSecurity) {
	o.Securities = &v
}

// GetTransactions returns the Transactions field value if set, zero value otherwise.
func (o *AssetReportInvestments) GetTransactions() []AssetReportInvestmentTransaction {
	if o == nil || o.Transactions == nil {
		var ret []AssetReportInvestmentTransaction
		return ret
	}
	return *o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetTransactionsOk() (*[]AssetReportInvestmentTransaction, bool) {
	if o == nil || o.Transactions == nil {
		return nil, false
	}
	return o.Transactions, true
}

// HasTransactions returns a boolean if a field has been set.
func (o *AssetReportInvestments) HasTransactions() bool {
	if o != nil && o.Transactions != nil {
		return true
	}

	return false
}

// SetTransactions gets a reference to the given []AssetReportInvestmentTransaction and assigns it to the Transactions field.
func (o *AssetReportInvestments) SetTransactions(v []AssetReportInvestmentTransaction) {
	o.Transactions = &v
}

func (o AssetReportInvestments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Holdings != nil {
		toSerialize["holdings"] = o.Holdings
	}
	if o.Securities != nil {
		toSerialize["securities"] = o.Securities
	}
	if o.Transactions != nil {
		toSerialize["transactions"] = o.Transactions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AssetReportInvestments) UnmarshalJSON(bytes []byte) (err error) {
	varAssetReportInvestments := _AssetReportInvestments{}

	if err = json.Unmarshal(bytes, &varAssetReportInvestments); err == nil {
		*o = AssetReportInvestments(varAssetReportInvestments)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "holdings")
		delete(additionalProperties, "securities")
		delete(additionalProperties, "transactions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetReportInvestments struct {
	value *AssetReportInvestments
	isSet bool
}

func (v NullableAssetReportInvestments) Get() *AssetReportInvestments {
	return v.value
}

func (v *NullableAssetReportInvestments) Set(val *AssetReportInvestments) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetReportInvestments) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetReportInvestments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetReportInvestments(val *AssetReportInvestments) *NullableAssetReportInvestments {
	return &NullableAssetReportInvestments{value: val, isSet: true}
}

func (v NullableAssetReportInvestments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetReportInvestments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


