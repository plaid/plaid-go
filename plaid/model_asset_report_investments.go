/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.534.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// AssetReportInvestments A transaction within an investment account.
type AssetReportInvestments struct {
	// The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive.
	InvestmentTransactionId string `json:"investment_transaction_id"`
	// The `account_id` of the account against which this transaction posted.
	AccountId string `json:"account_id"`
	// The `security_id` to which this transaction is related.
	SecurityId NullableString `json:"security_id"`
	// The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
	Date string `json:"date"`
	// The institutionâ€™s description of the transaction.
	Name string `json:"name"`
	// The number of units of the security involved in this transaction. Positive for buy transactions; negative for sell transactions.
	Quantity float64 `json:"quantity"`
	// The total quantity of vested assets held, as reported by the financial institution. Vested assets are only associated with [equities](https://plaid.com/docs/api/products/investments/#investments-holdings-get-response-securities-type).
	VestedQuantity float64 `json:"vested_quantity"`
	// The value of the vested holdings as reported by the institution.
	VestedValue float64 `json:"vested_value"`
	// The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
	Amount float64 `json:"amount"`
	// The price of the security at which this transaction occurred.
	Price float64 `json:"price"`
	// The combined value of all fees applied to this transaction
	Fees NullableFloat64 `json:"fees"`
	Type InvestmentTransactionType `json:"type"`
	Subtype InvestmentTransactionSubtype `json:"subtype"`
	// The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`.
	IsoCurrencyCode NullableString `json:"iso_currency_code"`
	// The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
	UnofficialCurrencyCode NullableString `json:"unofficial_currency_code"`
	AdditionalProperties map[string]interface{}
}

type _AssetReportInvestments AssetReportInvestments

// NewAssetReportInvestments instantiates a new AssetReportInvestments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetReportInvestments(investmentTransactionId string, accountId string, securityId NullableString, date string, name string, quantity float64, vestedQuantity float64, vestedValue float64, amount float64, price float64, fees NullableFloat64, type_ InvestmentTransactionType, subtype InvestmentTransactionSubtype, isoCurrencyCode NullableString, unofficialCurrencyCode NullableString) *AssetReportInvestments {
	this := AssetReportInvestments{}
	this.InvestmentTransactionId = investmentTransactionId
	this.AccountId = accountId
	this.SecurityId = securityId
	this.Date = date
	this.Name = name
	this.Quantity = quantity
	this.VestedQuantity = vestedQuantity
	this.VestedValue = vestedValue
	this.Amount = amount
	this.Price = price
	this.Fees = fees
	this.Type = type_
	this.Subtype = subtype
	this.IsoCurrencyCode = isoCurrencyCode
	this.UnofficialCurrencyCode = unofficialCurrencyCode
	return &this
}

// NewAssetReportInvestmentsWithDefaults instantiates a new AssetReportInvestments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetReportInvestmentsWithDefaults() *AssetReportInvestments {
	this := AssetReportInvestments{}
	return &this
}

// GetInvestmentTransactionId returns the InvestmentTransactionId field value
func (o *AssetReportInvestments) GetInvestmentTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvestmentTransactionId
}

// GetInvestmentTransactionIdOk returns a tuple with the InvestmentTransactionId field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetInvestmentTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InvestmentTransactionId, true
}

// SetInvestmentTransactionId sets field value
func (o *AssetReportInvestments) SetInvestmentTransactionId(v string) {
	o.InvestmentTransactionId = v
}

// GetAccountId returns the AccountId field value
func (o *AssetReportInvestments) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetAccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *AssetReportInvestments) SetAccountId(v string) {
	o.AccountId = v
}

// GetSecurityId returns the SecurityId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportInvestments) GetSecurityId() string {
	if o == nil || o.SecurityId.Get() == nil {
		var ret string
		return ret
	}

	return *o.SecurityId.Get()
}

// GetSecurityIdOk returns a tuple with the SecurityId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportInvestments) GetSecurityIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityId.Get(), o.SecurityId.IsSet()
}

// SetSecurityId sets field value
func (o *AssetReportInvestments) SetSecurityId(v string) {
	o.SecurityId.Set(&v)
}

// GetDate returns the Date field value
func (o *AssetReportInvestments) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *AssetReportInvestments) SetDate(v string) {
	o.Date = v
}

// GetName returns the Name field value
func (o *AssetReportInvestments) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AssetReportInvestments) SetName(v string) {
	o.Name = v
}

// GetQuantity returns the Quantity field value
func (o *AssetReportInvestments) GetQuantity() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetQuantityOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *AssetReportInvestments) SetQuantity(v float64) {
	o.Quantity = v
}

// GetVestedQuantity returns the VestedQuantity field value
func (o *AssetReportInvestments) GetVestedQuantity() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.VestedQuantity
}

// GetVestedQuantityOk returns a tuple with the VestedQuantity field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetVestedQuantityOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VestedQuantity, true
}

// SetVestedQuantity sets field value
func (o *AssetReportInvestments) SetVestedQuantity(v float64) {
	o.VestedQuantity = v
}

// GetVestedValue returns the VestedValue field value
func (o *AssetReportInvestments) GetVestedValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.VestedValue
}

// GetVestedValueOk returns a tuple with the VestedValue field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetVestedValueOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.VestedValue, true
}

// SetVestedValue sets field value
func (o *AssetReportInvestments) SetVestedValue(v float64) {
	o.VestedValue = v
}

// GetAmount returns the Amount field value
func (o *AssetReportInvestments) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AssetReportInvestments) SetAmount(v float64) {
	o.Amount = v
}

// GetPrice returns the Price field value
func (o *AssetReportInvestments) GetPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *AssetReportInvestments) SetPrice(v float64) {
	o.Price = v
}

// GetFees returns the Fees field value
// If the value is explicit nil, the zero value for float64 will be returned
func (o *AssetReportInvestments) GetFees() float64 {
	if o == nil || o.Fees.Get() == nil {
		var ret float64
		return ret
	}

	return *o.Fees.Get()
}

// GetFeesOk returns a tuple with the Fees field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportInvestments) GetFeesOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Fees.Get(), o.Fees.IsSet()
}

// SetFees sets field value
func (o *AssetReportInvestments) SetFees(v float64) {
	o.Fees.Set(&v)
}

// GetType returns the Type field value
func (o *AssetReportInvestments) GetType() InvestmentTransactionType {
	if o == nil {
		var ret InvestmentTransactionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetTypeOk() (*InvestmentTransactionType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AssetReportInvestments) SetType(v InvestmentTransactionType) {
	o.Type = v
}

// GetSubtype returns the Subtype field value
func (o *AssetReportInvestments) GetSubtype() InvestmentTransactionSubtype {
	if o == nil {
		var ret InvestmentTransactionSubtype
		return ret
	}

	return o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value
// and a boolean to check if the value has been set.
func (o *AssetReportInvestments) GetSubtypeOk() (*InvestmentTransactionSubtype, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Subtype, true
}

// SetSubtype sets field value
func (o *AssetReportInvestments) SetSubtype(v InvestmentTransactionSubtype) {
	o.Subtype = v
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportInvestments) GetIsoCurrencyCode() string {
	if o == nil || o.IsoCurrencyCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.IsoCurrencyCode.Get()
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportInvestments) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsoCurrencyCode.Get(), o.IsoCurrencyCode.IsSet()
}

// SetIsoCurrencyCode sets field value
func (o *AssetReportInvestments) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode.Set(&v)
}

// GetUnofficialCurrencyCode returns the UnofficialCurrencyCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportInvestments) GetUnofficialCurrencyCode() string {
	if o == nil || o.UnofficialCurrencyCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.UnofficialCurrencyCode.Get()
}

// GetUnofficialCurrencyCodeOk returns a tuple with the UnofficialCurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportInvestments) GetUnofficialCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnofficialCurrencyCode.Get(), o.UnofficialCurrencyCode.IsSet()
}

// SetUnofficialCurrencyCode sets field value
func (o *AssetReportInvestments) SetUnofficialCurrencyCode(v string) {
	o.UnofficialCurrencyCode.Set(&v)
}

func (o AssetReportInvestments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["investment_transaction_id"] = o.InvestmentTransactionId
	}
	if true {
		toSerialize["account_id"] = o.AccountId
	}
	if true {
		toSerialize["security_id"] = o.SecurityId.Get()
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["quantity"] = o.Quantity
	}
	if true {
		toSerialize["vested_quantity"] = o.VestedQuantity
	}
	if true {
		toSerialize["vested_value"] = o.VestedValue
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if true {
		toSerialize["fees"] = o.Fees.Get()
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["subtype"] = o.Subtype
	}
	if true {
		toSerialize["iso_currency_code"] = o.IsoCurrencyCode.Get()
	}
	if true {
		toSerialize["unofficial_currency_code"] = o.UnofficialCurrencyCode.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AssetReportInvestments) UnmarshalJSON(bytes []byte) (err error) {
	varAssetReportInvestments := _AssetReportInvestments{}

	if err = json.Unmarshal(bytes, &varAssetReportInvestments); err == nil {
		*o = AssetReportInvestments(varAssetReportInvestments)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "investment_transaction_id")
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "security_id")
		delete(additionalProperties, "date")
		delete(additionalProperties, "name")
		delete(additionalProperties, "quantity")
		delete(additionalProperties, "vested_quantity")
		delete(additionalProperties, "vested_value")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "price")
		delete(additionalProperties, "fees")
		delete(additionalProperties, "type")
		delete(additionalProperties, "subtype")
		delete(additionalProperties, "iso_currency_code")
		delete(additionalProperties, "unofficial_currency_code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAssetReportInvestments struct {
	value *AssetReportInvestments
	isSet bool
}

func (v NullableAssetReportInvestments) Get() *AssetReportInvestments {
	return v.value
}

func (v *NullableAssetReportInvestments) Set(val *AssetReportInvestments) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetReportInvestments) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetReportInvestments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetReportInvestments(val *AssetReportInvestments) *NullableAssetReportInvestments {
	return &NullableAssetReportInvestments{value: val, isSet: true}
}

func (v NullableAssetReportInvestments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetReportInvestments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


