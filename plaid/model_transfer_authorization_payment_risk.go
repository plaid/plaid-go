/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// TransferAuthorizationPaymentRisk This object includes the scores and risk level. This response is offered as an add-on to /transfer/authorization/create. To request access to these fields please contact your Plaid account manager.
type TransferAuthorizationPaymentRisk struct {
	// A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.  The score evaluates the transaction return risk because an account is overdrawn or because an ineligible account is used and covers return codes: \"R01\", \"R02\", \"R03\", \"R04\", \"R06\", \"R08\",  \"R09\", \"R13\", \"R16\", \"R17\", \"R20\", \"R23\". These returns have a turnaround time of 2 banking days.
	BankInitiatedReturnScore NullableInt32 `json:"bank_initiated_return_score"`
	// A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.  The score evaluates the transaction return risk of an unauthorized debit and covers return codes: \"R05\", \"R07\", \"R10\", \"R11\", \"R29\". These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized.
	CustomerInitiatedReturnScore NullableInt32 `json:"customer_initiated_return_score"`
	RiskLevel NullableTransferAuthorizationRiskLevel `json:"risk_level"`
	// If bank information was not available to be used in the Signal model, this array contains warnings describing why bank data is missing. If you want to receive an API error instead of Signal scores in the case of missing bank data, file a support ticket or contact your Plaid account manager.
	Warnings []SignalWarning `json:"warnings"`
	AdditionalProperties map[string]interface{}
}

type _TransferAuthorizationPaymentRisk TransferAuthorizationPaymentRisk

// NewTransferAuthorizationPaymentRisk instantiates a new TransferAuthorizationPaymentRisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransferAuthorizationPaymentRisk(bankInitiatedReturnScore NullableInt32, customerInitiatedReturnScore NullableInt32, riskLevel NullableTransferAuthorizationRiskLevel, warnings []SignalWarning) *TransferAuthorizationPaymentRisk {
	this := TransferAuthorizationPaymentRisk{}
	this.BankInitiatedReturnScore = bankInitiatedReturnScore
	this.CustomerInitiatedReturnScore = customerInitiatedReturnScore
	this.RiskLevel = riskLevel
	this.Warnings = warnings
	return &this
}

// NewTransferAuthorizationPaymentRiskWithDefaults instantiates a new TransferAuthorizationPaymentRisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferAuthorizationPaymentRiskWithDefaults() *TransferAuthorizationPaymentRisk {
	this := TransferAuthorizationPaymentRisk{}
	return &this
}

// GetBankInitiatedReturnScore returns the BankInitiatedReturnScore field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *TransferAuthorizationPaymentRisk) GetBankInitiatedReturnScore() int32 {
	if o == nil || o.BankInitiatedReturnScore.Get() == nil {
		var ret int32
		return ret
	}

	return *o.BankInitiatedReturnScore.Get()
}

// GetBankInitiatedReturnScoreOk returns a tuple with the BankInitiatedReturnScore field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransferAuthorizationPaymentRisk) GetBankInitiatedReturnScoreOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BankInitiatedReturnScore.Get(), o.BankInitiatedReturnScore.IsSet()
}

// SetBankInitiatedReturnScore sets field value
func (o *TransferAuthorizationPaymentRisk) SetBankInitiatedReturnScore(v int32) {
	o.BankInitiatedReturnScore.Set(&v)
}

// GetCustomerInitiatedReturnScore returns the CustomerInitiatedReturnScore field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *TransferAuthorizationPaymentRisk) GetCustomerInitiatedReturnScore() int32 {
	if o == nil || o.CustomerInitiatedReturnScore.Get() == nil {
		var ret int32
		return ret
	}

	return *o.CustomerInitiatedReturnScore.Get()
}

// GetCustomerInitiatedReturnScoreOk returns a tuple with the CustomerInitiatedReturnScore field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransferAuthorizationPaymentRisk) GetCustomerInitiatedReturnScoreOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CustomerInitiatedReturnScore.Get(), o.CustomerInitiatedReturnScore.IsSet()
}

// SetCustomerInitiatedReturnScore sets field value
func (o *TransferAuthorizationPaymentRisk) SetCustomerInitiatedReturnScore(v int32) {
	o.CustomerInitiatedReturnScore.Set(&v)
}

// GetRiskLevel returns the RiskLevel field value
// If the value is explicit nil, the zero value for TransferAuthorizationRiskLevel will be returned
func (o *TransferAuthorizationPaymentRisk) GetRiskLevel() TransferAuthorizationRiskLevel {
	if o == nil || o.RiskLevel.Get() == nil {
		var ret TransferAuthorizationRiskLevel
		return ret
	}

	return *o.RiskLevel.Get()
}

// GetRiskLevelOk returns a tuple with the RiskLevel field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransferAuthorizationPaymentRisk) GetRiskLevelOk() (*TransferAuthorizationRiskLevel, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RiskLevel.Get(), o.RiskLevel.IsSet()
}

// SetRiskLevel sets field value
func (o *TransferAuthorizationPaymentRisk) SetRiskLevel(v TransferAuthorizationRiskLevel) {
	o.RiskLevel.Set(&v)
}

// GetWarnings returns the Warnings field value
func (o *TransferAuthorizationPaymentRisk) GetWarnings() []SignalWarning {
	if o == nil {
		var ret []SignalWarning
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
func (o *TransferAuthorizationPaymentRisk) GetWarningsOk() (*[]SignalWarning, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Warnings, true
}

// SetWarnings sets field value
func (o *TransferAuthorizationPaymentRisk) SetWarnings(v []SignalWarning) {
	o.Warnings = v
}

func (o TransferAuthorizationPaymentRisk) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bank_initiated_return_score"] = o.BankInitiatedReturnScore.Get()
	}
	if true {
		toSerialize["customer_initiated_return_score"] = o.CustomerInitiatedReturnScore.Get()
	}
	if true {
		toSerialize["risk_level"] = o.RiskLevel.Get()
	}
	if true {
		toSerialize["warnings"] = o.Warnings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TransferAuthorizationPaymentRisk) UnmarshalJSON(bytes []byte) (err error) {
	varTransferAuthorizationPaymentRisk := _TransferAuthorizationPaymentRisk{}

	if err = json.Unmarshal(bytes, &varTransferAuthorizationPaymentRisk); err == nil {
		*o = TransferAuthorizationPaymentRisk(varTransferAuthorizationPaymentRisk)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "bank_initiated_return_score")
		delete(additionalProperties, "customer_initiated_return_score")
		delete(additionalProperties, "risk_level")
		delete(additionalProperties, "warnings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransferAuthorizationPaymentRisk struct {
	value *TransferAuthorizationPaymentRisk
	isSet bool
}

func (v NullableTransferAuthorizationPaymentRisk) Get() *TransferAuthorizationPaymentRisk {
	return v.value
}

func (v *NullableTransferAuthorizationPaymentRisk) Set(val *TransferAuthorizationPaymentRisk) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferAuthorizationPaymentRisk) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferAuthorizationPaymentRisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferAuthorizationPaymentRisk(val *TransferAuthorizationPaymentRisk) *NullableTransferAuthorizationPaymentRisk {
	return &NullableTransferAuthorizationPaymentRisk{value: val, isSet: true}
}

func (v NullableTransferAuthorizationPaymentRisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferAuthorizationPaymentRisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


