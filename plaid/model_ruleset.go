/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.627.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// Ruleset Details about the transaction result after evaluated by the requested Ruleset. If a `ruleset_key` is not provided, this field will be omitted. This feature is currently in closed beta; to request access, contact your account manager.
type Ruleset struct {
	// The key of the Ruleset used for this transaction.
	RulesetKey *string `json:"ruleset_key,omitempty"`
	Result RuleResult `json:"result"`
	TriggeredRuleDetails NullableRuleDetails `json:"triggered_rule_details,omitempty"`
	// The evaluated outcome for this transaction. This field is deprecated, use `result` or `triggered_rule_details.custom_action_key` instead.
	Outcome *string `json:"outcome,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Ruleset Ruleset

// NewRuleset instantiates a new Ruleset object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleset(result RuleResult) *Ruleset {
	this := Ruleset{}
	this.Result = result
	return &this
}

// NewRulesetWithDefaults instantiates a new Ruleset object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRulesetWithDefaults() *Ruleset {
	this := Ruleset{}
	return &this
}

// GetRulesetKey returns the RulesetKey field value if set, zero value otherwise.
func (o *Ruleset) GetRulesetKey() string {
	if o == nil || o.RulesetKey == nil {
		var ret string
		return ret
	}
	return *o.RulesetKey
}

// GetRulesetKeyOk returns a tuple with the RulesetKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetRulesetKeyOk() (*string, bool) {
	if o == nil || o.RulesetKey == nil {
		return nil, false
	}
	return o.RulesetKey, true
}

// HasRulesetKey returns a boolean if a field has been set.
func (o *Ruleset) HasRulesetKey() bool {
	if o != nil && o.RulesetKey != nil {
		return true
	}

	return false
}

// SetRulesetKey gets a reference to the given string and assigns it to the RulesetKey field.
func (o *Ruleset) SetRulesetKey(v string) {
	o.RulesetKey = &v
}

// GetResult returns the Result field value
func (o *Ruleset) GetResult() RuleResult {
	if o == nil {
		var ret RuleResult
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *Ruleset) GetResultOk() (*RuleResult, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *Ruleset) SetResult(v RuleResult) {
	o.Result = v
}

// GetTriggeredRuleDetails returns the TriggeredRuleDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ruleset) GetTriggeredRuleDetails() RuleDetails {
	if o == nil || o.TriggeredRuleDetails.Get() == nil {
		var ret RuleDetails
		return ret
	}
	return *o.TriggeredRuleDetails.Get()
}

// GetTriggeredRuleDetailsOk returns a tuple with the TriggeredRuleDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ruleset) GetTriggeredRuleDetailsOk() (*RuleDetails, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TriggeredRuleDetails.Get(), o.TriggeredRuleDetails.IsSet()
}

// HasTriggeredRuleDetails returns a boolean if a field has been set.
func (o *Ruleset) HasTriggeredRuleDetails() bool {
	if o != nil && o.TriggeredRuleDetails.IsSet() {
		return true
	}

	return false
}

// SetTriggeredRuleDetails gets a reference to the given NullableRuleDetails and assigns it to the TriggeredRuleDetails field.
func (o *Ruleset) SetTriggeredRuleDetails(v RuleDetails) {
	o.TriggeredRuleDetails.Set(&v)
}
// SetTriggeredRuleDetailsNil sets the value for TriggeredRuleDetails to be an explicit nil
func (o *Ruleset) SetTriggeredRuleDetailsNil() {
	o.TriggeredRuleDetails.Set(nil)
}

// UnsetTriggeredRuleDetails ensures that no value is present for TriggeredRuleDetails, not even an explicit nil
func (o *Ruleset) UnsetTriggeredRuleDetails() {
	o.TriggeredRuleDetails.Unset()
}

// GetOutcome returns the Outcome field value if set, zero value otherwise.
func (o *Ruleset) GetOutcome() string {
	if o == nil || o.Outcome == nil {
		var ret string
		return ret
	}
	return *o.Outcome
}

// GetOutcomeOk returns a tuple with the Outcome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ruleset) GetOutcomeOk() (*string, bool) {
	if o == nil || o.Outcome == nil {
		return nil, false
	}
	return o.Outcome, true
}

// HasOutcome returns a boolean if a field has been set.
func (o *Ruleset) HasOutcome() bool {
	if o != nil && o.Outcome != nil {
		return true
	}

	return false
}

// SetOutcome gets a reference to the given string and assigns it to the Outcome field.
func (o *Ruleset) SetOutcome(v string) {
	o.Outcome = &v
}

func (o Ruleset) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RulesetKey != nil {
		toSerialize["ruleset_key"] = o.RulesetKey
	}
	if true {
		toSerialize["result"] = o.Result
	}
	if o.TriggeredRuleDetails.IsSet() {
		toSerialize["triggered_rule_details"] = o.TriggeredRuleDetails.Get()
	}
	if o.Outcome != nil {
		toSerialize["outcome"] = o.Outcome
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Ruleset) UnmarshalJSON(bytes []byte) (err error) {
	varRuleset := _Ruleset{}

	if err = json.Unmarshal(bytes, &varRuleset); err == nil {
		*o = Ruleset(varRuleset)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ruleset_key")
		delete(additionalProperties, "result")
		delete(additionalProperties, "triggered_rule_details")
		delete(additionalProperties, "outcome")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRuleset struct {
	value *Ruleset
	isSet bool
}

func (v NullableRuleset) Get() *Ruleset {
	return v.value
}

func (v *NullableRuleset) Set(val *Ruleset) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleset) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleset(val *Ruleset) *NullableRuleset {
	return &NullableRuleset{value: val, isSet: true}
}

func (v NullableRuleset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


