/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// BeaconUser A Beacon User represents an end user that has been scanned against the Beacon Network.
type BeaconUser struct {
	// An array of Plaid Item IDs corresponding to the Accounts associated with this Beacon User.
	ItemIds []string `json:"item_ids"`
	// ID of the associated Beacon User.
	Id string `json:"id"`
	// The `version` field begins with 1 and increments each time the user is updated.
	Version int32 `json:"version"`
	// An ISO8601 formatted timestamp.
	CreatedAt time.Time `json:"created_at"`
	// An ISO8601 formatted timestamp. This field indicates the last time the resource was modified.
	UpdatedAt time.Time `json:"updated_at"`
	Status BeaconUserStatus `json:"status"`
	// ID of the associated Beacon Program.
	ProgramId string `json:"program_id"`
	// A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the `/link/token/create` `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
	ClientUserId string `json:"client_user_id"`
	User BeaconUserData `json:"user"`
	AuditTrail BeaconAuditTrail `json:"audit_trail"`
	AdditionalProperties map[string]interface{}
}

type _BeaconUser BeaconUser

// NewBeaconUser instantiates a new BeaconUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBeaconUser(itemIds []string, id string, version int32, createdAt time.Time, updatedAt time.Time, status BeaconUserStatus, programId string, clientUserId string, user BeaconUserData, auditTrail BeaconAuditTrail) *BeaconUser {
	this := BeaconUser{}
	this.ItemIds = itemIds
	this.Id = id
	this.Version = version
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Status = status
	this.ProgramId = programId
	this.ClientUserId = clientUserId
	this.User = user
	this.AuditTrail = auditTrail
	return &this
}

// NewBeaconUserWithDefaults instantiates a new BeaconUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBeaconUserWithDefaults() *BeaconUser {
	this := BeaconUser{}
	return &this
}

// GetItemIds returns the ItemIds field value
func (o *BeaconUser) GetItemIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ItemIds
}

// GetItemIdsOk returns a tuple with the ItemIds field value
// and a boolean to check if the value has been set.
func (o *BeaconUser) GetItemIdsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ItemIds, true
}

// SetItemIds sets field value
func (o *BeaconUser) SetItemIds(v []string) {
	o.ItemIds = v
}

// GetId returns the Id field value
func (o *BeaconUser) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BeaconUser) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BeaconUser) SetId(v string) {
	o.Id = v
}

// GetVersion returns the Version field value
func (o *BeaconUser) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *BeaconUser) GetVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *BeaconUser) SetVersion(v int32) {
	o.Version = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *BeaconUser) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BeaconUser) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BeaconUser) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *BeaconUser) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *BeaconUser) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *BeaconUser) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetStatus returns the Status field value
func (o *BeaconUser) GetStatus() BeaconUserStatus {
	if o == nil {
		var ret BeaconUserStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BeaconUser) GetStatusOk() (*BeaconUserStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BeaconUser) SetStatus(v BeaconUserStatus) {
	o.Status = v
}

// GetProgramId returns the ProgramId field value
func (o *BeaconUser) GetProgramId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProgramId
}

// GetProgramIdOk returns a tuple with the ProgramId field value
// and a boolean to check if the value has been set.
func (o *BeaconUser) GetProgramIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ProgramId, true
}

// SetProgramId sets field value
func (o *BeaconUser) SetProgramId(v string) {
	o.ProgramId = v
}

// GetClientUserId returns the ClientUserId field value
func (o *BeaconUser) GetClientUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientUserId
}

// GetClientUserIdOk returns a tuple with the ClientUserId field value
// and a boolean to check if the value has been set.
func (o *BeaconUser) GetClientUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ClientUserId, true
}

// SetClientUserId sets field value
func (o *BeaconUser) SetClientUserId(v string) {
	o.ClientUserId = v
}

// GetUser returns the User field value
func (o *BeaconUser) GetUser() BeaconUserData {
	if o == nil {
		var ret BeaconUserData
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *BeaconUser) GetUserOk() (*BeaconUserData, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *BeaconUser) SetUser(v BeaconUserData) {
	o.User = v
}

// GetAuditTrail returns the AuditTrail field value
func (o *BeaconUser) GetAuditTrail() BeaconAuditTrail {
	if o == nil {
		var ret BeaconAuditTrail
		return ret
	}

	return o.AuditTrail
}

// GetAuditTrailOk returns a tuple with the AuditTrail field value
// and a boolean to check if the value has been set.
func (o *BeaconUser) GetAuditTrailOk() (*BeaconAuditTrail, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AuditTrail, true
}

// SetAuditTrail sets field value
func (o *BeaconUser) SetAuditTrail(v BeaconAuditTrail) {
	o.AuditTrail = v
}

func (o BeaconUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["item_ids"] = o.ItemIds
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["program_id"] = o.ProgramId
	}
	if true {
		toSerialize["client_user_id"] = o.ClientUserId
	}
	if true {
		toSerialize["user"] = o.User
	}
	if true {
		toSerialize["audit_trail"] = o.AuditTrail
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BeaconUser) UnmarshalJSON(bytes []byte) (err error) {
	varBeaconUser := _BeaconUser{}

	if err = json.Unmarshal(bytes, &varBeaconUser); err == nil {
		*o = BeaconUser(varBeaconUser)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "item_ids")
		delete(additionalProperties, "id")
		delete(additionalProperties, "version")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "status")
		delete(additionalProperties, "program_id")
		delete(additionalProperties, "client_user_id")
		delete(additionalProperties, "user")
		delete(additionalProperties, "audit_trail")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBeaconUser struct {
	value *BeaconUser
	isSet bool
}

func (v NullableBeaconUser) Get() *BeaconUser {
	return v.value
}

func (v *NullableBeaconUser) Set(val *BeaconUser) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconUser) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconUser(val *BeaconUser) *NullableBeaconUser {
	return &NullableBeaconUser{value: val, isSet: true}
}

func (v NullableBeaconUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


