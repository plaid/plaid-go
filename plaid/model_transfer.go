/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.214.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// Transfer Represents a transfer within the Transfers API.
type Transfer struct {
	// Plaid’s unique identifier for a transfer.
	Id string `json:"id"`
	AchClass *ACHClass `json:"ach_class,omitempty"`
	// The account ID that should be credited/debited for this transfer.
	AccountId *string `json:"account_id,omitempty"`
	Type TransferType `json:"type"`
	User TransferUserInResponse `json:"user"`
	// The amount of the transfer (decimal string with two digits of precision e.g. \"10.00\").
	Amount string `json:"amount"`
	// The description of the transfer.
	Description string `json:"description"`
	// The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
	Created time.Time `json:"created"`
	Status TransferStatus `json:"status"`
	SweepStatus NullableTransferSweepStatus `json:"sweep_status,omitempty"`
	Network TransferNetwork `json:"network"`
	// When `true`, you can still cancel this transfer.
	Cancellable bool `json:"cancellable"`
	FailureReason NullableTransferFailure `json:"failure_reason"`
	// The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply: - The JSON values must be Strings (no nested JSON objects allowed) - Only ASCII characters may be used - Maximum of 50 key/value pairs - Maximum key length of 40 characters - Maximum value length of 500 characters 
	Metadata map[string]string `json:"metadata"`
	// Plaid’s unique identifier for the origination account that was used for this transfer.
	OriginationAccountId string `json:"origination_account_id"`
	GuaranteeDecision NullableTransferAuthorizationGuaranteeDecision `json:"guarantee_decision"`
	GuaranteeDecisionRationale NullableTransferAuthorizationGuaranteeDecisionRationale `json:"guarantee_decision_rationale"`
	// The currency of the transfer amount, e.g. \"USD\"
	IsoCurrencyCode string `json:"iso_currency_code"`
	// The date 3 business days from settlement date indicating the following ACH returns can no longer happen: R01, R02, R03, R29. This will be of the form YYYY-MM-DD.
	StandardReturnWindow NullableString `json:"standard_return_window"`
	// The date 61 business days from settlement date indicating the following ACH returns can no longer happen: R05, R07, R10, R11, R51, R33, R37, R38, R51, R52, R53. This will be of the form YYYY-MM-DD.
	UnauthorizedReturnWindow NullableString `json:"unauthorized_return_window"`
	// The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a third-party sender (TPS).
	OriginatorClientId NullableString `json:"originator_client_id"`
	// A list of refunds associated with this transfer.
	Refunds []TransferRefund `json:"refunds"`
	// The id of the recurring transfer if this transfer belongs to a recurring transfer.
	RecurringTransferId NullableString `json:"recurring_transfer_id"`
	AdditionalProperties map[string]interface{}
}

type _Transfer Transfer

// NewTransfer instantiates a new Transfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransfer(id string, type_ TransferType, user TransferUserInResponse, amount string, description string, created time.Time, status TransferStatus, network TransferNetwork, cancellable bool, failureReason NullableTransferFailure, metadata map[string]string, originationAccountId string, guaranteeDecision NullableTransferAuthorizationGuaranteeDecision, guaranteeDecisionRationale NullableTransferAuthorizationGuaranteeDecisionRationale, isoCurrencyCode string, standardReturnWindow NullableString, unauthorizedReturnWindow NullableString, originatorClientId NullableString, refunds []TransferRefund, recurringTransferId NullableString) *Transfer {
	this := Transfer{}
	this.Id = id
	this.Type = type_
	this.User = user
	this.Amount = amount
	this.Description = description
	this.Created = created
	this.Status = status
	this.Network = network
	this.Cancellable = cancellable
	this.FailureReason = failureReason
	this.Metadata = metadata
	this.OriginationAccountId = originationAccountId
	this.GuaranteeDecision = guaranteeDecision
	this.GuaranteeDecisionRationale = guaranteeDecisionRationale
	this.IsoCurrencyCode = isoCurrencyCode
	this.StandardReturnWindow = standardReturnWindow
	this.UnauthorizedReturnWindow = unauthorizedReturnWindow
	this.OriginatorClientId = originatorClientId
	this.Refunds = refunds
	this.RecurringTransferId = recurringTransferId
	return &this
}

// NewTransferWithDefaults instantiates a new Transfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransferWithDefaults() *Transfer {
	this := Transfer{}
	return &this
}

// GetId returns the Id field value
func (o *Transfer) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Transfer) SetId(v string) {
	o.Id = v
}

// GetAchClass returns the AchClass field value if set, zero value otherwise.
func (o *Transfer) GetAchClass() ACHClass {
	if o == nil || o.AchClass == nil {
		var ret ACHClass
		return ret
	}
	return *o.AchClass
}

// GetAchClassOk returns a tuple with the AchClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetAchClassOk() (*ACHClass, bool) {
	if o == nil || o.AchClass == nil {
		return nil, false
	}
	return o.AchClass, true
}

// HasAchClass returns a boolean if a field has been set.
func (o *Transfer) HasAchClass() bool {
	if o != nil && o.AchClass != nil {
		return true
	}

	return false
}

// SetAchClass gets a reference to the given ACHClass and assigns it to the AchClass field.
func (o *Transfer) SetAchClass(v ACHClass) {
	o.AchClass = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Transfer) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfer) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Transfer) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Transfer) SetAccountId(v string) {
	o.AccountId = &v
}

// GetType returns the Type field value
func (o *Transfer) GetType() TransferType {
	if o == nil {
		var ret TransferType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetTypeOk() (*TransferType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Transfer) SetType(v TransferType) {
	o.Type = v
}

// GetUser returns the User field value
func (o *Transfer) GetUser() TransferUserInResponse {
	if o == nil {
		var ret TransferUserInResponse
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetUserOk() (*TransferUserInResponse, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *Transfer) SetUser(v TransferUserInResponse) {
	o.User = v
}

// GetAmount returns the Amount field value
func (o *Transfer) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Transfer) SetAmount(v string) {
	o.Amount = v
}

// GetDescription returns the Description field value
func (o *Transfer) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Transfer) SetDescription(v string) {
	o.Description = v
}

// GetCreated returns the Created field value
func (o *Transfer) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetCreatedOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Transfer) SetCreated(v time.Time) {
	o.Created = v
}

// GetStatus returns the Status field value
func (o *Transfer) GetStatus() TransferStatus {
	if o == nil {
		var ret TransferStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetStatusOk() (*TransferStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Transfer) SetStatus(v TransferStatus) {
	o.Status = v
}

// GetSweepStatus returns the SweepStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Transfer) GetSweepStatus() TransferSweepStatus {
	if o == nil || o.SweepStatus.Get() == nil {
		var ret TransferSweepStatus
		return ret
	}
	return *o.SweepStatus.Get()
}

// GetSweepStatusOk returns a tuple with the SweepStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transfer) GetSweepStatusOk() (*TransferSweepStatus, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SweepStatus.Get(), o.SweepStatus.IsSet()
}

// HasSweepStatus returns a boolean if a field has been set.
func (o *Transfer) HasSweepStatus() bool {
	if o != nil && o.SweepStatus.IsSet() {
		return true
	}

	return false
}

// SetSweepStatus gets a reference to the given NullableTransferSweepStatus and assigns it to the SweepStatus field.
func (o *Transfer) SetSweepStatus(v TransferSweepStatus) {
	o.SweepStatus.Set(&v)
}
// SetSweepStatusNil sets the value for SweepStatus to be an explicit nil
func (o *Transfer) SetSweepStatusNil() {
	o.SweepStatus.Set(nil)
}

// UnsetSweepStatus ensures that no value is present for SweepStatus, not even an explicit nil
func (o *Transfer) UnsetSweepStatus() {
	o.SweepStatus.Unset()
}

// GetNetwork returns the Network field value
func (o *Transfer) GetNetwork() TransferNetwork {
	if o == nil {
		var ret TransferNetwork
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetNetworkOk() (*TransferNetwork, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *Transfer) SetNetwork(v TransferNetwork) {
	o.Network = v
}

// GetCancellable returns the Cancellable field value
func (o *Transfer) GetCancellable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Cancellable
}

// GetCancellableOk returns a tuple with the Cancellable field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetCancellableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Cancellable, true
}

// SetCancellable sets field value
func (o *Transfer) SetCancellable(v bool) {
	o.Cancellable = v
}

// GetFailureReason returns the FailureReason field value
// If the value is explicit nil, the zero value for TransferFailure will be returned
func (o *Transfer) GetFailureReason() TransferFailure {
	if o == nil || o.FailureReason.Get() == nil {
		var ret TransferFailure
		return ret
	}

	return *o.FailureReason.Get()
}

// GetFailureReasonOk returns a tuple with the FailureReason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transfer) GetFailureReasonOk() (*TransferFailure, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailureReason.Get(), o.FailureReason.IsSet()
}

// SetFailureReason sets field value
func (o *Transfer) SetFailureReason(v TransferFailure) {
	o.FailureReason.Set(&v)
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for map[string]string will be returned
func (o *Transfer) GetMetadata() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transfer) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *Transfer) SetMetadata(v map[string]string) {
	o.Metadata = v
}

// GetOriginationAccountId returns the OriginationAccountId field value
func (o *Transfer) GetOriginationAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginationAccountId
}

// GetOriginationAccountIdOk returns a tuple with the OriginationAccountId field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetOriginationAccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OriginationAccountId, true
}

// SetOriginationAccountId sets field value
func (o *Transfer) SetOriginationAccountId(v string) {
	o.OriginationAccountId = v
}

// GetGuaranteeDecision returns the GuaranteeDecision field value
// If the value is explicit nil, the zero value for TransferAuthorizationGuaranteeDecision will be returned
func (o *Transfer) GetGuaranteeDecision() TransferAuthorizationGuaranteeDecision {
	if o == nil || o.GuaranteeDecision.Get() == nil {
		var ret TransferAuthorizationGuaranteeDecision
		return ret
	}

	return *o.GuaranteeDecision.Get()
}

// GetGuaranteeDecisionOk returns a tuple with the GuaranteeDecision field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transfer) GetGuaranteeDecisionOk() (*TransferAuthorizationGuaranteeDecision, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GuaranteeDecision.Get(), o.GuaranteeDecision.IsSet()
}

// SetGuaranteeDecision sets field value
func (o *Transfer) SetGuaranteeDecision(v TransferAuthorizationGuaranteeDecision) {
	o.GuaranteeDecision.Set(&v)
}

// GetGuaranteeDecisionRationale returns the GuaranteeDecisionRationale field value
// If the value is explicit nil, the zero value for TransferAuthorizationGuaranteeDecisionRationale will be returned
func (o *Transfer) GetGuaranteeDecisionRationale() TransferAuthorizationGuaranteeDecisionRationale {
	if o == nil || o.GuaranteeDecisionRationale.Get() == nil {
		var ret TransferAuthorizationGuaranteeDecisionRationale
		return ret
	}

	return *o.GuaranteeDecisionRationale.Get()
}

// GetGuaranteeDecisionRationaleOk returns a tuple with the GuaranteeDecisionRationale field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transfer) GetGuaranteeDecisionRationaleOk() (*TransferAuthorizationGuaranteeDecisionRationale, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GuaranteeDecisionRationale.Get(), o.GuaranteeDecisionRationale.IsSet()
}

// SetGuaranteeDecisionRationale sets field value
func (o *Transfer) SetGuaranteeDecisionRationale(v TransferAuthorizationGuaranteeDecisionRationale) {
	o.GuaranteeDecisionRationale.Set(&v)
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value
func (o *Transfer) GetIsoCurrencyCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsoCurrencyCode
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsoCurrencyCode, true
}

// SetIsoCurrencyCode sets field value
func (o *Transfer) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode = v
}

// GetStandardReturnWindow returns the StandardReturnWindow field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Transfer) GetStandardReturnWindow() string {
	if o == nil || o.StandardReturnWindow.Get() == nil {
		var ret string
		return ret
	}

	return *o.StandardReturnWindow.Get()
}

// GetStandardReturnWindowOk returns a tuple with the StandardReturnWindow field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transfer) GetStandardReturnWindowOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StandardReturnWindow.Get(), o.StandardReturnWindow.IsSet()
}

// SetStandardReturnWindow sets field value
func (o *Transfer) SetStandardReturnWindow(v string) {
	o.StandardReturnWindow.Set(&v)
}

// GetUnauthorizedReturnWindow returns the UnauthorizedReturnWindow field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Transfer) GetUnauthorizedReturnWindow() string {
	if o == nil || o.UnauthorizedReturnWindow.Get() == nil {
		var ret string
		return ret
	}

	return *o.UnauthorizedReturnWindow.Get()
}

// GetUnauthorizedReturnWindowOk returns a tuple with the UnauthorizedReturnWindow field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transfer) GetUnauthorizedReturnWindowOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnauthorizedReturnWindow.Get(), o.UnauthorizedReturnWindow.IsSet()
}

// SetUnauthorizedReturnWindow sets field value
func (o *Transfer) SetUnauthorizedReturnWindow(v string) {
	o.UnauthorizedReturnWindow.Set(&v)
}

// GetOriginatorClientId returns the OriginatorClientId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Transfer) GetOriginatorClientId() string {
	if o == nil || o.OriginatorClientId.Get() == nil {
		var ret string
		return ret
	}

	return *o.OriginatorClientId.Get()
}

// GetOriginatorClientIdOk returns a tuple with the OriginatorClientId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transfer) GetOriginatorClientIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OriginatorClientId.Get(), o.OriginatorClientId.IsSet()
}

// SetOriginatorClientId sets field value
func (o *Transfer) SetOriginatorClientId(v string) {
	o.OriginatorClientId.Set(&v)
}

// GetRefunds returns the Refunds field value
func (o *Transfer) GetRefunds() []TransferRefund {
	if o == nil {
		var ret []TransferRefund
		return ret
	}

	return o.Refunds
}

// GetRefundsOk returns a tuple with the Refunds field value
// and a boolean to check if the value has been set.
func (o *Transfer) GetRefundsOk() (*[]TransferRefund, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Refunds, true
}

// SetRefunds sets field value
func (o *Transfer) SetRefunds(v []TransferRefund) {
	o.Refunds = v
}

// GetRecurringTransferId returns the RecurringTransferId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Transfer) GetRecurringTransferId() string {
	if o == nil || o.RecurringTransferId.Get() == nil {
		var ret string
		return ret
	}

	return *o.RecurringTransferId.Get()
}

// GetRecurringTransferIdOk returns a tuple with the RecurringTransferId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transfer) GetRecurringTransferIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RecurringTransferId.Get(), o.RecurringTransferId.IsSet()
}

// SetRecurringTransferId sets field value
func (o *Transfer) SetRecurringTransferId(v string) {
	o.RecurringTransferId.Set(&v)
}

func (o Transfer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.AchClass != nil {
		toSerialize["ach_class"] = o.AchClass
	}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["user"] = o.User
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.SweepStatus.IsSet() {
		toSerialize["sweep_status"] = o.SweepStatus.Get()
	}
	if true {
		toSerialize["network"] = o.Network
	}
	if true {
		toSerialize["cancellable"] = o.Cancellable
	}
	if true {
		toSerialize["failure_reason"] = o.FailureReason.Get()
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["origination_account_id"] = o.OriginationAccountId
	}
	if true {
		toSerialize["guarantee_decision"] = o.GuaranteeDecision.Get()
	}
	if true {
		toSerialize["guarantee_decision_rationale"] = o.GuaranteeDecisionRationale.Get()
	}
	if true {
		toSerialize["iso_currency_code"] = o.IsoCurrencyCode
	}
	if true {
		toSerialize["standard_return_window"] = o.StandardReturnWindow.Get()
	}
	if true {
		toSerialize["unauthorized_return_window"] = o.UnauthorizedReturnWindow.Get()
	}
	if true {
		toSerialize["originator_client_id"] = o.OriginatorClientId.Get()
	}
	if true {
		toSerialize["refunds"] = o.Refunds
	}
	if true {
		toSerialize["recurring_transfer_id"] = o.RecurringTransferId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *Transfer) UnmarshalJSON(bytes []byte) (err error) {
	varTransfer := _Transfer{}

	if err = json.Unmarshal(bytes, &varTransfer); err == nil {
		*o = Transfer(varTransfer)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "ach_class")
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "user")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "description")
		delete(additionalProperties, "created")
		delete(additionalProperties, "status")
		delete(additionalProperties, "sweep_status")
		delete(additionalProperties, "network")
		delete(additionalProperties, "cancellable")
		delete(additionalProperties, "failure_reason")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "origination_account_id")
		delete(additionalProperties, "guarantee_decision")
		delete(additionalProperties, "guarantee_decision_rationale")
		delete(additionalProperties, "iso_currency_code")
		delete(additionalProperties, "standard_return_window")
		delete(additionalProperties, "unauthorized_return_window")
		delete(additionalProperties, "originator_client_id")
		delete(additionalProperties, "refunds")
		delete(additionalProperties, "recurring_transfer_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTransfer struct {
	value *Transfer
	isSet bool
}

func (v NullableTransfer) Get() *Transfer {
	return v.value
}

func (v *NullableTransfer) Set(val *Transfer) {
	v.value = val
	v.isSet = true
}

func (v NullableTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransfer(val *Transfer) *NullableTransfer {
	return &NullableTransfer{value: val, isSet: true}
}

func (v NullableTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


