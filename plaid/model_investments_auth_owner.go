/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.391.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// InvestmentsAuthOwner Information on the ownership of an investments account
type InvestmentsAuthOwner struct {
	// The ID of the account that this identity information pertains to
	AccountId *string `json:"account_id,omitempty"`
	// A list of names associated with the account by the financial institution. In the case of a joint account, Plaid will make a best effort to report the names of all account holders.  If an Item contains multiple accounts with different owner names, some institutions will report all names associated with the Item in each account's `names` array.
	Names *[]string `json:"names,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InvestmentsAuthOwner InvestmentsAuthOwner

// NewInvestmentsAuthOwner instantiates a new InvestmentsAuthOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvestmentsAuthOwner() *InvestmentsAuthOwner {
	this := InvestmentsAuthOwner{}
	return &this
}

// NewInvestmentsAuthOwnerWithDefaults instantiates a new InvestmentsAuthOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvestmentsAuthOwnerWithDefaults() *InvestmentsAuthOwner {
	this := InvestmentsAuthOwner{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *InvestmentsAuthOwner) GetAccountId() string {
	if o == nil || o.AccountId == nil {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentsAuthOwner) GetAccountIdOk() (*string, bool) {
	if o == nil || o.AccountId == nil {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *InvestmentsAuthOwner) HasAccountId() bool {
	if o != nil && o.AccountId != nil {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *InvestmentsAuthOwner) SetAccountId(v string) {
	o.AccountId = &v
}

// GetNames returns the Names field value if set, zero value otherwise.
func (o *InvestmentsAuthOwner) GetNames() []string {
	if o == nil || o.Names == nil {
		var ret []string
		return ret
	}
	return *o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvestmentsAuthOwner) GetNamesOk() (*[]string, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *InvestmentsAuthOwner) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *InvestmentsAuthOwner) SetNames(v []string) {
	o.Names = &v
}

func (o InvestmentsAuthOwner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountId != nil {
		toSerialize["account_id"] = o.AccountId
	}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *InvestmentsAuthOwner) UnmarshalJSON(bytes []byte) (err error) {
	varInvestmentsAuthOwner := _InvestmentsAuthOwner{}

	if err = json.Unmarshal(bytes, &varInvestmentsAuthOwner); err == nil {
		*o = InvestmentsAuthOwner(varInvestmentsAuthOwner)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "names")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInvestmentsAuthOwner struct {
	value *InvestmentsAuthOwner
	isSet bool
}

func (v NullableInvestmentsAuthOwner) Get() *InvestmentsAuthOwner {
	return v.value
}

func (v *NullableInvestmentsAuthOwner) Set(val *InvestmentsAuthOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableInvestmentsAuthOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableInvestmentsAuthOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvestmentsAuthOwner(val *InvestmentsAuthOwner) *NullableInvestmentsAuthOwner {
	return &NullableInvestmentsAuthOwner{value: val, isSet: true}
}

func (v NullableInvestmentsAuthOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvestmentsAuthOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


