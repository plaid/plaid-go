/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// BeaconMatchSummaryCode An enum indicating the match type between two Beacon Users.   `match` indicates that the provided input data was a strong match against the other Beacon User.  `partial_match` indicates the data approximately matched the other Beacon User. For example, \"Knope\" vs. \"Knope-Wyatt\" for last name.  `no_match` indicates that Plaid was able to compare this field against the other Beacon User and it did not match the provided input data.  `no_data` indicates that Plaid was unable to compare this field against the original Beacon User because the field was not present in one of the Beacon Users.
type BeaconMatchSummaryCode string

var _ = fmt.Printf

// List of BeaconMatchSummaryCode
const (
	BEACONMATCHSUMMARYCODE_MATCH BeaconMatchSummaryCode = "match"
	BEACONMATCHSUMMARYCODE_PARTIAL_MATCH BeaconMatchSummaryCode = "partial_match"
	BEACONMATCHSUMMARYCODE_NO_MATCH BeaconMatchSummaryCode = "no_match"
	BEACONMATCHSUMMARYCODE_NO_DATA BeaconMatchSummaryCode = "no_data"
)

var allowedBeaconMatchSummaryCodeEnumValues = []BeaconMatchSummaryCode{
	"match",
	"partial_match",
	"no_match",
	"no_data",
}

func (v *BeaconMatchSummaryCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := BeaconMatchSummaryCode(value)


	*v = enumTypeValue
	return nil
}

// NewBeaconMatchSummaryCodeFromValue returns a pointer to a valid BeaconMatchSummaryCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBeaconMatchSummaryCodeFromValue(v string) (*BeaconMatchSummaryCode, error) {
	ev := BeaconMatchSummaryCode(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BeaconMatchSummaryCode) IsValid() bool {
	for _, existing := range allowedBeaconMatchSummaryCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BeaconMatchSummaryCode value
func (v BeaconMatchSummaryCode) Ptr() *BeaconMatchSummaryCode {
	return &v
}

type NullableBeaconMatchSummaryCode struct {
	value *BeaconMatchSummaryCode
	isSet bool
}

func (v NullableBeaconMatchSummaryCode) Get() *BeaconMatchSummaryCode {
	return v.value
}

func (v *NullableBeaconMatchSummaryCode) Set(val *BeaconMatchSummaryCode) {
	v.value = val
	v.isSet = true
}

func (v NullableBeaconMatchSummaryCode) IsSet() bool {
	return v.isSet
}

func (v *NullableBeaconMatchSummaryCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBeaconMatchSummaryCode(val *BeaconMatchSummaryCode) *NullableBeaconMatchSummaryCode {
	return &NullableBeaconMatchSummaryCode{value: val, isSet: true}
}

func (v NullableBeaconMatchSummaryCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBeaconMatchSummaryCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

