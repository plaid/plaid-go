/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.410.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// AssetReportTransactionType `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types. 
type AssetReportTransactionType string

var _ = fmt.Printf

// List of AssetReportTransactionType
const (
	ASSETREPORTTRANSACTIONTYPE_DIGITAL AssetReportTransactionType = "digital"
	ASSETREPORTTRANSACTIONTYPE_PLACE AssetReportTransactionType = "place"
	ASSETREPORTTRANSACTIONTYPE_SPECIAL AssetReportTransactionType = "special"
	ASSETREPORTTRANSACTIONTYPE_UNRESOLVED AssetReportTransactionType = "unresolved"
)

var allowedAssetReportTransactionTypeEnumValues = []AssetReportTransactionType{
	"digital",
	"place",
	"special",
	"unresolved",
}

func (v *AssetReportTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := AssetReportTransactionType(value)


	*v = enumTypeValue
	return nil
}

// NewAssetReportTransactionTypeFromValue returns a pointer to a valid AssetReportTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetReportTransactionTypeFromValue(v string) (*AssetReportTransactionType, error) {
	ev := AssetReportTransactionType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetReportTransactionType) IsValid() bool {
	for _, existing := range allowedAssetReportTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AssetReportTransactionType value
func (v AssetReportTransactionType) Ptr() *AssetReportTransactionType {
	return &v
}

type NullableAssetReportTransactionType struct {
	value *AssetReportTransactionType
	isSet bool
}

func (v NullableAssetReportTransactionType) Get() *AssetReportTransactionType {
	return v.value
}

func (v *NullableAssetReportTransactionType) Set(val *AssetReportTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetReportTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetReportTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetReportTransactionType(val *AssetReportTransactionType) *NullableAssetReportTransactionType {
	return &NullableAssetReportTransactionType{value: val, isSet: true}
}

func (v NullableAssetReportTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetReportTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

