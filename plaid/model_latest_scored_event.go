/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.658.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"time"
)

// LatestScoredEvent The latest scored event for a user.
type LatestScoredEvent struct {
	// The event ID.
	EventId string `json:"event_id"`
	// The timestamp of the event, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `\"2017-09-14T14:42:19.350Z\"`
	Timestamp time.Time `json:"timestamp"`
	// The type of event.
	EventType *string `json:"event_type,omitempty"`
	TrustIndex NullableTrustIndex `json:"trust_index"`
	// Event fraud attributes as an arbitrary set of key-value pairs.
	FraudAttributes map[string]map[string]interface{} `json:"fraud_attributes"`
	AdditionalProperties map[string]interface{}
}

type _LatestScoredEvent LatestScoredEvent

// NewLatestScoredEvent instantiates a new LatestScoredEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLatestScoredEvent(eventId string, timestamp time.Time, trustIndex NullableTrustIndex, fraudAttributes map[string]map[string]interface{}) *LatestScoredEvent {
	this := LatestScoredEvent{}
	this.EventId = eventId
	this.Timestamp = timestamp
	this.TrustIndex = trustIndex
	this.FraudAttributes = fraudAttributes
	return &this
}

// NewLatestScoredEventWithDefaults instantiates a new LatestScoredEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLatestScoredEventWithDefaults() *LatestScoredEvent {
	this := LatestScoredEvent{}
	return &this
}

// GetEventId returns the EventId field value
func (o *LatestScoredEvent) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *LatestScoredEvent) GetEventIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *LatestScoredEvent) SetEventId(v string) {
	o.EventId = v
}

// GetTimestamp returns the Timestamp field value
func (o *LatestScoredEvent) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *LatestScoredEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *LatestScoredEvent) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *LatestScoredEvent) GetEventType() string {
	if o == nil || o.EventType == nil {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LatestScoredEvent) GetEventTypeOk() (*string, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *LatestScoredEvent) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *LatestScoredEvent) SetEventType(v string) {
	o.EventType = &v
}

// GetTrustIndex returns the TrustIndex field value
// If the value is explicit nil, the zero value for TrustIndex will be returned
func (o *LatestScoredEvent) GetTrustIndex() TrustIndex {
	if o == nil || o.TrustIndex.Get() == nil {
		var ret TrustIndex
		return ret
	}

	return *o.TrustIndex.Get()
}

// GetTrustIndexOk returns a tuple with the TrustIndex field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LatestScoredEvent) GetTrustIndexOk() (*TrustIndex, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TrustIndex.Get(), o.TrustIndex.IsSet()
}

// SetTrustIndex sets field value
func (o *LatestScoredEvent) SetTrustIndex(v TrustIndex) {
	o.TrustIndex.Set(&v)
}

// GetFraudAttributes returns the FraudAttributes field value
// If the value is explicit nil, the zero value for map[string]map[string]interface{} will be returned
func (o *LatestScoredEvent) GetFraudAttributes() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}

	return o.FraudAttributes
}

// GetFraudAttributesOk returns a tuple with the FraudAttributes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LatestScoredEvent) GetFraudAttributesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.FraudAttributes == nil {
		return nil, false
	}
	return &o.FraudAttributes, true
}

// SetFraudAttributes sets field value
func (o *LatestScoredEvent) SetFraudAttributes(v map[string]map[string]interface{}) {
	o.FraudAttributes = v
}

func (o LatestScoredEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event_id"] = o.EventId
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.EventType != nil {
		toSerialize["event_type"] = o.EventType
	}
	if true {
		toSerialize["trust_index"] = o.TrustIndex.Get()
	}
	if o.FraudAttributes != nil {
		toSerialize["fraud_attributes"] = o.FraudAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *LatestScoredEvent) UnmarshalJSON(bytes []byte) (err error) {
	varLatestScoredEvent := _LatestScoredEvent{}

	if err = json.Unmarshal(bytes, &varLatestScoredEvent); err == nil {
		*o = LatestScoredEvent(varLatestScoredEvent)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "event_id")
		delete(additionalProperties, "timestamp")
		delete(additionalProperties, "event_type")
		delete(additionalProperties, "trust_index")
		delete(additionalProperties, "fraud_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLatestScoredEvent struct {
	value *LatestScoredEvent
	isSet bool
}

func (v NullableLatestScoredEvent) Get() *LatestScoredEvent {
	return v.value
}

func (v *NullableLatestScoredEvent) Set(val *LatestScoredEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableLatestScoredEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableLatestScoredEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLatestScoredEvent(val *LatestScoredEvent) *NullableLatestScoredEvent {
	return &NullableLatestScoredEvent{value: val, isSet: true}
}

func (v NullableLatestScoredEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLatestScoredEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


