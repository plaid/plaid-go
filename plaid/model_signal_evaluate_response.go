/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.565.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// SignalEvaluateResponse SignalEvaluateResponse defines the response schema for `/signal/income/evaluate`
type SignalEvaluateResponse struct {
	// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
	RequestId string `json:"request_id"`
	Scores SignalScores `json:"scores"`
	CoreAttributes *SignalEvaluateCoreAttributes `json:"core_attributes,omitempty"`
	RiskProfile NullableRiskProfile `json:"risk_profile,omitempty"`
	Ruleset NullableRuleset `json:"ruleset,omitempty"`
	// If bank information was not available to be used in the Signal model, this array contains warnings describing why bank data is missing. If you want to receive an API error instead of Signal scores in the case of missing bank data, file a support ticket or contact your Plaid account manager.
	Warnings []SignalWarning `json:"warnings"`
	AdditionalProperties map[string]interface{}
}

type _SignalEvaluateResponse SignalEvaluateResponse

// NewSignalEvaluateResponse instantiates a new SignalEvaluateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalEvaluateResponse(requestId string, scores SignalScores, warnings []SignalWarning) *SignalEvaluateResponse {
	this := SignalEvaluateResponse{}
	this.RequestId = requestId
	this.Scores = scores
	this.Warnings = warnings
	return &this
}

// NewSignalEvaluateResponseWithDefaults instantiates a new SignalEvaluateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalEvaluateResponseWithDefaults() *SignalEvaluateResponse {
	this := SignalEvaluateResponse{}
	return &this
}

// GetRequestId returns the RequestId field value
func (o *SignalEvaluateResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *SignalEvaluateResponse) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *SignalEvaluateResponse) SetRequestId(v string) {
	o.RequestId = v
}

// GetScores returns the Scores field value
func (o *SignalEvaluateResponse) GetScores() SignalScores {
	if o == nil {
		var ret SignalScores
		return ret
	}

	return o.Scores
}

// GetScoresOk returns a tuple with the Scores field value
// and a boolean to check if the value has been set.
func (o *SignalEvaluateResponse) GetScoresOk() (*SignalScores, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Scores, true
}

// SetScores sets field value
func (o *SignalEvaluateResponse) SetScores(v SignalScores) {
	o.Scores = v
}

// GetCoreAttributes returns the CoreAttributes field value if set, zero value otherwise.
func (o *SignalEvaluateResponse) GetCoreAttributes() SignalEvaluateCoreAttributes {
	if o == nil || o.CoreAttributes == nil {
		var ret SignalEvaluateCoreAttributes
		return ret
	}
	return *o.CoreAttributes
}

// GetCoreAttributesOk returns a tuple with the CoreAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignalEvaluateResponse) GetCoreAttributesOk() (*SignalEvaluateCoreAttributes, bool) {
	if o == nil || o.CoreAttributes == nil {
		return nil, false
	}
	return o.CoreAttributes, true
}

// HasCoreAttributes returns a boolean if a field has been set.
func (o *SignalEvaluateResponse) HasCoreAttributes() bool {
	if o != nil && o.CoreAttributes != nil {
		return true
	}

	return false
}

// SetCoreAttributes gets a reference to the given SignalEvaluateCoreAttributes and assigns it to the CoreAttributes field.
func (o *SignalEvaluateResponse) SetCoreAttributes(v SignalEvaluateCoreAttributes) {
	o.CoreAttributes = &v
}

// GetRiskProfile returns the RiskProfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SignalEvaluateResponse) GetRiskProfile() RiskProfile {
	if o == nil || o.RiskProfile.Get() == nil {
		var ret RiskProfile
		return ret
	}
	return *o.RiskProfile.Get()
}

// GetRiskProfileOk returns a tuple with the RiskProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignalEvaluateResponse) GetRiskProfileOk() (*RiskProfile, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RiskProfile.Get(), o.RiskProfile.IsSet()
}

// HasRiskProfile returns a boolean if a field has been set.
func (o *SignalEvaluateResponse) HasRiskProfile() bool {
	if o != nil && o.RiskProfile.IsSet() {
		return true
	}

	return false
}

// SetRiskProfile gets a reference to the given NullableRiskProfile and assigns it to the RiskProfile field.
func (o *SignalEvaluateResponse) SetRiskProfile(v RiskProfile) {
	o.RiskProfile.Set(&v)
}
// SetRiskProfileNil sets the value for RiskProfile to be an explicit nil
func (o *SignalEvaluateResponse) SetRiskProfileNil() {
	o.RiskProfile.Set(nil)
}

// UnsetRiskProfile ensures that no value is present for RiskProfile, not even an explicit nil
func (o *SignalEvaluateResponse) UnsetRiskProfile() {
	o.RiskProfile.Unset()
}

// GetRuleset returns the Ruleset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SignalEvaluateResponse) GetRuleset() Ruleset {
	if o == nil || o.Ruleset.Get() == nil {
		var ret Ruleset
		return ret
	}
	return *o.Ruleset.Get()
}

// GetRulesetOk returns a tuple with the Ruleset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignalEvaluateResponse) GetRulesetOk() (*Ruleset, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Ruleset.Get(), o.Ruleset.IsSet()
}

// HasRuleset returns a boolean if a field has been set.
func (o *SignalEvaluateResponse) HasRuleset() bool {
	if o != nil && o.Ruleset.IsSet() {
		return true
	}

	return false
}

// SetRuleset gets a reference to the given NullableRuleset and assigns it to the Ruleset field.
func (o *SignalEvaluateResponse) SetRuleset(v Ruleset) {
	o.Ruleset.Set(&v)
}
// SetRulesetNil sets the value for Ruleset to be an explicit nil
func (o *SignalEvaluateResponse) SetRulesetNil() {
	o.Ruleset.Set(nil)
}

// UnsetRuleset ensures that no value is present for Ruleset, not even an explicit nil
func (o *SignalEvaluateResponse) UnsetRuleset() {
	o.Ruleset.Unset()
}

// GetWarnings returns the Warnings field value
func (o *SignalEvaluateResponse) GetWarnings() []SignalWarning {
	if o == nil {
		var ret []SignalWarning
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
func (o *SignalEvaluateResponse) GetWarningsOk() (*[]SignalWarning, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Warnings, true
}

// SetWarnings sets field value
func (o *SignalEvaluateResponse) SetWarnings(v []SignalWarning) {
	o.Warnings = v
}

func (o SignalEvaluateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["request_id"] = o.RequestId
	}
	if true {
		toSerialize["scores"] = o.Scores
	}
	if o.CoreAttributes != nil {
		toSerialize["core_attributes"] = o.CoreAttributes
	}
	if o.RiskProfile.IsSet() {
		toSerialize["risk_profile"] = o.RiskProfile.Get()
	}
	if o.Ruleset.IsSet() {
		toSerialize["ruleset"] = o.Ruleset.Get()
	}
	if true {
		toSerialize["warnings"] = o.Warnings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SignalEvaluateResponse) UnmarshalJSON(bytes []byte) (err error) {
	varSignalEvaluateResponse := _SignalEvaluateResponse{}

	if err = json.Unmarshal(bytes, &varSignalEvaluateResponse); err == nil {
		*o = SignalEvaluateResponse(varSignalEvaluateResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "request_id")
		delete(additionalProperties, "scores")
		delete(additionalProperties, "core_attributes")
		delete(additionalProperties, "risk_profile")
		delete(additionalProperties, "ruleset")
		delete(additionalProperties, "warnings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSignalEvaluateResponse struct {
	value *SignalEvaluateResponse
	isSet bool
}

func (v NullableSignalEvaluateResponse) Get() *SignalEvaluateResponse {
	return v.value
}

func (v *NullableSignalEvaluateResponse) Set(val *SignalEvaluateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalEvaluateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalEvaluateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalEvaluateResponse(val *SignalEvaluateResponse) *NullableSignalEvaluateResponse {
	return &NullableSignalEvaluateResponse{value: val, isSet: true}
}

func (v NullableSignalEvaluateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalEvaluateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


