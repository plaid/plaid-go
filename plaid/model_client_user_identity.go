/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// ClientUserIdentity ClientUserIdentity is the shared user identity construct across /user/_* routes.
type ClientUserIdentity struct {
	Name *ClientUserIdentityName `json:"name,omitempty"`
	// The user's date of birth, to be provided in the format \"yyyy-mm-dd\".
	DateOfBirth NullableString `json:"date_of_birth,omitempty"`
	// The user's emails.
	Emails *[]ClientUserIdentityEmail `json:"emails,omitempty"`
	// The user's phone numbers, in E.164 format: +{countrycode}{number}. For example: \"+14157452130\". Phone numbers provided in other formats will be parsed on a best-effort basis. Phone number input is validated against valid number ranges; number strings that do not match a real-world phone numbering scheme may cause the request to fail, even in the Sandbox test environment.
	PhoneNumbers *[]ClientUserIdentityPhoneNumber `json:"phone_numbers,omitempty"`
	// The user's addresses.
	Addresses *[]ClientUserIdentityAddress `json:"addresses,omitempty"`
	// The user's ID numbers.
	IdNumbers *[]UserIDNumber `json:"id_numbers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ClientUserIdentity ClientUserIdentity

// NewClientUserIdentity instantiates a new ClientUserIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientUserIdentity() *ClientUserIdentity {
	this := ClientUserIdentity{}
	return &this
}

// NewClientUserIdentityWithDefaults instantiates a new ClientUserIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientUserIdentityWithDefaults() *ClientUserIdentity {
	this := ClientUserIdentity{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClientUserIdentity) GetName() ClientUserIdentityName {
	if o == nil || o.Name == nil {
		var ret ClientUserIdentityName
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientUserIdentity) GetNameOk() (*ClientUserIdentityName, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClientUserIdentity) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given ClientUserIdentityName and assigns it to the Name field.
func (o *ClientUserIdentity) SetName(v ClientUserIdentityName) {
	o.Name = &v
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientUserIdentity) GetDateOfBirth() string {
	if o == nil || o.DateOfBirth.Get() == nil {
		var ret string
		return ret
	}
	return *o.DateOfBirth.Get()
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientUserIdentity) GetDateOfBirthOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DateOfBirth.Get(), o.DateOfBirth.IsSet()
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *ClientUserIdentity) HasDateOfBirth() bool {
	if o != nil && o.DateOfBirth.IsSet() {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given NullableString and assigns it to the DateOfBirth field.
func (o *ClientUserIdentity) SetDateOfBirth(v string) {
	o.DateOfBirth.Set(&v)
}
// SetDateOfBirthNil sets the value for DateOfBirth to be an explicit nil
func (o *ClientUserIdentity) SetDateOfBirthNil() {
	o.DateOfBirth.Set(nil)
}

// UnsetDateOfBirth ensures that no value is present for DateOfBirth, not even an explicit nil
func (o *ClientUserIdentity) UnsetDateOfBirth() {
	o.DateOfBirth.Unset()
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *ClientUserIdentity) GetEmails() []ClientUserIdentityEmail {
	if o == nil || o.Emails == nil {
		var ret []ClientUserIdentityEmail
		return ret
	}
	return *o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientUserIdentity) GetEmailsOk() (*[]ClientUserIdentityEmail, bool) {
	if o == nil || o.Emails == nil {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *ClientUserIdentity) HasEmails() bool {
	if o != nil && o.Emails != nil {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []ClientUserIdentityEmail and assigns it to the Emails field.
func (o *ClientUserIdentity) SetEmails(v []ClientUserIdentityEmail) {
	o.Emails = &v
}

// GetPhoneNumbers returns the PhoneNumbers field value if set, zero value otherwise.
func (o *ClientUserIdentity) GetPhoneNumbers() []ClientUserIdentityPhoneNumber {
	if o == nil || o.PhoneNumbers == nil {
		var ret []ClientUserIdentityPhoneNumber
		return ret
	}
	return *o.PhoneNumbers
}

// GetPhoneNumbersOk returns a tuple with the PhoneNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientUserIdentity) GetPhoneNumbersOk() (*[]ClientUserIdentityPhoneNumber, bool) {
	if o == nil || o.PhoneNumbers == nil {
		return nil, false
	}
	return o.PhoneNumbers, true
}

// HasPhoneNumbers returns a boolean if a field has been set.
func (o *ClientUserIdentity) HasPhoneNumbers() bool {
	if o != nil && o.PhoneNumbers != nil {
		return true
	}

	return false
}

// SetPhoneNumbers gets a reference to the given []ClientUserIdentityPhoneNumber and assigns it to the PhoneNumbers field.
func (o *ClientUserIdentity) SetPhoneNumbers(v []ClientUserIdentityPhoneNumber) {
	o.PhoneNumbers = &v
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *ClientUserIdentity) GetAddresses() []ClientUserIdentityAddress {
	if o == nil || o.Addresses == nil {
		var ret []ClientUserIdentityAddress
		return ret
	}
	return *o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientUserIdentity) GetAddressesOk() (*[]ClientUserIdentityAddress, bool) {
	if o == nil || o.Addresses == nil {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *ClientUserIdentity) HasAddresses() bool {
	if o != nil && o.Addresses != nil {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []ClientUserIdentityAddress and assigns it to the Addresses field.
func (o *ClientUserIdentity) SetAddresses(v []ClientUserIdentityAddress) {
	o.Addresses = &v
}

// GetIdNumbers returns the IdNumbers field value if set, zero value otherwise.
func (o *ClientUserIdentity) GetIdNumbers() []UserIDNumber {
	if o == nil || o.IdNumbers == nil {
		var ret []UserIDNumber
		return ret
	}
	return *o.IdNumbers
}

// GetIdNumbersOk returns a tuple with the IdNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientUserIdentity) GetIdNumbersOk() (*[]UserIDNumber, bool) {
	if o == nil || o.IdNumbers == nil {
		return nil, false
	}
	return o.IdNumbers, true
}

// HasIdNumbers returns a boolean if a field has been set.
func (o *ClientUserIdentity) HasIdNumbers() bool {
	if o != nil && o.IdNumbers != nil {
		return true
	}

	return false
}

// SetIdNumbers gets a reference to the given []UserIDNumber and assigns it to the IdNumbers field.
func (o *ClientUserIdentity) SetIdNumbers(v []UserIDNumber) {
	o.IdNumbers = &v
}

func (o ClientUserIdentity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DateOfBirth.IsSet() {
		toSerialize["date_of_birth"] = o.DateOfBirth.Get()
	}
	if o.Emails != nil {
		toSerialize["emails"] = o.Emails
	}
	if o.PhoneNumbers != nil {
		toSerialize["phone_numbers"] = o.PhoneNumbers
	}
	if o.Addresses != nil {
		toSerialize["addresses"] = o.Addresses
	}
	if o.IdNumbers != nil {
		toSerialize["id_numbers"] = o.IdNumbers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ClientUserIdentity) UnmarshalJSON(bytes []byte) (err error) {
	varClientUserIdentity := _ClientUserIdentity{}

	if err = json.Unmarshal(bytes, &varClientUserIdentity); err == nil {
		*o = ClientUserIdentity(varClientUserIdentity)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "date_of_birth")
		delete(additionalProperties, "emails")
		delete(additionalProperties, "phone_numbers")
		delete(additionalProperties, "addresses")
		delete(additionalProperties, "id_numbers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableClientUserIdentity struct {
	value *ClientUserIdentity
	isSet bool
}

func (v NullableClientUserIdentity) Get() *ClientUserIdentity {
	return v.value
}

func (v *NullableClientUserIdentity) Set(val *ClientUserIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableClientUserIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableClientUserIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientUserIdentity(val *ClientUserIdentity) *NullableClientUserIdentity {
	return &NullableClientUserIdentity{value: val, isSet: true}
}

func (v NullableClientUserIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientUserIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


