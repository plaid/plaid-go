/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.410.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// EnrichTransactionDirection The direction of the transaction from the perspective of the account holder:  `OUTFLOW` - Includes outgoing transfers, purchases, and fees. (Typically represented as a negative value on checking accounts and debit cards and a positive value on credit cards.)  `INFLOW` - Includes incoming transfers, refunds, and income. (Typically represented as a positive value on checking accounts and debit cards and a negative value on credit cards.)
type EnrichTransactionDirection string

var _ = fmt.Printf

// List of EnrichTransactionDirection
const (
	ENRICHTRANSACTIONDIRECTION_INFLOW EnrichTransactionDirection = "INFLOW"
	ENRICHTRANSACTIONDIRECTION_OUTFLOW EnrichTransactionDirection = "OUTFLOW"
)

var allowedEnrichTransactionDirectionEnumValues = []EnrichTransactionDirection{
	"INFLOW",
	"OUTFLOW",
}

func (v *EnrichTransactionDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := EnrichTransactionDirection(value)


	*v = enumTypeValue
	return nil
}

// NewEnrichTransactionDirectionFromValue returns a pointer to a valid EnrichTransactionDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnrichTransactionDirectionFromValue(v string) (*EnrichTransactionDirection, error) {
	ev := EnrichTransactionDirection(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnrichTransactionDirection) IsValid() bool {
	for _, existing := range allowedEnrichTransactionDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnrichTransactionDirection value
func (v EnrichTransactionDirection) Ptr() *EnrichTransactionDirection {
	return &v
}

type NullableEnrichTransactionDirection struct {
	value *EnrichTransactionDirection
	isSet bool
}

func (v NullableEnrichTransactionDirection) Get() *EnrichTransactionDirection {
	return v.value
}

func (v *NullableEnrichTransactionDirection) Set(val *EnrichTransactionDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableEnrichTransactionDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableEnrichTransactionDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnrichTransactionDirection(val *EnrichTransactionDirection) *NullableEnrichTransactionDirection {
	return &NullableEnrichTransactionDirection{value: val, isSet: true}
}

func (v NullableEnrichTransactionDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnrichTransactionDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

