/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.565.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// IdentityDocumentUploadRiskSignal Risk signals tied to the document
type IdentityDocumentUploadRiskSignal struct {
	Type NullableString `json:"type,omitempty"`
	HasFraudRisk NullableBool `json:"has_fraud_risk,omitempty"`
	SignalDescription NullableString `json:"signal_description,omitempty"`
	PageNumber NullableInt32 `json:"page_number,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IdentityDocumentUploadRiskSignal IdentityDocumentUploadRiskSignal

// NewIdentityDocumentUploadRiskSignal instantiates a new IdentityDocumentUploadRiskSignal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityDocumentUploadRiskSignal() *IdentityDocumentUploadRiskSignal {
	this := IdentityDocumentUploadRiskSignal{}
	return &this
}

// NewIdentityDocumentUploadRiskSignalWithDefaults instantiates a new IdentityDocumentUploadRiskSignal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityDocumentUploadRiskSignalWithDefaults() *IdentityDocumentUploadRiskSignal {
	this := IdentityDocumentUploadRiskSignal{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityDocumentUploadRiskSignal) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityDocumentUploadRiskSignal) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *IdentityDocumentUploadRiskSignal) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *IdentityDocumentUploadRiskSignal) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *IdentityDocumentUploadRiskSignal) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *IdentityDocumentUploadRiskSignal) UnsetType() {
	o.Type.Unset()
}

// GetHasFraudRisk returns the HasFraudRisk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityDocumentUploadRiskSignal) GetHasFraudRisk() bool {
	if o == nil || o.HasFraudRisk.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasFraudRisk.Get()
}

// GetHasFraudRiskOk returns a tuple with the HasFraudRisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityDocumentUploadRiskSignal) GetHasFraudRiskOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasFraudRisk.Get(), o.HasFraudRisk.IsSet()
}

// HasHasFraudRisk returns a boolean if a field has been set.
func (o *IdentityDocumentUploadRiskSignal) HasHasFraudRisk() bool {
	if o != nil && o.HasFraudRisk.IsSet() {
		return true
	}

	return false
}

// SetHasFraudRisk gets a reference to the given NullableBool and assigns it to the HasFraudRisk field.
func (o *IdentityDocumentUploadRiskSignal) SetHasFraudRisk(v bool) {
	o.HasFraudRisk.Set(&v)
}
// SetHasFraudRiskNil sets the value for HasFraudRisk to be an explicit nil
func (o *IdentityDocumentUploadRiskSignal) SetHasFraudRiskNil() {
	o.HasFraudRisk.Set(nil)
}

// UnsetHasFraudRisk ensures that no value is present for HasFraudRisk, not even an explicit nil
func (o *IdentityDocumentUploadRiskSignal) UnsetHasFraudRisk() {
	o.HasFraudRisk.Unset()
}

// GetSignalDescription returns the SignalDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityDocumentUploadRiskSignal) GetSignalDescription() string {
	if o == nil || o.SignalDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.SignalDescription.Get()
}

// GetSignalDescriptionOk returns a tuple with the SignalDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityDocumentUploadRiskSignal) GetSignalDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SignalDescription.Get(), o.SignalDescription.IsSet()
}

// HasSignalDescription returns a boolean if a field has been set.
func (o *IdentityDocumentUploadRiskSignal) HasSignalDescription() bool {
	if o != nil && o.SignalDescription.IsSet() {
		return true
	}

	return false
}

// SetSignalDescription gets a reference to the given NullableString and assigns it to the SignalDescription field.
func (o *IdentityDocumentUploadRiskSignal) SetSignalDescription(v string) {
	o.SignalDescription.Set(&v)
}
// SetSignalDescriptionNil sets the value for SignalDescription to be an explicit nil
func (o *IdentityDocumentUploadRiskSignal) SetSignalDescriptionNil() {
	o.SignalDescription.Set(nil)
}

// UnsetSignalDescription ensures that no value is present for SignalDescription, not even an explicit nil
func (o *IdentityDocumentUploadRiskSignal) UnsetSignalDescription() {
	o.SignalDescription.Unset()
}

// GetPageNumber returns the PageNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityDocumentUploadRiskSignal) GetPageNumber() int32 {
	if o == nil || o.PageNumber.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PageNumber.Get()
}

// GetPageNumberOk returns a tuple with the PageNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityDocumentUploadRiskSignal) GetPageNumberOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PageNumber.Get(), o.PageNumber.IsSet()
}

// HasPageNumber returns a boolean if a field has been set.
func (o *IdentityDocumentUploadRiskSignal) HasPageNumber() bool {
	if o != nil && o.PageNumber.IsSet() {
		return true
	}

	return false
}

// SetPageNumber gets a reference to the given NullableInt32 and assigns it to the PageNumber field.
func (o *IdentityDocumentUploadRiskSignal) SetPageNumber(v int32) {
	o.PageNumber.Set(&v)
}
// SetPageNumberNil sets the value for PageNumber to be an explicit nil
func (o *IdentityDocumentUploadRiskSignal) SetPageNumberNil() {
	o.PageNumber.Set(nil)
}

// UnsetPageNumber ensures that no value is present for PageNumber, not even an explicit nil
func (o *IdentityDocumentUploadRiskSignal) UnsetPageNumber() {
	o.PageNumber.Unset()
}

func (o IdentityDocumentUploadRiskSignal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.HasFraudRisk.IsSet() {
		toSerialize["has_fraud_risk"] = o.HasFraudRisk.Get()
	}
	if o.SignalDescription.IsSet() {
		toSerialize["signal_description"] = o.SignalDescription.Get()
	}
	if o.PageNumber.IsSet() {
		toSerialize["page_number"] = o.PageNumber.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *IdentityDocumentUploadRiskSignal) UnmarshalJSON(bytes []byte) (err error) {
	varIdentityDocumentUploadRiskSignal := _IdentityDocumentUploadRiskSignal{}

	if err = json.Unmarshal(bytes, &varIdentityDocumentUploadRiskSignal); err == nil {
		*o = IdentityDocumentUploadRiskSignal(varIdentityDocumentUploadRiskSignal)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "has_fraud_risk")
		delete(additionalProperties, "signal_description")
		delete(additionalProperties, "page_number")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityDocumentUploadRiskSignal struct {
	value *IdentityDocumentUploadRiskSignal
	isSet bool
}

func (v NullableIdentityDocumentUploadRiskSignal) Get() *IdentityDocumentUploadRiskSignal {
	return v.value
}

func (v *NullableIdentityDocumentUploadRiskSignal) Set(val *IdentityDocumentUploadRiskSignal) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityDocumentUploadRiskSignal) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityDocumentUploadRiskSignal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityDocumentUploadRiskSignal(val *IdentityDocumentUploadRiskSignal) *NullableIdentityDocumentUploadRiskSignal {
	return &NullableIdentityDocumentUploadRiskSignal{value: val, isSet: true}
}

func (v NullableIdentityDocumentUploadRiskSignal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityDocumentUploadRiskSignal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


