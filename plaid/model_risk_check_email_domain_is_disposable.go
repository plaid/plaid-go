/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.343.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// RiskCheckEmailDomainIsDisposable Indicates whether the email domain is listed as disposable if known. Disposable domains are often used to create email addresses that are part of a fake set of user details.
type RiskCheckEmailDomainIsDisposable string

var _ = fmt.Printf

// List of RiskCheckEmailDomainIsDisposable
const (
	RISKCHECKEMAILDOMAINISDISPOSABLE_YES RiskCheckEmailDomainIsDisposable = "yes"
	RISKCHECKEMAILDOMAINISDISPOSABLE_NO RiskCheckEmailDomainIsDisposable = "no"
	RISKCHECKEMAILDOMAINISDISPOSABLE_NO_DATA RiskCheckEmailDomainIsDisposable = "no_data"
)

var allowedRiskCheckEmailDomainIsDisposableEnumValues = []RiskCheckEmailDomainIsDisposable{
	"yes",
	"no",
	"no_data",
}

func (v *RiskCheckEmailDomainIsDisposable) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := RiskCheckEmailDomainIsDisposable(value)


	*v = enumTypeValue
	return nil
}

// NewRiskCheckEmailDomainIsDisposableFromValue returns a pointer to a valid RiskCheckEmailDomainIsDisposable
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRiskCheckEmailDomainIsDisposableFromValue(v string) (*RiskCheckEmailDomainIsDisposable, error) {
	ev := RiskCheckEmailDomainIsDisposable(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RiskCheckEmailDomainIsDisposable) IsValid() bool {
	for _, existing := range allowedRiskCheckEmailDomainIsDisposableEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RiskCheckEmailDomainIsDisposable value
func (v RiskCheckEmailDomainIsDisposable) Ptr() *RiskCheckEmailDomainIsDisposable {
	return &v
}

type NullableRiskCheckEmailDomainIsDisposable struct {
	value *RiskCheckEmailDomainIsDisposable
	isSet bool
}

func (v NullableRiskCheckEmailDomainIsDisposable) Get() *RiskCheckEmailDomainIsDisposable {
	return v.value
}

func (v *NullableRiskCheckEmailDomainIsDisposable) Set(val *RiskCheckEmailDomainIsDisposable) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskCheckEmailDomainIsDisposable) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskCheckEmailDomainIsDisposable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskCheckEmailDomainIsDisposable(val *RiskCheckEmailDomainIsDisposable) *NullableRiskCheckEmailDomainIsDisposable {
	return &NullableRiskCheckEmailDomainIsDisposable{value: val, isSet: true}
}

func (v NullableRiskCheckEmailDomainIsDisposable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskCheckEmailDomainIsDisposable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

