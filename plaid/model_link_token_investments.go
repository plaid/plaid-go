/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.343.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// LinkTokenInvestments Configuration parameters for the Investments product
type LinkTokenInvestments struct {
	// If `true`, allow self-custody crypto wallets to be added without requiring signature verification. Defaults to `false`.
	AllowUnverifiedCryptoWallets *bool `json:"allow_unverified_crypto_wallets,omitempty"`
}

// NewLinkTokenInvestments instantiates a new LinkTokenInvestments object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkTokenInvestments() *LinkTokenInvestments {
	this := LinkTokenInvestments{}
	return &this
}

// NewLinkTokenInvestmentsWithDefaults instantiates a new LinkTokenInvestments object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkTokenInvestmentsWithDefaults() *LinkTokenInvestments {
	this := LinkTokenInvestments{}
	return &this
}

// GetAllowUnverifiedCryptoWallets returns the AllowUnverifiedCryptoWallets field value if set, zero value otherwise.
func (o *LinkTokenInvestments) GetAllowUnverifiedCryptoWallets() bool {
	if o == nil || o.AllowUnverifiedCryptoWallets == nil {
		var ret bool
		return ret
	}
	return *o.AllowUnverifiedCryptoWallets
}

// GetAllowUnverifiedCryptoWalletsOk returns a tuple with the AllowUnverifiedCryptoWallets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkTokenInvestments) GetAllowUnverifiedCryptoWalletsOk() (*bool, bool) {
	if o == nil || o.AllowUnverifiedCryptoWallets == nil {
		return nil, false
	}
	return o.AllowUnverifiedCryptoWallets, true
}

// HasAllowUnverifiedCryptoWallets returns a boolean if a field has been set.
func (o *LinkTokenInvestments) HasAllowUnverifiedCryptoWallets() bool {
	if o != nil && o.AllowUnverifiedCryptoWallets != nil {
		return true
	}

	return false
}

// SetAllowUnverifiedCryptoWallets gets a reference to the given bool and assigns it to the AllowUnverifiedCryptoWallets field.
func (o *LinkTokenInvestments) SetAllowUnverifiedCryptoWallets(v bool) {
	o.AllowUnverifiedCryptoWallets = &v
}

func (o LinkTokenInvestments) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowUnverifiedCryptoWallets != nil {
		toSerialize["allow_unverified_crypto_wallets"] = o.AllowUnverifiedCryptoWallets
	}
	return json.Marshal(toSerialize)
}

type NullableLinkTokenInvestments struct {
	value *LinkTokenInvestments
	isSet bool
}

func (v NullableLinkTokenInvestments) Get() *LinkTokenInvestments {
	return v.value
}

func (v *NullableLinkTokenInvestments) Set(val *LinkTokenInvestments) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkTokenInvestments) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkTokenInvestments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkTokenInvestments(val *LinkTokenInvestments) *NullableLinkTokenInvestments {
	return &NullableLinkTokenInvestments{value: val, isSet: true}
}

func (v NullableLinkTokenInvestments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkTokenInvestments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


