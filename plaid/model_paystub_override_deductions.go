/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.565.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// PaystubOverrideDeductions An object with the deduction information found on a paystub.
type PaystubOverrideDeductions struct {
	Breakdown *[]PaystubOverrideDeductionsBreakdown `json:"breakdown,omitempty"`
	Total *PaystubOverrideDeductionsTotal `json:"total,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaystubOverrideDeductions PaystubOverrideDeductions

// NewPaystubOverrideDeductions instantiates a new PaystubOverrideDeductions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaystubOverrideDeductions() *PaystubOverrideDeductions {
	this := PaystubOverrideDeductions{}
	return &this
}

// NewPaystubOverrideDeductionsWithDefaults instantiates a new PaystubOverrideDeductions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaystubOverrideDeductionsWithDefaults() *PaystubOverrideDeductions {
	this := PaystubOverrideDeductions{}
	return &this
}

// GetBreakdown returns the Breakdown field value if set, zero value otherwise.
func (o *PaystubOverrideDeductions) GetBreakdown() []PaystubOverrideDeductionsBreakdown {
	if o == nil || o.Breakdown == nil {
		var ret []PaystubOverrideDeductionsBreakdown
		return ret
	}
	return *o.Breakdown
}

// GetBreakdownOk returns a tuple with the Breakdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaystubOverrideDeductions) GetBreakdownOk() (*[]PaystubOverrideDeductionsBreakdown, bool) {
	if o == nil || o.Breakdown == nil {
		return nil, false
	}
	return o.Breakdown, true
}

// HasBreakdown returns a boolean if a field has been set.
func (o *PaystubOverrideDeductions) HasBreakdown() bool {
	if o != nil && o.Breakdown != nil {
		return true
	}

	return false
}

// SetBreakdown gets a reference to the given []PaystubOverrideDeductionsBreakdown and assigns it to the Breakdown field.
func (o *PaystubOverrideDeductions) SetBreakdown(v []PaystubOverrideDeductionsBreakdown) {
	o.Breakdown = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *PaystubOverrideDeductions) GetTotal() PaystubOverrideDeductionsTotal {
	if o == nil || o.Total == nil {
		var ret PaystubOverrideDeductionsTotal
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaystubOverrideDeductions) GetTotalOk() (*PaystubOverrideDeductionsTotal, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *PaystubOverrideDeductions) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given PaystubOverrideDeductionsTotal and assigns it to the Total field.
func (o *PaystubOverrideDeductions) SetTotal(v PaystubOverrideDeductionsTotal) {
	o.Total = &v
}

func (o PaystubOverrideDeductions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Breakdown != nil {
		toSerialize["breakdown"] = o.Breakdown
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PaystubOverrideDeductions) UnmarshalJSON(bytes []byte) (err error) {
	varPaystubOverrideDeductions := _PaystubOverrideDeductions{}

	if err = json.Unmarshal(bytes, &varPaystubOverrideDeductions); err == nil {
		*o = PaystubOverrideDeductions(varPaystubOverrideDeductions)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "breakdown")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaystubOverrideDeductions struct {
	value *PaystubOverrideDeductions
	isSet bool
}

func (v NullablePaystubOverrideDeductions) Get() *PaystubOverrideDeductions {
	return v.value
}

func (v *NullablePaystubOverrideDeductions) Set(val *PaystubOverrideDeductions) {
	v.value = val
	v.isSet = true
}

func (v NullablePaystubOverrideDeductions) IsSet() bool {
	return v.isSet
}

func (v *NullablePaystubOverrideDeductions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaystubOverrideDeductions(val *PaystubOverrideDeductions) *NullablePaystubOverrideDeductions {
	return &NullablePaystubOverrideDeductions{value: val, isSet: true}
}

func (v NullablePaystubOverrideDeductions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaystubOverrideDeductions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


