/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.343.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// FreddieReportType When set to `VERIFICATION_OF_EMPLOYMENT` and the Asset Report is added to an Audit Copy Token, the Asset Report will be retrieved by Freddie Mac in the Verification Of Employment (VOE) version instead of the default Verification Of Assets (VOA) version.
type FreddieReportType string

var _ = fmt.Printf

// List of FreddieReportType
const (
	FREDDIEREPORTTYPE_VERIFICATION_OF_EMPLOYMENT FreddieReportType = "VERIFICATION_OF_EMPLOYMENT"
)

var allowedFreddieReportTypeEnumValues = []FreddieReportType{
	"VERIFICATION_OF_EMPLOYMENT",
}

func (v *FreddieReportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := FreddieReportType(value)


	*v = enumTypeValue
	return nil
}

// NewFreddieReportTypeFromValue returns a pointer to a valid FreddieReportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFreddieReportTypeFromValue(v string) (*FreddieReportType, error) {
	ev := FreddieReportType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FreddieReportType) IsValid() bool {
	for _, existing := range allowedFreddieReportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FreddieReportType value
func (v FreddieReportType) Ptr() *FreddieReportType {
	return &v
}

type NullableFreddieReportType struct {
	value *FreddieReportType
	isSet bool
}

func (v NullableFreddieReportType) Get() *FreddieReportType {
	return v.value
}

func (v *NullableFreddieReportType) Set(val *FreddieReportType) {
	v.value = val
	v.isSet = true
}

func (v NullableFreddieReportType) IsSet() bool {
	return v.isSet
}

func (v *NullableFreddieReportType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFreddieReportType(val *FreddieReportType) *NullableFreddieReportType {
	return &NullableFreddieReportType{value: val, isSet: true}
}

func (v NullableFreddieReportType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFreddieReportType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

