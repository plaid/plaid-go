/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.379.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// FDXContentTypes Types of document formats. (Suggested values)
type FDXContentTypes string

var _ = fmt.Printf

// List of FDXContentTypes
const (
	FDXCONTENTTYPES_APPLICATION_PDF FDXContentTypes = "application/pdf"
	FDXCONTENTTYPES_IMAGE_GIF FDXContentTypes = "image/gif"
	FDXCONTENTTYPES_IMAGE_JPEG FDXContentTypes = "image/jpeg"
	FDXCONTENTTYPES_IMAGE_TIFF FDXContentTypes = "image/tiff"
	FDXCONTENTTYPES_IMAGE_PNG FDXContentTypes = "image/png"
	FDXCONTENTTYPES_APPLICATION_JSON FDXContentTypes = "application/json"
)

var allowedFDXContentTypesEnumValues = []FDXContentTypes{
	"application/pdf",
	"image/gif",
	"image/jpeg",
	"image/tiff",
	"image/png",
	"application/json",
}

func (v *FDXContentTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := FDXContentTypes(value)


	*v = enumTypeValue
	return nil
}

// NewFDXContentTypesFromValue returns a pointer to a valid FDXContentTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFDXContentTypesFromValue(v string) (*FDXContentTypes, error) {
	ev := FDXContentTypes(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FDXContentTypes) IsValid() bool {
	for _, existing := range allowedFDXContentTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FDXContentTypes value
func (v FDXContentTypes) Ptr() *FDXContentTypes {
	return &v
}

type NullableFDXContentTypes struct {
	value *FDXContentTypes
	isSet bool
}

func (v NullableFDXContentTypes) Get() *FDXContentTypes {
	return v.value
}

func (v *NullableFDXContentTypes) Set(val *FDXContentTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableFDXContentTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableFDXContentTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFDXContentTypes(val *FDXContentTypes) *NullableFDXContentTypes {
	return &NullableFDXContentTypes{value: val, isSet: true}
}

func (v NullableFDXContentTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFDXContentTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

