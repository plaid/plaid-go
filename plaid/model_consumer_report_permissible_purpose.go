/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.496.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// ConsumerReportPermissiblePurpose This enum describes the reason a consumer report is created for  `ACCOUNT_REVIEW_CREDIT`: In connection with a consumer credit transaction for the review or collection of an account pursuant to FCRA Section 604(a)(3)(A). `ACCOUNT_REVIEW_NON_CREDIT`: For a legitimate business need of the information to review a non-credit account provided primarily for personal, family, or household purposes to determine whether the consumer continues to meet the terms of the account pursuant to FCRA Section 604(a)(3)(F)(2). `EMPLOYMENT`: For employment purposes pursuant to FCRA 604(a)(3)(B), including hiring, retention and promotion purposes. `EXTENSION_OF_CREDIT`: In connection with a credit transaction initiated by and involving the consumer pursuant to FCRA Section 604(a)(3)(A). `LEGITIMATE_BUSINESS_NEED_TENANT_SCREENING`: For a legitimate business need in connection with a business transaction initiated by the consumer primarily for personal, family, or household purposes in connection with a property rental assessment pursuant to FCRA Section 604(a)(3)(F)(i). `LEGITIMATE_BUSINESS_NEED_OTHER`: For a legitimate business need in connection with a business transaction made primarily for personal, family, or household initiated by the consumer pursuant to FCRA Section 604(a)(3)(F)(i). `WRITTEN_INSTRUCTION_PREQUALIFICATION`: In accordance with the written instructions of the consumer pursuant to FCRA Section 604(a)(2), to evaluate an applicationâ€™s profile to make an offer to the consumer. `WRITTEN_INSTRUCTION_OTHER`: In accordance with the written instructions of the consumer pursuant to FCRA Section 604(a)(2), such as when an individual agrees to act as a guarantor or assumes personal liability for a consumer, business, or commercial loan.
type ConsumerReportPermissiblePurpose string

var _ = fmt.Printf

// List of ConsumerReportPermissiblePurpose
const (
	CONSUMERREPORTPERMISSIBLEPURPOSE_ACCOUNT_REVIEW_CREDIT ConsumerReportPermissiblePurpose = "ACCOUNT_REVIEW_CREDIT"
	CONSUMERREPORTPERMISSIBLEPURPOSE_ACCOUNT_REVIEW_NON_CREDIT ConsumerReportPermissiblePurpose = "ACCOUNT_REVIEW_NON_CREDIT"
	CONSUMERREPORTPERMISSIBLEPURPOSE_EMPLOYMENT ConsumerReportPermissiblePurpose = "EMPLOYMENT"
	CONSUMERREPORTPERMISSIBLEPURPOSE_EXTENSION_OF_CREDIT ConsumerReportPermissiblePurpose = "EXTENSION_OF_CREDIT"
	CONSUMERREPORTPERMISSIBLEPURPOSE_LEGITIMATE_BUSINESS_NEED_TENANT_SCREENING ConsumerReportPermissiblePurpose = "LEGITIMATE_BUSINESS_NEED_TENANT_SCREENING"
	CONSUMERREPORTPERMISSIBLEPURPOSE_LEGITIMATE_BUSINESS_NEED_OTHER ConsumerReportPermissiblePurpose = "LEGITIMATE_BUSINESS_NEED_OTHER"
	CONSUMERREPORTPERMISSIBLEPURPOSE_WRITTEN_INSTRUCTION_PREQUALIFICATION ConsumerReportPermissiblePurpose = "WRITTEN_INSTRUCTION_PREQUALIFICATION"
	CONSUMERREPORTPERMISSIBLEPURPOSE_WRITTEN_INSTRUCTION_OTHER ConsumerReportPermissiblePurpose = "WRITTEN_INSTRUCTION_OTHER"
)

var allowedConsumerReportPermissiblePurposeEnumValues = []ConsumerReportPermissiblePurpose{
	"ACCOUNT_REVIEW_CREDIT",
	"ACCOUNT_REVIEW_NON_CREDIT",
	"EMPLOYMENT",
	"EXTENSION_OF_CREDIT",
	"LEGITIMATE_BUSINESS_NEED_TENANT_SCREENING",
	"LEGITIMATE_BUSINESS_NEED_OTHER",
	"WRITTEN_INSTRUCTION_PREQUALIFICATION",
	"WRITTEN_INSTRUCTION_OTHER",
}

func (v *ConsumerReportPermissiblePurpose) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := ConsumerReportPermissiblePurpose(value)


	*v = enumTypeValue
	return nil
}

// NewConsumerReportPermissiblePurposeFromValue returns a pointer to a valid ConsumerReportPermissiblePurpose
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConsumerReportPermissiblePurposeFromValue(v string) (*ConsumerReportPermissiblePurpose, error) {
	ev := ConsumerReportPermissiblePurpose(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConsumerReportPermissiblePurpose) IsValid() bool {
	for _, existing := range allowedConsumerReportPermissiblePurposeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConsumerReportPermissiblePurpose value
func (v ConsumerReportPermissiblePurpose) Ptr() *ConsumerReportPermissiblePurpose {
	return &v
}

type NullableConsumerReportPermissiblePurpose struct {
	value *ConsumerReportPermissiblePurpose
	isSet bool
}

func (v NullableConsumerReportPermissiblePurpose) Get() *ConsumerReportPermissiblePurpose {
	return v.value
}

func (v *NullableConsumerReportPermissiblePurpose) Set(val *ConsumerReportPermissiblePurpose) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerReportPermissiblePurpose) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerReportPermissiblePurpose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerReportPermissiblePurpose(val *ConsumerReportPermissiblePurpose) *NullableConsumerReportPermissiblePurpose {
	return &NullableConsumerReportPermissiblePurpose{value: val, isSet: true}
}

func (v NullableConsumerReportPermissiblePurpose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerReportPermissiblePurpose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

