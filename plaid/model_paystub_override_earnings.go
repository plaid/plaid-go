/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.556.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// PaystubOverrideEarnings An object representing both a breakdown of earnings on a paystub and the total earnings.
type PaystubOverrideEarnings struct {
	Breakdown *[]PaystubOverrideEarningsBreakdown `json:"breakdown,omitempty"`
	Total *PaystubOverrideEarningsTotal `json:"total,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaystubOverrideEarnings PaystubOverrideEarnings

// NewPaystubOverrideEarnings instantiates a new PaystubOverrideEarnings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaystubOverrideEarnings() *PaystubOverrideEarnings {
	this := PaystubOverrideEarnings{}
	return &this
}

// NewPaystubOverrideEarningsWithDefaults instantiates a new PaystubOverrideEarnings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaystubOverrideEarningsWithDefaults() *PaystubOverrideEarnings {
	this := PaystubOverrideEarnings{}
	return &this
}

// GetBreakdown returns the Breakdown field value if set, zero value otherwise.
func (o *PaystubOverrideEarnings) GetBreakdown() []PaystubOverrideEarningsBreakdown {
	if o == nil || o.Breakdown == nil {
		var ret []PaystubOverrideEarningsBreakdown
		return ret
	}
	return *o.Breakdown
}

// GetBreakdownOk returns a tuple with the Breakdown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaystubOverrideEarnings) GetBreakdownOk() (*[]PaystubOverrideEarningsBreakdown, bool) {
	if o == nil || o.Breakdown == nil {
		return nil, false
	}
	return o.Breakdown, true
}

// HasBreakdown returns a boolean if a field has been set.
func (o *PaystubOverrideEarnings) HasBreakdown() bool {
	if o != nil && o.Breakdown != nil {
		return true
	}

	return false
}

// SetBreakdown gets a reference to the given []PaystubOverrideEarningsBreakdown and assigns it to the Breakdown field.
func (o *PaystubOverrideEarnings) SetBreakdown(v []PaystubOverrideEarningsBreakdown) {
	o.Breakdown = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *PaystubOverrideEarnings) GetTotal() PaystubOverrideEarningsTotal {
	if o == nil || o.Total == nil {
		var ret PaystubOverrideEarningsTotal
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaystubOverrideEarnings) GetTotalOk() (*PaystubOverrideEarningsTotal, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *PaystubOverrideEarnings) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given PaystubOverrideEarningsTotal and assigns it to the Total field.
func (o *PaystubOverrideEarnings) SetTotal(v PaystubOverrideEarningsTotal) {
	o.Total = &v
}

func (o PaystubOverrideEarnings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Breakdown != nil {
		toSerialize["breakdown"] = o.Breakdown
	}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PaystubOverrideEarnings) UnmarshalJSON(bytes []byte) (err error) {
	varPaystubOverrideEarnings := _PaystubOverrideEarnings{}

	if err = json.Unmarshal(bytes, &varPaystubOverrideEarnings); err == nil {
		*o = PaystubOverrideEarnings(varPaystubOverrideEarnings)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "breakdown")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaystubOverrideEarnings struct {
	value *PaystubOverrideEarnings
	isSet bool
}

func (v NullablePaystubOverrideEarnings) Get() *PaystubOverrideEarnings {
	return v.value
}

func (v *NullablePaystubOverrideEarnings) Set(val *PaystubOverrideEarnings) {
	v.value = val
	v.isSet = true
}

func (v NullablePaystubOverrideEarnings) IsSet() bool {
	return v.isSet
}

func (v *NullablePaystubOverrideEarnings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaystubOverrideEarnings(val *PaystubOverrideEarnings) *NullablePaystubOverrideEarnings {
	return &NullablePaystubOverrideEarnings{value: val, isSet: true}
}

func (v NullablePaystubOverrideEarnings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaystubOverrideEarnings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


