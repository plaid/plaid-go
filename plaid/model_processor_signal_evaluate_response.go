/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.343.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// ProcessorSignalEvaluateResponse ProcessorSignalEvaluateResponse defines the response schema for `/processor/signal/evaluate`
type ProcessorSignalEvaluateResponse struct {
	// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
	RequestId string `json:"request_id"`
	Scores SignalScores `json:"scores"`
	CoreAttributes *SignalEvaluateCoreAttributes `json:"core_attributes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProcessorSignalEvaluateResponse ProcessorSignalEvaluateResponse

// NewProcessorSignalEvaluateResponse instantiates a new ProcessorSignalEvaluateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessorSignalEvaluateResponse(requestId string, scores SignalScores) *ProcessorSignalEvaluateResponse {
	this := ProcessorSignalEvaluateResponse{}
	this.RequestId = requestId
	this.Scores = scores
	return &this
}

// NewProcessorSignalEvaluateResponseWithDefaults instantiates a new ProcessorSignalEvaluateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessorSignalEvaluateResponseWithDefaults() *ProcessorSignalEvaluateResponse {
	this := ProcessorSignalEvaluateResponse{}
	return &this
}

// GetRequestId returns the RequestId field value
func (o *ProcessorSignalEvaluateResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *ProcessorSignalEvaluateResponse) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *ProcessorSignalEvaluateResponse) SetRequestId(v string) {
	o.RequestId = v
}

// GetScores returns the Scores field value
func (o *ProcessorSignalEvaluateResponse) GetScores() SignalScores {
	if o == nil {
		var ret SignalScores
		return ret
	}

	return o.Scores
}

// GetScoresOk returns a tuple with the Scores field value
// and a boolean to check if the value has been set.
func (o *ProcessorSignalEvaluateResponse) GetScoresOk() (*SignalScores, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Scores, true
}

// SetScores sets field value
func (o *ProcessorSignalEvaluateResponse) SetScores(v SignalScores) {
	o.Scores = v
}

// GetCoreAttributes returns the CoreAttributes field value if set, zero value otherwise.
func (o *ProcessorSignalEvaluateResponse) GetCoreAttributes() SignalEvaluateCoreAttributes {
	if o == nil || o.CoreAttributes == nil {
		var ret SignalEvaluateCoreAttributes
		return ret
	}
	return *o.CoreAttributes
}

// GetCoreAttributesOk returns a tuple with the CoreAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessorSignalEvaluateResponse) GetCoreAttributesOk() (*SignalEvaluateCoreAttributes, bool) {
	if o == nil || o.CoreAttributes == nil {
		return nil, false
	}
	return o.CoreAttributes, true
}

// HasCoreAttributes returns a boolean if a field has been set.
func (o *ProcessorSignalEvaluateResponse) HasCoreAttributes() bool {
	if o != nil && o.CoreAttributes != nil {
		return true
	}

	return false
}

// SetCoreAttributes gets a reference to the given SignalEvaluateCoreAttributes and assigns it to the CoreAttributes field.
func (o *ProcessorSignalEvaluateResponse) SetCoreAttributes(v SignalEvaluateCoreAttributes) {
	o.CoreAttributes = &v
}

func (o ProcessorSignalEvaluateResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["request_id"] = o.RequestId
	}
	if true {
		toSerialize["scores"] = o.Scores
	}
	if o.CoreAttributes != nil {
		toSerialize["core_attributes"] = o.CoreAttributes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ProcessorSignalEvaluateResponse) UnmarshalJSON(bytes []byte) (err error) {
	varProcessorSignalEvaluateResponse := _ProcessorSignalEvaluateResponse{}

	if err = json.Unmarshal(bytes, &varProcessorSignalEvaluateResponse); err == nil {
		*o = ProcessorSignalEvaluateResponse(varProcessorSignalEvaluateResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "request_id")
		delete(additionalProperties, "scores")
		delete(additionalProperties, "core_attributes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProcessorSignalEvaluateResponse struct {
	value *ProcessorSignalEvaluateResponse
	isSet bool
}

func (v NullableProcessorSignalEvaluateResponse) Get() *ProcessorSignalEvaluateResponse {
	return v.value
}

func (v *NullableProcessorSignalEvaluateResponse) Set(val *ProcessorSignalEvaluateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessorSignalEvaluateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessorSignalEvaluateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessorSignalEvaluateResponse(val *ProcessorSignalEvaluateResponse) *NullableProcessorSignalEvaluateResponse {
	return &NullableProcessorSignalEvaluateResponse{value: val, isSet: true}
}

func (v NullableProcessorSignalEvaluateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessorSignalEvaluateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


