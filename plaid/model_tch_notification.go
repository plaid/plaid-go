/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.645.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// TCHNotification Provides the fields of a notification
type TCHNotification struct {
	// Unique message identifier (GUID v4 format) of this command, used for tracking purposes. Each request and its response have the same value.
	MessageId string `json:"messageId"`
	// Message identifier assigned for the entire conversation (GUID v4 format). Typically, it is generated by the initiator of the flow. The response has the same value with its request.
	ConversationId string `json:"conversationId"`
	// Token requestor identifier associated to the domain to which the token belongs.
	TokenRequestorId NullableString `json:"tokenRequestorId,omitempty"`
	// Unique reference identifier for the token generated.
	TokenReferenceId NullableString `json:"tokenReferenceId,omitempty"`
}

// NewTCHNotification instantiates a new TCHNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTCHNotification(messageId string, conversationId string) *TCHNotification {
	this := TCHNotification{}
	this.MessageId = messageId
	this.ConversationId = conversationId
	return &this
}

// NewTCHNotificationWithDefaults instantiates a new TCHNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTCHNotificationWithDefaults() *TCHNotification {
	this := TCHNotification{}
	return &this
}

// GetMessageId returns the MessageId field value
func (o *TCHNotification) GetMessageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value
// and a boolean to check if the value has been set.
func (o *TCHNotification) GetMessageIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MessageId, true
}

// SetMessageId sets field value
func (o *TCHNotification) SetMessageId(v string) {
	o.MessageId = v
}

// GetConversationId returns the ConversationId field value
func (o *TCHNotification) GetConversationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConversationId
}

// GetConversationIdOk returns a tuple with the ConversationId field value
// and a boolean to check if the value has been set.
func (o *TCHNotification) GetConversationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConversationId, true
}

// SetConversationId sets field value
func (o *TCHNotification) SetConversationId(v string) {
	o.ConversationId = v
}

// GetTokenRequestorId returns the TokenRequestorId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TCHNotification) GetTokenRequestorId() string {
	if o == nil || o.TokenRequestorId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TokenRequestorId.Get()
}

// GetTokenRequestorIdOk returns a tuple with the TokenRequestorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TCHNotification) GetTokenRequestorIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TokenRequestorId.Get(), o.TokenRequestorId.IsSet()
}

// HasTokenRequestorId returns a boolean if a field has been set.
func (o *TCHNotification) HasTokenRequestorId() bool {
	if o != nil && o.TokenRequestorId.IsSet() {
		return true
	}

	return false
}

// SetTokenRequestorId gets a reference to the given NullableString and assigns it to the TokenRequestorId field.
func (o *TCHNotification) SetTokenRequestorId(v string) {
	o.TokenRequestorId.Set(&v)
}
// SetTokenRequestorIdNil sets the value for TokenRequestorId to be an explicit nil
func (o *TCHNotification) SetTokenRequestorIdNil() {
	o.TokenRequestorId.Set(nil)
}

// UnsetTokenRequestorId ensures that no value is present for TokenRequestorId, not even an explicit nil
func (o *TCHNotification) UnsetTokenRequestorId() {
	o.TokenRequestorId.Unset()
}

// GetTokenReferenceId returns the TokenReferenceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TCHNotification) GetTokenReferenceId() string {
	if o == nil || o.TokenReferenceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TokenReferenceId.Get()
}

// GetTokenReferenceIdOk returns a tuple with the TokenReferenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TCHNotification) GetTokenReferenceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TokenReferenceId.Get(), o.TokenReferenceId.IsSet()
}

// HasTokenReferenceId returns a boolean if a field has been set.
func (o *TCHNotification) HasTokenReferenceId() bool {
	if o != nil && o.TokenReferenceId.IsSet() {
		return true
	}

	return false
}

// SetTokenReferenceId gets a reference to the given NullableString and assigns it to the TokenReferenceId field.
func (o *TCHNotification) SetTokenReferenceId(v string) {
	o.TokenReferenceId.Set(&v)
}
// SetTokenReferenceIdNil sets the value for TokenReferenceId to be an explicit nil
func (o *TCHNotification) SetTokenReferenceIdNil() {
	o.TokenReferenceId.Set(nil)
}

// UnsetTokenReferenceId ensures that no value is present for TokenReferenceId, not even an explicit nil
func (o *TCHNotification) UnsetTokenReferenceId() {
	o.TokenReferenceId.Unset()
}

func (o TCHNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["messageId"] = o.MessageId
	}
	if true {
		toSerialize["conversationId"] = o.ConversationId
	}
	if o.TokenRequestorId.IsSet() {
		toSerialize["tokenRequestorId"] = o.TokenRequestorId.Get()
	}
	if o.TokenReferenceId.IsSet() {
		toSerialize["tokenReferenceId"] = o.TokenReferenceId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTCHNotification struct {
	value *TCHNotification
	isSet bool
}

func (v NullableTCHNotification) Get() *TCHNotification {
	return v.value
}

func (v *NullableTCHNotification) Set(val *TCHNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableTCHNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableTCHNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTCHNotification(val *TCHNotification) *NullableTCHNotification {
	return &NullableTCHNotification{value: val, isSet: true}
}

func (v NullableTCHNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTCHNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


