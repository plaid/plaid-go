/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.575.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// IssuesStatus The current status of the issue.
type IssuesStatus string

var _ = fmt.Printf

// List of IssuesStatus
const (
	ISSUESSTATUS_REPORTED IssuesStatus = "REPORTED"
	ISSUESSTATUS_AWAITING_RESOLUTION IssuesStatus = "AWAITING_RESOLUTION"
	ISSUESSTATUS_FIX_IN_PROGRESS IssuesStatus = "FIX_IN_PROGRESS"
	ISSUESSTATUS_FIX_PENDING_VALIDATION IssuesStatus = "FIX_PENDING_VALIDATION"
	ISSUESSTATUS_CANNOT_FIX IssuesStatus = "CANNOT_FIX"
	ISSUESSTATUS_RESOLVED IssuesStatus = "RESOLVED"
)

var allowedIssuesStatusEnumValues = []IssuesStatus{
	"REPORTED",
	"AWAITING_RESOLUTION",
	"FIX_IN_PROGRESS",
	"FIX_PENDING_VALIDATION",
	"CANNOT_FIX",
	"RESOLVED",
}

func (v *IssuesStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := IssuesStatus(value)


	*v = enumTypeValue
	return nil
}

// NewIssuesStatusFromValue returns a pointer to a valid IssuesStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIssuesStatusFromValue(v string) (*IssuesStatus, error) {
	ev := IssuesStatus(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IssuesStatus) IsValid() bool {
	for _, existing := range allowedIssuesStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IssuesStatus value
func (v IssuesStatus) Ptr() *IssuesStatus {
	return &v
}

type NullableIssuesStatus struct {
	value *IssuesStatus
	isSet bool
}

func (v NullableIssuesStatus) Get() *IssuesStatus {
	return v.value
}

func (v *NullableIssuesStatus) Set(val *IssuesStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesStatus(val *IssuesStatus) *NullableIssuesStatus {
	return &NullableIssuesStatus{value: val, isSet: true}
}

func (v NullableIssuesStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

