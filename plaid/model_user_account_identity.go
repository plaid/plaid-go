/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.586.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// UserAccountIdentity The identity data permissioned by the end user during the authorization flow.
type UserAccountIdentity struct {
	Name NullableUserAccountIdentityName `json:"name,omitempty"`
	Address NullableUserAccountIdentityAddress `json:"address,omitempty"`
	// The user's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format
	PhoneNumber *string `json:"phone_number,omitempty"`
	// The user's email address.  Note: email is currently not returned for users, and is an upcoming addition that will be live in early 2025.
	Email NullableString `json:"email,omitempty"`
	// The user's date of birth.
	DateOfBirth NullableString `json:"date_of_birth,omitempty"`
	// The user's social security number.
	Ssn NullableString `json:"ssn,omitempty"`
	// The last 4 digits of the user's social security number.
	SsnLast4 NullableString `json:"ssn_last_4,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserAccountIdentity UserAccountIdentity

// NewUserAccountIdentity instantiates a new UserAccountIdentity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAccountIdentity() *UserAccountIdentity {
	this := UserAccountIdentity{}
	return &this
}

// NewUserAccountIdentityWithDefaults instantiates a new UserAccountIdentity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAccountIdentityWithDefaults() *UserAccountIdentity {
	this := UserAccountIdentity{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountIdentity) GetName() UserAccountIdentityName {
	if o == nil || o.Name.Get() == nil {
		var ret UserAccountIdentityName
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountIdentity) GetNameOk() (*UserAccountIdentityName, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UserAccountIdentity) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableUserAccountIdentityName and assigns it to the Name field.
func (o *UserAccountIdentity) SetName(v UserAccountIdentityName) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UserAccountIdentity) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UserAccountIdentity) UnsetName() {
	o.Name.Unset()
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountIdentity) GetAddress() UserAccountIdentityAddress {
	if o == nil || o.Address.Get() == nil {
		var ret UserAccountIdentityAddress
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountIdentity) GetAddressOk() (*UserAccountIdentityAddress, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *UserAccountIdentity) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableUserAccountIdentityAddress and assigns it to the Address field.
func (o *UserAccountIdentity) SetAddress(v UserAccountIdentityAddress) {
	o.Address.Set(&v)
}
// SetAddressNil sets the value for Address to be an explicit nil
func (o *UserAccountIdentity) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *UserAccountIdentity) UnsetAddress() {
	o.Address.Unset()
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *UserAccountIdentity) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountIdentity) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *UserAccountIdentity) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *UserAccountIdentity) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountIdentity) GetEmail() string {
	if o == nil || o.Email.Get() == nil {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountIdentity) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *UserAccountIdentity) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *UserAccountIdentity) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *UserAccountIdentity) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *UserAccountIdentity) UnsetEmail() {
	o.Email.Unset()
}

// GetDateOfBirth returns the DateOfBirth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountIdentity) GetDateOfBirth() string {
	if o == nil || o.DateOfBirth.Get() == nil {
		var ret string
		return ret
	}
	return *o.DateOfBirth.Get()
}

// GetDateOfBirthOk returns a tuple with the DateOfBirth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountIdentity) GetDateOfBirthOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DateOfBirth.Get(), o.DateOfBirth.IsSet()
}

// HasDateOfBirth returns a boolean if a field has been set.
func (o *UserAccountIdentity) HasDateOfBirth() bool {
	if o != nil && o.DateOfBirth.IsSet() {
		return true
	}

	return false
}

// SetDateOfBirth gets a reference to the given NullableString and assigns it to the DateOfBirth field.
func (o *UserAccountIdentity) SetDateOfBirth(v string) {
	o.DateOfBirth.Set(&v)
}
// SetDateOfBirthNil sets the value for DateOfBirth to be an explicit nil
func (o *UserAccountIdentity) SetDateOfBirthNil() {
	o.DateOfBirth.Set(nil)
}

// UnsetDateOfBirth ensures that no value is present for DateOfBirth, not even an explicit nil
func (o *UserAccountIdentity) UnsetDateOfBirth() {
	o.DateOfBirth.Unset()
}

// GetSsn returns the Ssn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountIdentity) GetSsn() string {
	if o == nil || o.Ssn.Get() == nil {
		var ret string
		return ret
	}
	return *o.Ssn.Get()
}

// GetSsnOk returns a tuple with the Ssn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountIdentity) GetSsnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Ssn.Get(), o.Ssn.IsSet()
}

// HasSsn returns a boolean if a field has been set.
func (o *UserAccountIdentity) HasSsn() bool {
	if o != nil && o.Ssn.IsSet() {
		return true
	}

	return false
}

// SetSsn gets a reference to the given NullableString and assigns it to the Ssn field.
func (o *UserAccountIdentity) SetSsn(v string) {
	o.Ssn.Set(&v)
}
// SetSsnNil sets the value for Ssn to be an explicit nil
func (o *UserAccountIdentity) SetSsnNil() {
	o.Ssn.Set(nil)
}

// UnsetSsn ensures that no value is present for Ssn, not even an explicit nil
func (o *UserAccountIdentity) UnsetSsn() {
	o.Ssn.Unset()
}

// GetSsnLast4 returns the SsnLast4 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserAccountIdentity) GetSsnLast4() string {
	if o == nil || o.SsnLast4.Get() == nil {
		var ret string
		return ret
	}
	return *o.SsnLast4.Get()
}

// GetSsnLast4Ok returns a tuple with the SsnLast4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserAccountIdentity) GetSsnLast4Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SsnLast4.Get(), o.SsnLast4.IsSet()
}

// HasSsnLast4 returns a boolean if a field has been set.
func (o *UserAccountIdentity) HasSsnLast4() bool {
	if o != nil && o.SsnLast4.IsSet() {
		return true
	}

	return false
}

// SetSsnLast4 gets a reference to the given NullableString and assigns it to the SsnLast4 field.
func (o *UserAccountIdentity) SetSsnLast4(v string) {
	o.SsnLast4.Set(&v)
}
// SetSsnLast4Nil sets the value for SsnLast4 to be an explicit nil
func (o *UserAccountIdentity) SetSsnLast4Nil() {
	o.SsnLast4.Set(nil)
}

// UnsetSsnLast4 ensures that no value is present for SsnLast4, not even an explicit nil
func (o *UserAccountIdentity) UnsetSsnLast4() {
	o.SsnLast4.Unset()
}

func (o UserAccountIdentity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if o.PhoneNumber != nil {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.DateOfBirth.IsSet() {
		toSerialize["date_of_birth"] = o.DateOfBirth.Get()
	}
	if o.Ssn.IsSet() {
		toSerialize["ssn"] = o.Ssn.Get()
	}
	if o.SsnLast4.IsSet() {
		toSerialize["ssn_last_4"] = o.SsnLast4.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UserAccountIdentity) UnmarshalJSON(bytes []byte) (err error) {
	varUserAccountIdentity := _UserAccountIdentity{}

	if err = json.Unmarshal(bytes, &varUserAccountIdentity); err == nil {
		*o = UserAccountIdentity(varUserAccountIdentity)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "address")
		delete(additionalProperties, "phone_number")
		delete(additionalProperties, "email")
		delete(additionalProperties, "date_of_birth")
		delete(additionalProperties, "ssn")
		delete(additionalProperties, "ssn_last_4")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserAccountIdentity struct {
	value *UserAccountIdentity
	isSet bool
}

func (v NullableUserAccountIdentity) Get() *UserAccountIdentity {
	return v.value
}

func (v *NullableUserAccountIdentity) Set(val *UserAccountIdentity) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccountIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccountIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccountIdentity(val *UserAccountIdentity) *NullableUserAccountIdentity {
	return &NullableUserAccountIdentity{value: val, isSet: true}
}

func (v NullableUserAccountIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccountIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


