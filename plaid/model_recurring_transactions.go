/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.474.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// RecurringTransactions Insights object for recurring transactions for `/beta/transactions/user_insights/v1/get` endpoint
type RecurringTransactions struct {
	// An array of inflow transaction streams (e.g., income).
	InflowStreams []RecurringInsightsStream `json:"inflow_streams"`
	// An array of outflow transaction streams (e.g., subscriptions, bills, loan payments).
	OutflowStreams []RecurringInsightsStream `json:"outflow_streams"`
	AdditionalProperties map[string]interface{}
}

type _RecurringTransactions RecurringTransactions

// NewRecurringTransactions instantiates a new RecurringTransactions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecurringTransactions(inflowStreams []RecurringInsightsStream, outflowStreams []RecurringInsightsStream) *RecurringTransactions {
	this := RecurringTransactions{}
	this.InflowStreams = inflowStreams
	this.OutflowStreams = outflowStreams
	return &this
}

// NewRecurringTransactionsWithDefaults instantiates a new RecurringTransactions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecurringTransactionsWithDefaults() *RecurringTransactions {
	this := RecurringTransactions{}
	return &this
}

// GetInflowStreams returns the InflowStreams field value
func (o *RecurringTransactions) GetInflowStreams() []RecurringInsightsStream {
	if o == nil {
		var ret []RecurringInsightsStream
		return ret
	}

	return o.InflowStreams
}

// GetInflowStreamsOk returns a tuple with the InflowStreams field value
// and a boolean to check if the value has been set.
func (o *RecurringTransactions) GetInflowStreamsOk() (*[]RecurringInsightsStream, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InflowStreams, true
}

// SetInflowStreams sets field value
func (o *RecurringTransactions) SetInflowStreams(v []RecurringInsightsStream) {
	o.InflowStreams = v
}

// GetOutflowStreams returns the OutflowStreams field value
func (o *RecurringTransactions) GetOutflowStreams() []RecurringInsightsStream {
	if o == nil {
		var ret []RecurringInsightsStream
		return ret
	}

	return o.OutflowStreams
}

// GetOutflowStreamsOk returns a tuple with the OutflowStreams field value
// and a boolean to check if the value has been set.
func (o *RecurringTransactions) GetOutflowStreamsOk() (*[]RecurringInsightsStream, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OutflowStreams, true
}

// SetOutflowStreams sets field value
func (o *RecurringTransactions) SetOutflowStreams(v []RecurringInsightsStream) {
	o.OutflowStreams = v
}

func (o RecurringTransactions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["inflow_streams"] = o.InflowStreams
	}
	if true {
		toSerialize["outflow_streams"] = o.OutflowStreams
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *RecurringTransactions) UnmarshalJSON(bytes []byte) (err error) {
	varRecurringTransactions := _RecurringTransactions{}

	if err = json.Unmarshal(bytes, &varRecurringTransactions); err == nil {
		*o = RecurringTransactions(varRecurringTransactions)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "inflow_streams")
		delete(additionalProperties, "outflow_streams")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRecurringTransactions struct {
	value *RecurringTransactions
	isSet bool
}

func (v NullableRecurringTransactions) Get() *RecurringTransactions {
	return v.value
}

func (v *NullableRecurringTransactions) Set(val *RecurringTransactions) {
	v.value = val
	v.isSet = true
}

func (v NullableRecurringTransactions) IsSet() bool {
	return v.isSet
}

func (v *NullableRecurringTransactions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecurringTransactions(val *RecurringTransactions) *NullableRecurringTransactions {
	return &NullableRecurringTransactions{value: val, isSet: true}
}

func (v NullableRecurringTransactions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecurringTransactions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


