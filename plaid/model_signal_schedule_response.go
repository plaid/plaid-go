/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.627.4
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// SignalScheduleResponse SignalScheduleResponse defines the response schema for `/signal/schedule`
type SignalScheduleResponse struct {
	// The recommended optimal date to submit the debit entry, formatted in ISO 8601 \"YYYY-MM-DD\" (e.g., \"2024-03-30\"). The `optimal_date` is derived from the date with rank = 1 in the following recommendations array.  NOTE: The `default_payment_method` field specified in the request will affect the recommendation, since we're accounting for debit settlement time.  The debit scheduling evaluation starts from the day the /signal/schedule request is submitted (Day 0) or the next banking day if the submission day is not a banking day, and extends through the following five banking days (Day 1 to Day 5). If no date within this period is considered likely to result in a successful debit attempt, `null` will be returned for the `optimal_date`.
	OptimalDate NullableString `json:"optimal_date"`
	// This array provides a date-by-date evaluation of debit submission recommendations within the five banking day evaluation period. Each object in the array represents a retry recommendation for a specific date.
	Recommendations []SignalScheduleRecommendation `json:"recommendations"`
	// If bank information was not available to be used in the Signal model, this array contains warnings describing why bank data is missing. If you want to receive an API error instead of Signal scores in the case of missing bank data, file a support ticket or contact your Plaid account manager.
	Warnings []SignalWarning `json:"warnings"`
	// A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
	RequestId string `json:"request_id"`
	AdditionalProperties map[string]interface{}
}

type _SignalScheduleResponse SignalScheduleResponse

// NewSignalScheduleResponse instantiates a new SignalScheduleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignalScheduleResponse(optimalDate NullableString, recommendations []SignalScheduleRecommendation, warnings []SignalWarning, requestId string) *SignalScheduleResponse {
	this := SignalScheduleResponse{}
	this.OptimalDate = optimalDate
	this.Recommendations = recommendations
	this.Warnings = warnings
	this.RequestId = requestId
	return &this
}

// NewSignalScheduleResponseWithDefaults instantiates a new SignalScheduleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignalScheduleResponseWithDefaults() *SignalScheduleResponse {
	this := SignalScheduleResponse{}
	return &this
}

// GetOptimalDate returns the OptimalDate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SignalScheduleResponse) GetOptimalDate() string {
	if o == nil || o.OptimalDate.Get() == nil {
		var ret string
		return ret
	}

	return *o.OptimalDate.Get()
}

// GetOptimalDateOk returns a tuple with the OptimalDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SignalScheduleResponse) GetOptimalDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OptimalDate.Get(), o.OptimalDate.IsSet()
}

// SetOptimalDate sets field value
func (o *SignalScheduleResponse) SetOptimalDate(v string) {
	o.OptimalDate.Set(&v)
}

// GetRecommendations returns the Recommendations field value
func (o *SignalScheduleResponse) GetRecommendations() []SignalScheduleRecommendation {
	if o == nil {
		var ret []SignalScheduleRecommendation
		return ret
	}

	return o.Recommendations
}

// GetRecommendationsOk returns a tuple with the Recommendations field value
// and a boolean to check if the value has been set.
func (o *SignalScheduleResponse) GetRecommendationsOk() (*[]SignalScheduleRecommendation, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Recommendations, true
}

// SetRecommendations sets field value
func (o *SignalScheduleResponse) SetRecommendations(v []SignalScheduleRecommendation) {
	o.Recommendations = v
}

// GetWarnings returns the Warnings field value
func (o *SignalScheduleResponse) GetWarnings() []SignalWarning {
	if o == nil {
		var ret []SignalWarning
		return ret
	}

	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value
// and a boolean to check if the value has been set.
func (o *SignalScheduleResponse) GetWarningsOk() (*[]SignalWarning, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Warnings, true
}

// SetWarnings sets field value
func (o *SignalScheduleResponse) SetWarnings(v []SignalWarning) {
	o.Warnings = v
}

// GetRequestId returns the RequestId field value
func (o *SignalScheduleResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *SignalScheduleResponse) GetRequestIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *SignalScheduleResponse) SetRequestId(v string) {
	o.RequestId = v
}

func (o SignalScheduleResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["optimal_date"] = o.OptimalDate.Get()
	}
	if true {
		toSerialize["recommendations"] = o.Recommendations
	}
	if true {
		toSerialize["warnings"] = o.Warnings
	}
	if true {
		toSerialize["request_id"] = o.RequestId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SignalScheduleResponse) UnmarshalJSON(bytes []byte) (err error) {
	varSignalScheduleResponse := _SignalScheduleResponse{}

	if err = json.Unmarshal(bytes, &varSignalScheduleResponse); err == nil {
		*o = SignalScheduleResponse(varSignalScheduleResponse)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "optimal_date")
		delete(additionalProperties, "recommendations")
		delete(additionalProperties, "warnings")
		delete(additionalProperties, "request_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSignalScheduleResponse struct {
	value *SignalScheduleResponse
	isSet bool
}

func (v NullableSignalScheduleResponse) Get() *SignalScheduleResponse {
	return v.value
}

func (v *NullableSignalScheduleResponse) Set(val *SignalScheduleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSignalScheduleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSignalScheduleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignalScheduleResponse(val *SignalScheduleResponse) *NullableSignalScheduleResponse {
	return &NullableSignalScheduleResponse{value: val, isSet: true}
}

func (v NullableSignalScheduleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignalScheduleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


