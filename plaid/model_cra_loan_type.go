/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.534.3
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// CraLoanType The type of loan the user applied for.
type CraLoanType string

var _ = fmt.Printf

// List of CraLoanType
const (
	CRALOANTYPE_PERSONAL CraLoanType = "PERSONAL"
	CRALOANTYPE_CREDIT_CARD CraLoanType = "CREDIT_CARD"
	CRALOANTYPE_BUSINESS CraLoanType = "BUSINESS"
	CRALOANTYPE_MORTGAGE CraLoanType = "MORTGAGE"
	CRALOANTYPE_AUTO CraLoanType = "AUTO"
	CRALOANTYPE_PAYDAY CraLoanType = "PAYDAY"
	CRALOANTYPE_STUDENT CraLoanType = "STUDENT"
	CRALOANTYPE_HOME_EQUITY CraLoanType = "HOME_EQUITY"
	CRALOANTYPE_OTHER CraLoanType = "OTHER"
)

var allowedCraLoanTypeEnumValues = []CraLoanType{
	"PERSONAL",
	"CREDIT_CARD",
	"BUSINESS",
	"MORTGAGE",
	"AUTO",
	"PAYDAY",
	"STUDENT",
	"HOME_EQUITY",
	"OTHER",
}

func (v *CraLoanType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := CraLoanType(value)


	*v = enumTypeValue
	return nil
}

// NewCraLoanTypeFromValue returns a pointer to a valid CraLoanType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCraLoanTypeFromValue(v string) (*CraLoanType, error) {
	ev := CraLoanType(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CraLoanType) IsValid() bool {
	for _, existing := range allowedCraLoanTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CraLoanType value
func (v CraLoanType) Ptr() *CraLoanType {
	return &v
}

type NullableCraLoanType struct {
	value *CraLoanType
	isSet bool
}

func (v NullableCraLoanType) Get() *CraLoanType {
	return v.value
}

func (v *NullableCraLoanType) Set(val *CraLoanType) {
	v.value = val
	v.isSet = true
}

func (v NullableCraLoanType) IsSet() bool {
	return v.isSet
}

func (v *NullableCraLoanType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCraLoanType(val *CraLoanType) *NullableCraLoanType {
	return &NullableCraLoanType{value: val, isSet: true}
}

func (v NullableCraLoanType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCraLoanType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

