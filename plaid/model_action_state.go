/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.391.2
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
	"fmt"
)

// ActionState Enum representing the state of the action/activity.
type ActionState string

var _ = fmt.Printf

// List of ActionState
const (
	ACTIONSTATE_UNKNOWN ActionState = "UNKNOWN"
	ACTIONSTATE_ATTEMPT ActionState = "ATTEMPT"
	ACTIONSTATE_SUCCESS ActionState = "SUCCESS"
	ACTIONSTATE_FAILURE ActionState = "FAILURE"
	ACTIONSTATE_SKIPPED ActionState = "SKIPPED"
)

var allowedActionStateEnumValues = []ActionState{
	"UNKNOWN",
	"ATTEMPT",
	"SUCCESS",
	"FAILURE",
	"SKIPPED",
}

func (v *ActionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}

	enumTypeValue := ActionState(value)


	*v = enumTypeValue
	return nil
}

// NewActionStateFromValue returns a pointer to a valid ActionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionStateFromValue(v string) (*ActionState, error) {
	ev := ActionState(v)


	return &ev, nil
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActionState) IsValid() bool {
	for _, existing := range allowedActionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActionState value
func (v ActionState) Ptr() *ActionState {
	return &v
}

type NullableActionState struct {
	value *ActionState
	isSet bool
}

func (v NullableActionState) Get() *ActionState {
	return v.value
}

func (v *NullableActionState) Set(val *ActionState) {
	v.value = val
	v.isSet = true
}

func (v NullableActionState) IsSet() bool {
	return v.isSet
}

func (v *NullableActionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionState(val *ActionState) *NullableActionState {
	return &NullableActionState{value: val, isSet: true}
}

func (v NullableActionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

