/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.667.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// CustomSandboxTransaction Data to populate as test transaction data.
type CustomSandboxTransaction struct {
	// The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Transaction date must be the present date or a date up to 14 days in the past. Future dates are not allowed.
	DateTransacted string `json:"date_transacted"`
	// The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Posted date must be the present date or a date up to 14 days in the past. Future dates are not allowed.
	DatePosted string `json:"date_posted"`
	// The transaction amount. Can be negative.
	Amount float64 `json:"amount"`
	// The transaction description.
	Description string `json:"description"`
	// The ISO-4217 format currency code for the transaction. Defaults to USD.
	IsoCurrencyCode *string `json:"iso_currency_code,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CustomSandboxTransaction CustomSandboxTransaction

// NewCustomSandboxTransaction instantiates a new CustomSandboxTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomSandboxTransaction(dateTransacted string, datePosted string, amount float64, description string) *CustomSandboxTransaction {
	this := CustomSandboxTransaction{}
	this.DateTransacted = dateTransacted
	this.DatePosted = datePosted
	this.Amount = amount
	this.Description = description
	return &this
}

// NewCustomSandboxTransactionWithDefaults instantiates a new CustomSandboxTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomSandboxTransactionWithDefaults() *CustomSandboxTransaction {
	this := CustomSandboxTransaction{}
	return &this
}

// GetDateTransacted returns the DateTransacted field value
func (o *CustomSandboxTransaction) GetDateTransacted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DateTransacted
}

// GetDateTransactedOk returns a tuple with the DateTransacted field value
// and a boolean to check if the value has been set.
func (o *CustomSandboxTransaction) GetDateTransactedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DateTransacted, true
}

// SetDateTransacted sets field value
func (o *CustomSandboxTransaction) SetDateTransacted(v string) {
	o.DateTransacted = v
}

// GetDatePosted returns the DatePosted field value
func (o *CustomSandboxTransaction) GetDatePosted() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatePosted
}

// GetDatePostedOk returns a tuple with the DatePosted field value
// and a boolean to check if the value has been set.
func (o *CustomSandboxTransaction) GetDatePostedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DatePosted, true
}

// SetDatePosted sets field value
func (o *CustomSandboxTransaction) SetDatePosted(v string) {
	o.DatePosted = v
}

// GetAmount returns the Amount field value
func (o *CustomSandboxTransaction) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *CustomSandboxTransaction) GetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *CustomSandboxTransaction) SetAmount(v float64) {
	o.Amount = v
}

// GetDescription returns the Description field value
func (o *CustomSandboxTransaction) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CustomSandboxTransaction) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CustomSandboxTransaction) SetDescription(v string) {
	o.Description = v
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value if set, zero value otherwise.
func (o *CustomSandboxTransaction) GetIsoCurrencyCode() string {
	if o == nil || o.IsoCurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.IsoCurrencyCode
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomSandboxTransaction) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil || o.IsoCurrencyCode == nil {
		return nil, false
	}
	return o.IsoCurrencyCode, true
}

// HasIsoCurrencyCode returns a boolean if a field has been set.
func (o *CustomSandboxTransaction) HasIsoCurrencyCode() bool {
	if o != nil && o.IsoCurrencyCode != nil {
		return true
	}

	return false
}

// SetIsoCurrencyCode gets a reference to the given string and assigns it to the IsoCurrencyCode field.
func (o *CustomSandboxTransaction) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode = &v
}

func (o CustomSandboxTransaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["date_transacted"] = o.DateTransacted
	}
	if true {
		toSerialize["date_posted"] = o.DatePosted
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.IsoCurrencyCode != nil {
		toSerialize["iso_currency_code"] = o.IsoCurrencyCode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CustomSandboxTransaction) UnmarshalJSON(bytes []byte) (err error) {
	varCustomSandboxTransaction := _CustomSandboxTransaction{}

	if err = json.Unmarshal(bytes, &varCustomSandboxTransaction); err == nil {
		*o = CustomSandboxTransaction(varCustomSandboxTransaction)
	} else {
		return err
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "date_transacted")
		delete(additionalProperties, "date_posted")
		delete(additionalProperties, "amount")
		delete(additionalProperties, "description")
		delete(additionalProperties, "iso_currency_code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomSandboxTransaction struct {
	value *CustomSandboxTransaction
	isSet bool
}

func (v NullableCustomSandboxTransaction) Get() *CustomSandboxTransaction {
	return v.value
}

func (v *NullableCustomSandboxTransaction) Set(val *CustomSandboxTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomSandboxTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomSandboxTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomSandboxTransaction(val *CustomSandboxTransaction) *NullableCustomSandboxTransaction {
	return &NullableCustomSandboxTransaction{value: val, isSet: true}
}

func (v NullableCustomSandboxTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomSandboxTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


