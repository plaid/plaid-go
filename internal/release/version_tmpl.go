package release

import (
	"fmt"
	"go/build"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/coreos/go-semver/semver"
	"github.com/plaid/plaid-go/internal"
)

var versionTmpl = template.Must(template.New("var").Parse(strings.TrimSpace(`
// NOTE - this file is auto-generated. DO NOT EDIT.

package internal

const (
	// Version is the current version of the plaid-go library
	Version = "{{.Version}}"
)
`) + "\n"))

func incrementVersion(pkg *build.Package, release releaseType) (string, error) {
	// Get the current semantic version
	v, err := semver.NewVersion(internal.Version)
	if err != nil {
		return "", err
	}

	logger.Println("detected version", v.String())

	switch release {
	case major:
		v.BumpMajor()
	case minor:
		v.BumpMinor()
	case patch:
		v.BumpPatch()
	default:
		return "", fmt.Errorf("invalid releaseType %v", release)
	}

	logger.Println("incrementing version to", v.String())

	f, err := os.OpenFile(filepath.Join(pkg.Dir, "internal", "version_autogenerated.go"), os.O_RDWR|os.O_CREATE, 0755)
	if err != nil {
		return "", err
	}

	if err := versionTmpl.Execute(f, struct {
		Version string
	}{
		Version: v.String(),
	}); err != nil {
		return "", err
	}

	return v.String(), nil
}
