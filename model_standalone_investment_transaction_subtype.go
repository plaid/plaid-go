/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.20.6
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// StandaloneInvestmentTransactionSubtype Valid subtypes for Investment transaction subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.
type StandaloneInvestmentTransactionSubtype struct {
	// Fees paid for account maintenance
	AccountFee *string `json:"account fee,omitempty"`
	// Assignment of short option holding
	Assignment *string `json:"assignment,omitempty"`
	// Purchase to open or increase a position
	Buy *string `json:"buy,omitempty"`
	// Purchase to close a short position
	BuyToCover *string `json:"buy to cover,omitempty"`
	// Inflow of assets into a tax-advantaged account
	Contribution *string `json:"contribution,omitempty"`
	// Inflow of cash into an account
	Deposit *string `json:"deposit,omitempty"`
	// Outflow of assets from a tax-advantaged account
	Distribution *string `json:"distribution,omitempty"`
	// Inflow of cash from a dividend
	Dividend *string `json:"dividend,omitempty"`
	// Purchase using proceeds from a cash dividend
	DividendReinvestment *string `json:"dividend reinvestment,omitempty"`
	// Exercise of an option or warrant contract
	Exercise *string `json:"exercise,omitempty"`
	// Expiration of an option or warrant contract 
	Expire *string `json:"expire,omitempty"`
	// Fees paid for administration of a mutual fund or other pooled investment vehicle
	FundFee *string `json:"fund fee,omitempty"`
	// Inflow of cash from interest
	Interest *string `json:"interest,omitempty"`
	// Inflow of cash from interest receivable
	InterestReceivable *string `json:"interest receivable,omitempty"`
	// Purchase using proceeds from a cash interest payment
	InterestReinvestment *string `json:"interest reinvestment,omitempty"`
	// Fees paid for legal charges or services
	LegalFee *string `json:"legal fee,omitempty"`
	// Inflow of cash related to payment on a loan
	LoanPayment *string `json:"loan payment,omitempty"`
	// Long-term capital gain received as cash
	LongTermCapitalGain *string `json:"long-term capital gain,omitempty"`
	// Purchase using long-term capital gain cash proceeds
	LongTermCapitalGainReinvestment *string `json:"long-term capital gain reinvestment,omitempty"`
	// Fees paid for investment management of a mutual fund or other pooled investment vehicle
	ManagementFee *string `json:"management fee,omitempty"`
	// Fees paid for maintaining margin debt
	MarginExpense *string `json:"margin expense,omitempty"`
	// Stock exchanged at a pre-defined ratio as part of a merger between companies
	Merger *string `json:"merger,omitempty"`
	// Fee associated with various account or holding actions
	MiscellaneousFee *string `json:"miscellaneous fee,omitempty"`
	// Inflow of cash from a non-qualified dividend
	NonQualifiedDividend *string `json:"non-qualified dividend,omitempty"`
	// Taxes paid on behalf of the investor for non-residency in investment jurisdiction
	NonResidentTax *string `json:"non-resident tax,omitempty"`
	// Pending inflow of cash
	PendingCredit *string `json:"pending credit,omitempty"`
	// Pending outflow of cash
	PendingDebit *string `json:"pending debit,omitempty"`
	// Inflow of cash from a qualified dividend
	QualifiedDividend *string `json:"qualified dividend,omitempty"`
	// Rebalancing transaction (buy or sell) with no net impact to value in the account
	Rebalance *string `json:"rebalance,omitempty"`
	// Repayment of loan principal
	ReturnOfPrincipal *string `json:"return of principal,omitempty"`
	// Sell to close or decrease an existing holding
	Sell *string `json:"sell,omitempty"`
	// Sell to open a short position
	SellShort *string `json:"sell short,omitempty"`
	// Short-term capital gain received as cash
	ShortTermCapitalGain *string `json:"short-term capital gain,omitempty"`
	// Purchase using short-term capital gain cash proceeds
	ShortTermCapitalGainReinvestment *string `json:"short-term capital gain reinvestment,omitempty"`
	// Inflow of stock from spin-off transaction of an existing holding
	SpinOff *string `json:"spin off,omitempty"`
	// Inflow of stock from a forward split of an existing holding
	Split *string `json:"split,omitempty"`
	// Inflow of stock from a distribution
	StockDistribution *string `json:"stock distribution,omitempty"`
	// Taxes paid on behalf of the investor
	Tax *string `json:"tax,omitempty"`
	// Taxes withheld on behalf of the customer
	TaxWithheld *string `json:"tax withheld,omitempty"`
	// Movement of assets into or out of an account
	Transfer *string `json:"transfer,omitempty"`
	// Fees incurred for transfer of a holding or account
	TransferFee *string `json:"transfer fee,omitempty"`
	// Fees related to adminstration of a trust account
	TrustFee *string `json:"trust fee,omitempty"`
	// Unqualified capital gain received as cash
	UnqualifiedGain *string `json:"unqualified gain,omitempty"`
	// Outflow of cash from an account
	Withdrawal *string `json:"withdrawal,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StandaloneInvestmentTransactionSubtype StandaloneInvestmentTransactionSubtype

// NewStandaloneInvestmentTransactionSubtype instantiates a new StandaloneInvestmentTransactionSubtype object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandaloneInvestmentTransactionSubtype() *StandaloneInvestmentTransactionSubtype {
	this := StandaloneInvestmentTransactionSubtype{}
	return &this
}

// NewStandaloneInvestmentTransactionSubtypeWithDefaults instantiates a new StandaloneInvestmentTransactionSubtype object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandaloneInvestmentTransactionSubtypeWithDefaults() *StandaloneInvestmentTransactionSubtype {
	this := StandaloneInvestmentTransactionSubtype{}
	return &this
}

// GetAccountFee returns the AccountFee field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetAccountFee() string {
	if o == nil || o.AccountFee == nil {
		var ret string
		return ret
	}
	return *o.AccountFee
}

// GetAccountFeeOk returns a tuple with the AccountFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetAccountFeeOk() (*string, bool) {
	if o == nil || o.AccountFee == nil {
		return nil, false
	}
	return o.AccountFee, true
}

// HasAccountFee returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasAccountFee() bool {
	if o != nil && o.AccountFee != nil {
		return true
	}

	return false
}

// SetAccountFee gets a reference to the given string and assigns it to the AccountFee field.
func (o *StandaloneInvestmentTransactionSubtype) SetAccountFee(v string) {
	o.AccountFee = &v
}

// GetAssignment returns the Assignment field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetAssignment() string {
	if o == nil || o.Assignment == nil {
		var ret string
		return ret
	}
	return *o.Assignment
}

// GetAssignmentOk returns a tuple with the Assignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetAssignmentOk() (*string, bool) {
	if o == nil || o.Assignment == nil {
		return nil, false
	}
	return o.Assignment, true
}

// HasAssignment returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasAssignment() bool {
	if o != nil && o.Assignment != nil {
		return true
	}

	return false
}

// SetAssignment gets a reference to the given string and assigns it to the Assignment field.
func (o *StandaloneInvestmentTransactionSubtype) SetAssignment(v string) {
	o.Assignment = &v
}

// GetBuy returns the Buy field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetBuy() string {
	if o == nil || o.Buy == nil {
		var ret string
		return ret
	}
	return *o.Buy
}

// GetBuyOk returns a tuple with the Buy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetBuyOk() (*string, bool) {
	if o == nil || o.Buy == nil {
		return nil, false
	}
	return o.Buy, true
}

// HasBuy returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasBuy() bool {
	if o != nil && o.Buy != nil {
		return true
	}

	return false
}

// SetBuy gets a reference to the given string and assigns it to the Buy field.
func (o *StandaloneInvestmentTransactionSubtype) SetBuy(v string) {
	o.Buy = &v
}

// GetBuyToCover returns the BuyToCover field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetBuyToCover() string {
	if o == nil || o.BuyToCover == nil {
		var ret string
		return ret
	}
	return *o.BuyToCover
}

// GetBuyToCoverOk returns a tuple with the BuyToCover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetBuyToCoverOk() (*string, bool) {
	if o == nil || o.BuyToCover == nil {
		return nil, false
	}
	return o.BuyToCover, true
}

// HasBuyToCover returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasBuyToCover() bool {
	if o != nil && o.BuyToCover != nil {
		return true
	}

	return false
}

// SetBuyToCover gets a reference to the given string and assigns it to the BuyToCover field.
func (o *StandaloneInvestmentTransactionSubtype) SetBuyToCover(v string) {
	o.BuyToCover = &v
}

// GetContribution returns the Contribution field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetContribution() string {
	if o == nil || o.Contribution == nil {
		var ret string
		return ret
	}
	return *o.Contribution
}

// GetContributionOk returns a tuple with the Contribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetContributionOk() (*string, bool) {
	if o == nil || o.Contribution == nil {
		return nil, false
	}
	return o.Contribution, true
}

// HasContribution returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasContribution() bool {
	if o != nil && o.Contribution != nil {
		return true
	}

	return false
}

// SetContribution gets a reference to the given string and assigns it to the Contribution field.
func (o *StandaloneInvestmentTransactionSubtype) SetContribution(v string) {
	o.Contribution = &v
}

// GetDeposit returns the Deposit field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetDeposit() string {
	if o == nil || o.Deposit == nil {
		var ret string
		return ret
	}
	return *o.Deposit
}

// GetDepositOk returns a tuple with the Deposit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetDepositOk() (*string, bool) {
	if o == nil || o.Deposit == nil {
		return nil, false
	}
	return o.Deposit, true
}

// HasDeposit returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasDeposit() bool {
	if o != nil && o.Deposit != nil {
		return true
	}

	return false
}

// SetDeposit gets a reference to the given string and assigns it to the Deposit field.
func (o *StandaloneInvestmentTransactionSubtype) SetDeposit(v string) {
	o.Deposit = &v
}

// GetDistribution returns the Distribution field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetDistribution() string {
	if o == nil || o.Distribution == nil {
		var ret string
		return ret
	}
	return *o.Distribution
}

// GetDistributionOk returns a tuple with the Distribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetDistributionOk() (*string, bool) {
	if o == nil || o.Distribution == nil {
		return nil, false
	}
	return o.Distribution, true
}

// HasDistribution returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasDistribution() bool {
	if o != nil && o.Distribution != nil {
		return true
	}

	return false
}

// SetDistribution gets a reference to the given string and assigns it to the Distribution field.
func (o *StandaloneInvestmentTransactionSubtype) SetDistribution(v string) {
	o.Distribution = &v
}

// GetDividend returns the Dividend field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetDividend() string {
	if o == nil || o.Dividend == nil {
		var ret string
		return ret
	}
	return *o.Dividend
}

// GetDividendOk returns a tuple with the Dividend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetDividendOk() (*string, bool) {
	if o == nil || o.Dividend == nil {
		return nil, false
	}
	return o.Dividend, true
}

// HasDividend returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasDividend() bool {
	if o != nil && o.Dividend != nil {
		return true
	}

	return false
}

// SetDividend gets a reference to the given string and assigns it to the Dividend field.
func (o *StandaloneInvestmentTransactionSubtype) SetDividend(v string) {
	o.Dividend = &v
}

// GetDividendReinvestment returns the DividendReinvestment field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetDividendReinvestment() string {
	if o == nil || o.DividendReinvestment == nil {
		var ret string
		return ret
	}
	return *o.DividendReinvestment
}

// GetDividendReinvestmentOk returns a tuple with the DividendReinvestment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetDividendReinvestmentOk() (*string, bool) {
	if o == nil || o.DividendReinvestment == nil {
		return nil, false
	}
	return o.DividendReinvestment, true
}

// HasDividendReinvestment returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasDividendReinvestment() bool {
	if o != nil && o.DividendReinvestment != nil {
		return true
	}

	return false
}

// SetDividendReinvestment gets a reference to the given string and assigns it to the DividendReinvestment field.
func (o *StandaloneInvestmentTransactionSubtype) SetDividendReinvestment(v string) {
	o.DividendReinvestment = &v
}

// GetExercise returns the Exercise field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetExercise() string {
	if o == nil || o.Exercise == nil {
		var ret string
		return ret
	}
	return *o.Exercise
}

// GetExerciseOk returns a tuple with the Exercise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetExerciseOk() (*string, bool) {
	if o == nil || o.Exercise == nil {
		return nil, false
	}
	return o.Exercise, true
}

// HasExercise returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasExercise() bool {
	if o != nil && o.Exercise != nil {
		return true
	}

	return false
}

// SetExercise gets a reference to the given string and assigns it to the Exercise field.
func (o *StandaloneInvestmentTransactionSubtype) SetExercise(v string) {
	o.Exercise = &v
}

// GetExpire returns the Expire field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetExpire() string {
	if o == nil || o.Expire == nil {
		var ret string
		return ret
	}
	return *o.Expire
}

// GetExpireOk returns a tuple with the Expire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetExpireOk() (*string, bool) {
	if o == nil || o.Expire == nil {
		return nil, false
	}
	return o.Expire, true
}

// HasExpire returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasExpire() bool {
	if o != nil && o.Expire != nil {
		return true
	}

	return false
}

// SetExpire gets a reference to the given string and assigns it to the Expire field.
func (o *StandaloneInvestmentTransactionSubtype) SetExpire(v string) {
	o.Expire = &v
}

// GetFundFee returns the FundFee field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetFundFee() string {
	if o == nil || o.FundFee == nil {
		var ret string
		return ret
	}
	return *o.FundFee
}

// GetFundFeeOk returns a tuple with the FundFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetFundFeeOk() (*string, bool) {
	if o == nil || o.FundFee == nil {
		return nil, false
	}
	return o.FundFee, true
}

// HasFundFee returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasFundFee() bool {
	if o != nil && o.FundFee != nil {
		return true
	}

	return false
}

// SetFundFee gets a reference to the given string and assigns it to the FundFee field.
func (o *StandaloneInvestmentTransactionSubtype) SetFundFee(v string) {
	o.FundFee = &v
}

// GetInterest returns the Interest field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetInterest() string {
	if o == nil || o.Interest == nil {
		var ret string
		return ret
	}
	return *o.Interest
}

// GetInterestOk returns a tuple with the Interest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetInterestOk() (*string, bool) {
	if o == nil || o.Interest == nil {
		return nil, false
	}
	return o.Interest, true
}

// HasInterest returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasInterest() bool {
	if o != nil && o.Interest != nil {
		return true
	}

	return false
}

// SetInterest gets a reference to the given string and assigns it to the Interest field.
func (o *StandaloneInvestmentTransactionSubtype) SetInterest(v string) {
	o.Interest = &v
}

// GetInterestReceivable returns the InterestReceivable field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetInterestReceivable() string {
	if o == nil || o.InterestReceivable == nil {
		var ret string
		return ret
	}
	return *o.InterestReceivable
}

// GetInterestReceivableOk returns a tuple with the InterestReceivable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetInterestReceivableOk() (*string, bool) {
	if o == nil || o.InterestReceivable == nil {
		return nil, false
	}
	return o.InterestReceivable, true
}

// HasInterestReceivable returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasInterestReceivable() bool {
	if o != nil && o.InterestReceivable != nil {
		return true
	}

	return false
}

// SetInterestReceivable gets a reference to the given string and assigns it to the InterestReceivable field.
func (o *StandaloneInvestmentTransactionSubtype) SetInterestReceivable(v string) {
	o.InterestReceivable = &v
}

// GetInterestReinvestment returns the InterestReinvestment field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetInterestReinvestment() string {
	if o == nil || o.InterestReinvestment == nil {
		var ret string
		return ret
	}
	return *o.InterestReinvestment
}

// GetInterestReinvestmentOk returns a tuple with the InterestReinvestment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetInterestReinvestmentOk() (*string, bool) {
	if o == nil || o.InterestReinvestment == nil {
		return nil, false
	}
	return o.InterestReinvestment, true
}

// HasInterestReinvestment returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasInterestReinvestment() bool {
	if o != nil && o.InterestReinvestment != nil {
		return true
	}

	return false
}

// SetInterestReinvestment gets a reference to the given string and assigns it to the InterestReinvestment field.
func (o *StandaloneInvestmentTransactionSubtype) SetInterestReinvestment(v string) {
	o.InterestReinvestment = &v
}

// GetLegalFee returns the LegalFee field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetLegalFee() string {
	if o == nil || o.LegalFee == nil {
		var ret string
		return ret
	}
	return *o.LegalFee
}

// GetLegalFeeOk returns a tuple with the LegalFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetLegalFeeOk() (*string, bool) {
	if o == nil || o.LegalFee == nil {
		return nil, false
	}
	return o.LegalFee, true
}

// HasLegalFee returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasLegalFee() bool {
	if o != nil && o.LegalFee != nil {
		return true
	}

	return false
}

// SetLegalFee gets a reference to the given string and assigns it to the LegalFee field.
func (o *StandaloneInvestmentTransactionSubtype) SetLegalFee(v string) {
	o.LegalFee = &v
}

// GetLoanPayment returns the LoanPayment field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetLoanPayment() string {
	if o == nil || o.LoanPayment == nil {
		var ret string
		return ret
	}
	return *o.LoanPayment
}

// GetLoanPaymentOk returns a tuple with the LoanPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetLoanPaymentOk() (*string, bool) {
	if o == nil || o.LoanPayment == nil {
		return nil, false
	}
	return o.LoanPayment, true
}

// HasLoanPayment returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasLoanPayment() bool {
	if o != nil && o.LoanPayment != nil {
		return true
	}

	return false
}

// SetLoanPayment gets a reference to the given string and assigns it to the LoanPayment field.
func (o *StandaloneInvestmentTransactionSubtype) SetLoanPayment(v string) {
	o.LoanPayment = &v
}

// GetLongTermCapitalGain returns the LongTermCapitalGain field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetLongTermCapitalGain() string {
	if o == nil || o.LongTermCapitalGain == nil {
		var ret string
		return ret
	}
	return *o.LongTermCapitalGain
}

// GetLongTermCapitalGainOk returns a tuple with the LongTermCapitalGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetLongTermCapitalGainOk() (*string, bool) {
	if o == nil || o.LongTermCapitalGain == nil {
		return nil, false
	}
	return o.LongTermCapitalGain, true
}

// HasLongTermCapitalGain returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasLongTermCapitalGain() bool {
	if o != nil && o.LongTermCapitalGain != nil {
		return true
	}

	return false
}

// SetLongTermCapitalGain gets a reference to the given string and assigns it to the LongTermCapitalGain field.
func (o *StandaloneInvestmentTransactionSubtype) SetLongTermCapitalGain(v string) {
	o.LongTermCapitalGain = &v
}

// GetLongTermCapitalGainReinvestment returns the LongTermCapitalGainReinvestment field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetLongTermCapitalGainReinvestment() string {
	if o == nil || o.LongTermCapitalGainReinvestment == nil {
		var ret string
		return ret
	}
	return *o.LongTermCapitalGainReinvestment
}

// GetLongTermCapitalGainReinvestmentOk returns a tuple with the LongTermCapitalGainReinvestment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetLongTermCapitalGainReinvestmentOk() (*string, bool) {
	if o == nil || o.LongTermCapitalGainReinvestment == nil {
		return nil, false
	}
	return o.LongTermCapitalGainReinvestment, true
}

// HasLongTermCapitalGainReinvestment returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasLongTermCapitalGainReinvestment() bool {
	if o != nil && o.LongTermCapitalGainReinvestment != nil {
		return true
	}

	return false
}

// SetLongTermCapitalGainReinvestment gets a reference to the given string and assigns it to the LongTermCapitalGainReinvestment field.
func (o *StandaloneInvestmentTransactionSubtype) SetLongTermCapitalGainReinvestment(v string) {
	o.LongTermCapitalGainReinvestment = &v
}

// GetManagementFee returns the ManagementFee field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetManagementFee() string {
	if o == nil || o.ManagementFee == nil {
		var ret string
		return ret
	}
	return *o.ManagementFee
}

// GetManagementFeeOk returns a tuple with the ManagementFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetManagementFeeOk() (*string, bool) {
	if o == nil || o.ManagementFee == nil {
		return nil, false
	}
	return o.ManagementFee, true
}

// HasManagementFee returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasManagementFee() bool {
	if o != nil && o.ManagementFee != nil {
		return true
	}

	return false
}

// SetManagementFee gets a reference to the given string and assigns it to the ManagementFee field.
func (o *StandaloneInvestmentTransactionSubtype) SetManagementFee(v string) {
	o.ManagementFee = &v
}

// GetMarginExpense returns the MarginExpense field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetMarginExpense() string {
	if o == nil || o.MarginExpense == nil {
		var ret string
		return ret
	}
	return *o.MarginExpense
}

// GetMarginExpenseOk returns a tuple with the MarginExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetMarginExpenseOk() (*string, bool) {
	if o == nil || o.MarginExpense == nil {
		return nil, false
	}
	return o.MarginExpense, true
}

// HasMarginExpense returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasMarginExpense() bool {
	if o != nil && o.MarginExpense != nil {
		return true
	}

	return false
}

// SetMarginExpense gets a reference to the given string and assigns it to the MarginExpense field.
func (o *StandaloneInvestmentTransactionSubtype) SetMarginExpense(v string) {
	o.MarginExpense = &v
}

// GetMerger returns the Merger field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetMerger() string {
	if o == nil || o.Merger == nil {
		var ret string
		return ret
	}
	return *o.Merger
}

// GetMergerOk returns a tuple with the Merger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetMergerOk() (*string, bool) {
	if o == nil || o.Merger == nil {
		return nil, false
	}
	return o.Merger, true
}

// HasMerger returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasMerger() bool {
	if o != nil && o.Merger != nil {
		return true
	}

	return false
}

// SetMerger gets a reference to the given string and assigns it to the Merger field.
func (o *StandaloneInvestmentTransactionSubtype) SetMerger(v string) {
	o.Merger = &v
}

// GetMiscellaneousFee returns the MiscellaneousFee field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetMiscellaneousFee() string {
	if o == nil || o.MiscellaneousFee == nil {
		var ret string
		return ret
	}
	return *o.MiscellaneousFee
}

// GetMiscellaneousFeeOk returns a tuple with the MiscellaneousFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetMiscellaneousFeeOk() (*string, bool) {
	if o == nil || o.MiscellaneousFee == nil {
		return nil, false
	}
	return o.MiscellaneousFee, true
}

// HasMiscellaneousFee returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasMiscellaneousFee() bool {
	if o != nil && o.MiscellaneousFee != nil {
		return true
	}

	return false
}

// SetMiscellaneousFee gets a reference to the given string and assigns it to the MiscellaneousFee field.
func (o *StandaloneInvestmentTransactionSubtype) SetMiscellaneousFee(v string) {
	o.MiscellaneousFee = &v
}

// GetNonQualifiedDividend returns the NonQualifiedDividend field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetNonQualifiedDividend() string {
	if o == nil || o.NonQualifiedDividend == nil {
		var ret string
		return ret
	}
	return *o.NonQualifiedDividend
}

// GetNonQualifiedDividendOk returns a tuple with the NonQualifiedDividend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetNonQualifiedDividendOk() (*string, bool) {
	if o == nil || o.NonQualifiedDividend == nil {
		return nil, false
	}
	return o.NonQualifiedDividend, true
}

// HasNonQualifiedDividend returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasNonQualifiedDividend() bool {
	if o != nil && o.NonQualifiedDividend != nil {
		return true
	}

	return false
}

// SetNonQualifiedDividend gets a reference to the given string and assigns it to the NonQualifiedDividend field.
func (o *StandaloneInvestmentTransactionSubtype) SetNonQualifiedDividend(v string) {
	o.NonQualifiedDividend = &v
}

// GetNonResidentTax returns the NonResidentTax field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetNonResidentTax() string {
	if o == nil || o.NonResidentTax == nil {
		var ret string
		return ret
	}
	return *o.NonResidentTax
}

// GetNonResidentTaxOk returns a tuple with the NonResidentTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetNonResidentTaxOk() (*string, bool) {
	if o == nil || o.NonResidentTax == nil {
		return nil, false
	}
	return o.NonResidentTax, true
}

// HasNonResidentTax returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasNonResidentTax() bool {
	if o != nil && o.NonResidentTax != nil {
		return true
	}

	return false
}

// SetNonResidentTax gets a reference to the given string and assigns it to the NonResidentTax field.
func (o *StandaloneInvestmentTransactionSubtype) SetNonResidentTax(v string) {
	o.NonResidentTax = &v
}

// GetPendingCredit returns the PendingCredit field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetPendingCredit() string {
	if o == nil || o.PendingCredit == nil {
		var ret string
		return ret
	}
	return *o.PendingCredit
}

// GetPendingCreditOk returns a tuple with the PendingCredit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetPendingCreditOk() (*string, bool) {
	if o == nil || o.PendingCredit == nil {
		return nil, false
	}
	return o.PendingCredit, true
}

// HasPendingCredit returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasPendingCredit() bool {
	if o != nil && o.PendingCredit != nil {
		return true
	}

	return false
}

// SetPendingCredit gets a reference to the given string and assigns it to the PendingCredit field.
func (o *StandaloneInvestmentTransactionSubtype) SetPendingCredit(v string) {
	o.PendingCredit = &v
}

// GetPendingDebit returns the PendingDebit field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetPendingDebit() string {
	if o == nil || o.PendingDebit == nil {
		var ret string
		return ret
	}
	return *o.PendingDebit
}

// GetPendingDebitOk returns a tuple with the PendingDebit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetPendingDebitOk() (*string, bool) {
	if o == nil || o.PendingDebit == nil {
		return nil, false
	}
	return o.PendingDebit, true
}

// HasPendingDebit returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasPendingDebit() bool {
	if o != nil && o.PendingDebit != nil {
		return true
	}

	return false
}

// SetPendingDebit gets a reference to the given string and assigns it to the PendingDebit field.
func (o *StandaloneInvestmentTransactionSubtype) SetPendingDebit(v string) {
	o.PendingDebit = &v
}

// GetQualifiedDividend returns the QualifiedDividend field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetQualifiedDividend() string {
	if o == nil || o.QualifiedDividend == nil {
		var ret string
		return ret
	}
	return *o.QualifiedDividend
}

// GetQualifiedDividendOk returns a tuple with the QualifiedDividend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetQualifiedDividendOk() (*string, bool) {
	if o == nil || o.QualifiedDividend == nil {
		return nil, false
	}
	return o.QualifiedDividend, true
}

// HasQualifiedDividend returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasQualifiedDividend() bool {
	if o != nil && o.QualifiedDividend != nil {
		return true
	}

	return false
}

// SetQualifiedDividend gets a reference to the given string and assigns it to the QualifiedDividend field.
func (o *StandaloneInvestmentTransactionSubtype) SetQualifiedDividend(v string) {
	o.QualifiedDividend = &v
}

// GetRebalance returns the Rebalance field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetRebalance() string {
	if o == nil || o.Rebalance == nil {
		var ret string
		return ret
	}
	return *o.Rebalance
}

// GetRebalanceOk returns a tuple with the Rebalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetRebalanceOk() (*string, bool) {
	if o == nil || o.Rebalance == nil {
		return nil, false
	}
	return o.Rebalance, true
}

// HasRebalance returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasRebalance() bool {
	if o != nil && o.Rebalance != nil {
		return true
	}

	return false
}

// SetRebalance gets a reference to the given string and assigns it to the Rebalance field.
func (o *StandaloneInvestmentTransactionSubtype) SetRebalance(v string) {
	o.Rebalance = &v
}

// GetReturnOfPrincipal returns the ReturnOfPrincipal field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetReturnOfPrincipal() string {
	if o == nil || o.ReturnOfPrincipal == nil {
		var ret string
		return ret
	}
	return *o.ReturnOfPrincipal
}

// GetReturnOfPrincipalOk returns a tuple with the ReturnOfPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetReturnOfPrincipalOk() (*string, bool) {
	if o == nil || o.ReturnOfPrincipal == nil {
		return nil, false
	}
	return o.ReturnOfPrincipal, true
}

// HasReturnOfPrincipal returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasReturnOfPrincipal() bool {
	if o != nil && o.ReturnOfPrincipal != nil {
		return true
	}

	return false
}

// SetReturnOfPrincipal gets a reference to the given string and assigns it to the ReturnOfPrincipal field.
func (o *StandaloneInvestmentTransactionSubtype) SetReturnOfPrincipal(v string) {
	o.ReturnOfPrincipal = &v
}

// GetSell returns the Sell field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetSell() string {
	if o == nil || o.Sell == nil {
		var ret string
		return ret
	}
	return *o.Sell
}

// GetSellOk returns a tuple with the Sell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetSellOk() (*string, bool) {
	if o == nil || o.Sell == nil {
		return nil, false
	}
	return o.Sell, true
}

// HasSell returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasSell() bool {
	if o != nil && o.Sell != nil {
		return true
	}

	return false
}

// SetSell gets a reference to the given string and assigns it to the Sell field.
func (o *StandaloneInvestmentTransactionSubtype) SetSell(v string) {
	o.Sell = &v
}

// GetSellShort returns the SellShort field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetSellShort() string {
	if o == nil || o.SellShort == nil {
		var ret string
		return ret
	}
	return *o.SellShort
}

// GetSellShortOk returns a tuple with the SellShort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetSellShortOk() (*string, bool) {
	if o == nil || o.SellShort == nil {
		return nil, false
	}
	return o.SellShort, true
}

// HasSellShort returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasSellShort() bool {
	if o != nil && o.SellShort != nil {
		return true
	}

	return false
}

// SetSellShort gets a reference to the given string and assigns it to the SellShort field.
func (o *StandaloneInvestmentTransactionSubtype) SetSellShort(v string) {
	o.SellShort = &v
}

// GetShortTermCapitalGain returns the ShortTermCapitalGain field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetShortTermCapitalGain() string {
	if o == nil || o.ShortTermCapitalGain == nil {
		var ret string
		return ret
	}
	return *o.ShortTermCapitalGain
}

// GetShortTermCapitalGainOk returns a tuple with the ShortTermCapitalGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetShortTermCapitalGainOk() (*string, bool) {
	if o == nil || o.ShortTermCapitalGain == nil {
		return nil, false
	}
	return o.ShortTermCapitalGain, true
}

// HasShortTermCapitalGain returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasShortTermCapitalGain() bool {
	if o != nil && o.ShortTermCapitalGain != nil {
		return true
	}

	return false
}

// SetShortTermCapitalGain gets a reference to the given string and assigns it to the ShortTermCapitalGain field.
func (o *StandaloneInvestmentTransactionSubtype) SetShortTermCapitalGain(v string) {
	o.ShortTermCapitalGain = &v
}

// GetShortTermCapitalGainReinvestment returns the ShortTermCapitalGainReinvestment field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetShortTermCapitalGainReinvestment() string {
	if o == nil || o.ShortTermCapitalGainReinvestment == nil {
		var ret string
		return ret
	}
	return *o.ShortTermCapitalGainReinvestment
}

// GetShortTermCapitalGainReinvestmentOk returns a tuple with the ShortTermCapitalGainReinvestment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetShortTermCapitalGainReinvestmentOk() (*string, bool) {
	if o == nil || o.ShortTermCapitalGainReinvestment == nil {
		return nil, false
	}
	return o.ShortTermCapitalGainReinvestment, true
}

// HasShortTermCapitalGainReinvestment returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasShortTermCapitalGainReinvestment() bool {
	if o != nil && o.ShortTermCapitalGainReinvestment != nil {
		return true
	}

	return false
}

// SetShortTermCapitalGainReinvestment gets a reference to the given string and assigns it to the ShortTermCapitalGainReinvestment field.
func (o *StandaloneInvestmentTransactionSubtype) SetShortTermCapitalGainReinvestment(v string) {
	o.ShortTermCapitalGainReinvestment = &v
}

// GetSpinOff returns the SpinOff field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetSpinOff() string {
	if o == nil || o.SpinOff == nil {
		var ret string
		return ret
	}
	return *o.SpinOff
}

// GetSpinOffOk returns a tuple with the SpinOff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetSpinOffOk() (*string, bool) {
	if o == nil || o.SpinOff == nil {
		return nil, false
	}
	return o.SpinOff, true
}

// HasSpinOff returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasSpinOff() bool {
	if o != nil && o.SpinOff != nil {
		return true
	}

	return false
}

// SetSpinOff gets a reference to the given string and assigns it to the SpinOff field.
func (o *StandaloneInvestmentTransactionSubtype) SetSpinOff(v string) {
	o.SpinOff = &v
}

// GetSplit returns the Split field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetSplit() string {
	if o == nil || o.Split == nil {
		var ret string
		return ret
	}
	return *o.Split
}

// GetSplitOk returns a tuple with the Split field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetSplitOk() (*string, bool) {
	if o == nil || o.Split == nil {
		return nil, false
	}
	return o.Split, true
}

// HasSplit returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasSplit() bool {
	if o != nil && o.Split != nil {
		return true
	}

	return false
}

// SetSplit gets a reference to the given string and assigns it to the Split field.
func (o *StandaloneInvestmentTransactionSubtype) SetSplit(v string) {
	o.Split = &v
}

// GetStockDistribution returns the StockDistribution field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetStockDistribution() string {
	if o == nil || o.StockDistribution == nil {
		var ret string
		return ret
	}
	return *o.StockDistribution
}

// GetStockDistributionOk returns a tuple with the StockDistribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetStockDistributionOk() (*string, bool) {
	if o == nil || o.StockDistribution == nil {
		return nil, false
	}
	return o.StockDistribution, true
}

// HasStockDistribution returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasStockDistribution() bool {
	if o != nil && o.StockDistribution != nil {
		return true
	}

	return false
}

// SetStockDistribution gets a reference to the given string and assigns it to the StockDistribution field.
func (o *StandaloneInvestmentTransactionSubtype) SetStockDistribution(v string) {
	o.StockDistribution = &v
}

// GetTax returns the Tax field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetTax() string {
	if o == nil || o.Tax == nil {
		var ret string
		return ret
	}
	return *o.Tax
}

// GetTaxOk returns a tuple with the Tax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetTaxOk() (*string, bool) {
	if o == nil || o.Tax == nil {
		return nil, false
	}
	return o.Tax, true
}

// HasTax returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasTax() bool {
	if o != nil && o.Tax != nil {
		return true
	}

	return false
}

// SetTax gets a reference to the given string and assigns it to the Tax field.
func (o *StandaloneInvestmentTransactionSubtype) SetTax(v string) {
	o.Tax = &v
}

// GetTaxWithheld returns the TaxWithheld field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetTaxWithheld() string {
	if o == nil || o.TaxWithheld == nil {
		var ret string
		return ret
	}
	return *o.TaxWithheld
}

// GetTaxWithheldOk returns a tuple with the TaxWithheld field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetTaxWithheldOk() (*string, bool) {
	if o == nil || o.TaxWithheld == nil {
		return nil, false
	}
	return o.TaxWithheld, true
}

// HasTaxWithheld returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasTaxWithheld() bool {
	if o != nil && o.TaxWithheld != nil {
		return true
	}

	return false
}

// SetTaxWithheld gets a reference to the given string and assigns it to the TaxWithheld field.
func (o *StandaloneInvestmentTransactionSubtype) SetTaxWithheld(v string) {
	o.TaxWithheld = &v
}

// GetTransfer returns the Transfer field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetTransfer() string {
	if o == nil || o.Transfer == nil {
		var ret string
		return ret
	}
	return *o.Transfer
}

// GetTransferOk returns a tuple with the Transfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetTransferOk() (*string, bool) {
	if o == nil || o.Transfer == nil {
		return nil, false
	}
	return o.Transfer, true
}

// HasTransfer returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasTransfer() bool {
	if o != nil && o.Transfer != nil {
		return true
	}

	return false
}

// SetTransfer gets a reference to the given string and assigns it to the Transfer field.
func (o *StandaloneInvestmentTransactionSubtype) SetTransfer(v string) {
	o.Transfer = &v
}

// GetTransferFee returns the TransferFee field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetTransferFee() string {
	if o == nil || o.TransferFee == nil {
		var ret string
		return ret
	}
	return *o.TransferFee
}

// GetTransferFeeOk returns a tuple with the TransferFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetTransferFeeOk() (*string, bool) {
	if o == nil || o.TransferFee == nil {
		return nil, false
	}
	return o.TransferFee, true
}

// HasTransferFee returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasTransferFee() bool {
	if o != nil && o.TransferFee != nil {
		return true
	}

	return false
}

// SetTransferFee gets a reference to the given string and assigns it to the TransferFee field.
func (o *StandaloneInvestmentTransactionSubtype) SetTransferFee(v string) {
	o.TransferFee = &v
}

// GetTrustFee returns the TrustFee field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetTrustFee() string {
	if o == nil || o.TrustFee == nil {
		var ret string
		return ret
	}
	return *o.TrustFee
}

// GetTrustFeeOk returns a tuple with the TrustFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetTrustFeeOk() (*string, bool) {
	if o == nil || o.TrustFee == nil {
		return nil, false
	}
	return o.TrustFee, true
}

// HasTrustFee returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasTrustFee() bool {
	if o != nil && o.TrustFee != nil {
		return true
	}

	return false
}

// SetTrustFee gets a reference to the given string and assigns it to the TrustFee field.
func (o *StandaloneInvestmentTransactionSubtype) SetTrustFee(v string) {
	o.TrustFee = &v
}

// GetUnqualifiedGain returns the UnqualifiedGain field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetUnqualifiedGain() string {
	if o == nil || o.UnqualifiedGain == nil {
		var ret string
		return ret
	}
	return *o.UnqualifiedGain
}

// GetUnqualifiedGainOk returns a tuple with the UnqualifiedGain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetUnqualifiedGainOk() (*string, bool) {
	if o == nil || o.UnqualifiedGain == nil {
		return nil, false
	}
	return o.UnqualifiedGain, true
}

// HasUnqualifiedGain returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasUnqualifiedGain() bool {
	if o != nil && o.UnqualifiedGain != nil {
		return true
	}

	return false
}

// SetUnqualifiedGain gets a reference to the given string and assigns it to the UnqualifiedGain field.
func (o *StandaloneInvestmentTransactionSubtype) SetUnqualifiedGain(v string) {
	o.UnqualifiedGain = &v
}

// GetWithdrawal returns the Withdrawal field value if set, zero value otherwise.
func (o *StandaloneInvestmentTransactionSubtype) GetWithdrawal() string {
	if o == nil || o.Withdrawal == nil {
		var ret string
		return ret
	}
	return *o.Withdrawal
}

// GetWithdrawalOk returns a tuple with the Withdrawal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandaloneInvestmentTransactionSubtype) GetWithdrawalOk() (*string, bool) {
	if o == nil || o.Withdrawal == nil {
		return nil, false
	}
	return o.Withdrawal, true
}

// HasWithdrawal returns a boolean if a field has been set.
func (o *StandaloneInvestmentTransactionSubtype) HasWithdrawal() bool {
	if o != nil && o.Withdrawal != nil {
		return true
	}

	return false
}

// SetWithdrawal gets a reference to the given string and assigns it to the Withdrawal field.
func (o *StandaloneInvestmentTransactionSubtype) SetWithdrawal(v string) {
	o.Withdrawal = &v
}

func (o StandaloneInvestmentTransactionSubtype) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountFee != nil {
		toSerialize["account fee"] = o.AccountFee
	}
	if o.Assignment != nil {
		toSerialize["assignment"] = o.Assignment
	}
	if o.Buy != nil {
		toSerialize["buy"] = o.Buy
	}
	if o.BuyToCover != nil {
		toSerialize["buy to cover"] = o.BuyToCover
	}
	if o.Contribution != nil {
		toSerialize["contribution"] = o.Contribution
	}
	if o.Deposit != nil {
		toSerialize["deposit"] = o.Deposit
	}
	if o.Distribution != nil {
		toSerialize["distribution"] = o.Distribution
	}
	if o.Dividend != nil {
		toSerialize["dividend"] = o.Dividend
	}
	if o.DividendReinvestment != nil {
		toSerialize["dividend reinvestment"] = o.DividendReinvestment
	}
	if o.Exercise != nil {
		toSerialize["exercise"] = o.Exercise
	}
	if o.Expire != nil {
		toSerialize["expire"] = o.Expire
	}
	if o.FundFee != nil {
		toSerialize["fund fee"] = o.FundFee
	}
	if o.Interest != nil {
		toSerialize["interest"] = o.Interest
	}
	if o.InterestReceivable != nil {
		toSerialize["interest receivable"] = o.InterestReceivable
	}
	if o.InterestReinvestment != nil {
		toSerialize["interest reinvestment"] = o.InterestReinvestment
	}
	if o.LegalFee != nil {
		toSerialize["legal fee"] = o.LegalFee
	}
	if o.LoanPayment != nil {
		toSerialize["loan payment"] = o.LoanPayment
	}
	if o.LongTermCapitalGain != nil {
		toSerialize["long-term capital gain"] = o.LongTermCapitalGain
	}
	if o.LongTermCapitalGainReinvestment != nil {
		toSerialize["long-term capital gain reinvestment"] = o.LongTermCapitalGainReinvestment
	}
	if o.ManagementFee != nil {
		toSerialize["management fee"] = o.ManagementFee
	}
	if o.MarginExpense != nil {
		toSerialize["margin expense"] = o.MarginExpense
	}
	if o.Merger != nil {
		toSerialize["merger"] = o.Merger
	}
	if o.MiscellaneousFee != nil {
		toSerialize["miscellaneous fee"] = o.MiscellaneousFee
	}
	if o.NonQualifiedDividend != nil {
		toSerialize["non-qualified dividend"] = o.NonQualifiedDividend
	}
	if o.NonResidentTax != nil {
		toSerialize["non-resident tax"] = o.NonResidentTax
	}
	if o.PendingCredit != nil {
		toSerialize["pending credit"] = o.PendingCredit
	}
	if o.PendingDebit != nil {
		toSerialize["pending debit"] = o.PendingDebit
	}
	if o.QualifiedDividend != nil {
		toSerialize["qualified dividend"] = o.QualifiedDividend
	}
	if o.Rebalance != nil {
		toSerialize["rebalance"] = o.Rebalance
	}
	if o.ReturnOfPrincipal != nil {
		toSerialize["return of principal"] = o.ReturnOfPrincipal
	}
	if o.Sell != nil {
		toSerialize["sell"] = o.Sell
	}
	if o.SellShort != nil {
		toSerialize["sell short"] = o.SellShort
	}
	if o.ShortTermCapitalGain != nil {
		toSerialize["short-term capital gain"] = o.ShortTermCapitalGain
	}
	if o.ShortTermCapitalGainReinvestment != nil {
		toSerialize["short-term capital gain reinvestment"] = o.ShortTermCapitalGainReinvestment
	}
	if o.SpinOff != nil {
		toSerialize["spin off"] = o.SpinOff
	}
	if o.Split != nil {
		toSerialize["split"] = o.Split
	}
	if o.StockDistribution != nil {
		toSerialize["stock distribution"] = o.StockDistribution
	}
	if o.Tax != nil {
		toSerialize["tax"] = o.Tax
	}
	if o.TaxWithheld != nil {
		toSerialize["tax withheld"] = o.TaxWithheld
	}
	if o.Transfer != nil {
		toSerialize["transfer"] = o.Transfer
	}
	if o.TransferFee != nil {
		toSerialize["transfer fee"] = o.TransferFee
	}
	if o.TrustFee != nil {
		toSerialize["trust fee"] = o.TrustFee
	}
	if o.UnqualifiedGain != nil {
		toSerialize["unqualified gain"] = o.UnqualifiedGain
	}
	if o.Withdrawal != nil {
		toSerialize["withdrawal"] = o.Withdrawal
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StandaloneInvestmentTransactionSubtype) UnmarshalJSON(bytes []byte) (err error) {
	varStandaloneInvestmentTransactionSubtype := _StandaloneInvestmentTransactionSubtype{}

	if err = json.Unmarshal(bytes, &varStandaloneInvestmentTransactionSubtype); err == nil {
		*o = StandaloneInvestmentTransactionSubtype(varStandaloneInvestmentTransactionSubtype)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account fee")
		delete(additionalProperties, "assignment")
		delete(additionalProperties, "buy")
		delete(additionalProperties, "buy to cover")
		delete(additionalProperties, "contribution")
		delete(additionalProperties, "deposit")
		delete(additionalProperties, "distribution")
		delete(additionalProperties, "dividend")
		delete(additionalProperties, "dividend reinvestment")
		delete(additionalProperties, "exercise")
		delete(additionalProperties, "expire")
		delete(additionalProperties, "fund fee")
		delete(additionalProperties, "interest")
		delete(additionalProperties, "interest receivable")
		delete(additionalProperties, "interest reinvestment")
		delete(additionalProperties, "legal fee")
		delete(additionalProperties, "loan payment")
		delete(additionalProperties, "long-term capital gain")
		delete(additionalProperties, "long-term capital gain reinvestment")
		delete(additionalProperties, "management fee")
		delete(additionalProperties, "margin expense")
		delete(additionalProperties, "merger")
		delete(additionalProperties, "miscellaneous fee")
		delete(additionalProperties, "non-qualified dividend")
		delete(additionalProperties, "non-resident tax")
		delete(additionalProperties, "pending credit")
		delete(additionalProperties, "pending debit")
		delete(additionalProperties, "qualified dividend")
		delete(additionalProperties, "rebalance")
		delete(additionalProperties, "return of principal")
		delete(additionalProperties, "sell")
		delete(additionalProperties, "sell short")
		delete(additionalProperties, "short-term capital gain")
		delete(additionalProperties, "short-term capital gain reinvestment")
		delete(additionalProperties, "spin off")
		delete(additionalProperties, "split")
		delete(additionalProperties, "stock distribution")
		delete(additionalProperties, "tax")
		delete(additionalProperties, "tax withheld")
		delete(additionalProperties, "transfer")
		delete(additionalProperties, "transfer fee")
		delete(additionalProperties, "trust fee")
		delete(additionalProperties, "unqualified gain")
		delete(additionalProperties, "withdrawal")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStandaloneInvestmentTransactionSubtype struct {
	value *StandaloneInvestmentTransactionSubtype
	isSet bool
}

func (v NullableStandaloneInvestmentTransactionSubtype) Get() *StandaloneInvestmentTransactionSubtype {
	return v.value
}

func (v *NullableStandaloneInvestmentTransactionSubtype) Set(val *StandaloneInvestmentTransactionSubtype) {
	v.value = val
	v.isSet = true
}

func (v NullableStandaloneInvestmentTransactionSubtype) IsSet() bool {
	return v.isSet
}

func (v *NullableStandaloneInvestmentTransactionSubtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandaloneInvestmentTransactionSubtype(val *StandaloneInvestmentTransactionSubtype) *NullableStandaloneInvestmentTransactionSubtype {
	return &NullableStandaloneInvestmentTransactionSubtype{value: val, isSet: true}
}

func (v NullableStandaloneInvestmentTransactionSubtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandaloneInvestmentTransactionSubtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


